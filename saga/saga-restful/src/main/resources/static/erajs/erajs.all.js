/*
 * Copyright (c) 2014 www.erajsyt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 */
/**
 * @class erajs
 * @singleton
 */
var erajs = erajs || {};

(function(){
	var global = this,
		objectPrototype = Object.prototype,
        toString = objectPrototype.toString,
        enumerables = true,
        enumerablesTest = {toString: 1},
		emptyFn = function () {},
        callOverrideParent = function () {
            var method = callOverrideParent.caller.caller; // skip callParent (our caller)
            return method.$owner.prototype[method.$name].apply(this, arguments);
        };
        
     Function.prototype.$erajsIsFunction = true;  
     erajs.global = global;
     
     for (i in enumerablesTest) {
         enumerables = null;
     }

     if (enumerables) {
         enumerables = ['hasOwnProperty', 'valueOf', 'isPrototypeOf', 'propertyIsEnumerajsble',
                       'toLocaleString', 'toString', 'constructor'];
     }
    
    /**
     * An array containing extra enumerables for old browsers
     * @property {String[]}
     */
    erajs.enumerables = enumerables;

    /**
     * Copies all the properties of config to the specified object.
     * Note that if recursive merging and cloning without referencing the original objects / arrays is needed, use
     * {@link erajs.Object#merge} instead.
     * @param {Object} object The receiver of the properties
     * @param {Object} config The source of the properties
     * @param {Object} [defaults] A different object that will also be applied for default values
     * @return {Object} returns obj
     */
    erajs.apply = function(object, config, defaults) {
        if (defaults) {
            erajs.apply(object, defaults);
        }

        if (object && config && typeof config === 'object') {
            var i, j, k;

            for (i in config) {
                object[i] = config[i];
            }

            if (enumerables) {
                for (j = enumerables.length; j--;) {
                    k = enumerables[j];
                    if (config.hasOwnProperty(k)) {
                        object[k] = config[k];
                    }
                }
            }
        }

        return object;
    };


    erajs.apply(erajs, {
        name: erajs.sandboxName || 'erajs',
        zIndex : 9000,
        core : {},
        ui : {},
        util : {},
        framework : {},

        /**
         *  @property {Boolean} 是否本地化
         */
        localize : true,

        /**
         * @property {Function}
         * A reusable empty function
         */
        emptyFn: emptyFn,

        /**
         * A reusable identity function. The function will always return the first argument, unchanged.
         */
        identityFn: function(o) {
            return o;
        },
        
        /**
         * A zero length string which will pass a truth test. Useful for passing to methods
         * which use a truth test to reject <i>falsy</i> values where a string value must be cleared.
         */
        emptyString: new String(),

        /**
         * Copies all the properties of config to object if they don't already exist.
         * @param {Object} object The receiver of the properties
         * @param {Object} config The source of the properties
         * @return {Object} returns obj
         */
        applyIf: function(object, config) {
            var property;

            if (object) {
                for (property in config) {
                    if (object[property] === undefined) {
                        object[property] = config[property];
                    }
                }
            }

            return object;
        }
    });
	
	erajs.apply(erajs, {
        /**
         * This method deprecated. Use {@link Ext#define Ext.define} instead.
         * @method
         * @param {Function} superclass
         * @param {Object} overrides
         * @return {Function} The subclass constructor from the <tt>overrides</tt> parameter, or a generated one if not provided.
         */
        extend: (function() {
            // inline overrides
            var objectConstructor = objectPrototype.constructor,
                inlineOverrides = function(o) {
                for (var m in o) {
                    if (!o.hasOwnProperty(m)) {
                        continue;
                    }
                    this[m] = o[m];
                }
            };
            return function(subclass, superclass, overrides) {
                // First we check if the user passed in just the superClass with overrides
                if (erajs.isObject(superclass)) {
                    overrides = superclass;
                    superclass = subclass;
                    subclass = overrides.constructor !== objectConstructor ? overrides.constructor : function() {
                        superclass.apply(this, arguments);
                    };
                }

                //<debug>
                if (!superclass) {
                	alert("Attempting to erajsend from a class which has not been loaded on the page.");
                }
                //</debug>

                // We create a new temporary class
                var F = function() {},
                    subclassProto, superclassProto = superclass.prototype;

                F.prototype = superclassProto;
                subclassProto = subclass.prototype = new F();
                subclassProto.constructor = subclass;
                subclass.superclass = superclassProto;

                if (superclassProto.constructor === objectConstructor) {
                    superclassProto.constructor = superclass;
                }

                subclass.override = function(overrides) {
                    erajs.override(subclass, overrides);
                };

                subclassProto.override = inlineOverrides;
                subclassProto.proto = subclassProto;

                subclass.override(overrides);

                subclass.extend = function(o) {
                    return erajs.extend(subclass, o);
                };

                return subclass;
            };
        }()),

        /**
         * Overrides members of the specified `target` with the given values.
         *
         * If the `target` is a function, it is assumed to be a constructor and the contents
         * of `overrides` are applied to its `prototype` using {@link erajs#apply erajs.apply}.
         *
         * If the `target` is none of these, the `overrides` are applied to the `target`
         * using {@link erajs#apply erajs.apply}.
         *
         * @param {Object} target The target to override.
         * @param {Object} overrides The properties to add or replace on `target`.
         * @method override
         */
        override: function (target, overrides) {
            if (target.$isClass) {
                target.override(overrides);
            } else if (typeof target == 'function') {
                erajs.apply(target.prototype, overrides);
            } else {
                var owner = target.self,
                    name, value;

                if (owner && owner.$isClass) { // if (instance of erajs.define'd class)
                    for (name in overrides) {
                        if (overrides.hasOwnProperty(name)) {
                            value = overrides[name];

                            if (typeof value == 'function') {
                                //<debug>
                                if (owner.$className) {
                                    value.displayName = owner.$className + '#' + name;
                                }
                                //</debug>

                                value.$name = name;
                                value.$owner = owner;
                                value.$previous = target.hasOwnProperty(name)
                                    ? target[name] // already hooked, so call previous hook
                                    : callOverrideParent; // calls by name on prototype
                            }

                            target[name] = value;
                        }
                    }
                } else {
                    erajs.apply(target, overrides);
                }
            }
            return target;
        }
    });


    erajs.apply(erajs,{

        /**
         * Returns true if the passed value is a boolean.
         *
         * @param {Object} value The value to test
         * @return {Boolean}
         */
        isBoolean: function(value) {
            return typeof value === 'boolean';
        },

        /**
         * Returns true if the passed value is a JavaScript Object, false otherwise.
         * @param {Object} value The value to test
         * @return {Boolean}
         * @method
         */
        isObject: (toString.call(null) === '[object Object]') ?
            function(value) {
                // check ownerDocument here as well to exclude DOM nodes
                return value !== null && value !== undefined && toString.call(value) === '[object Object]' && value.ownerDocument === undefined;
            } :
            function(value) {
                return toString.call(value) === '[object Object]';
            },

        /**
         * Returns true if the passed value is empty, false otherwise. The value is deemed to be empty if it is either:
         *
         * - `null`
         * - `undefined`
         * - a zero-length array
         * - a zero-length string (Unless the `allowEmptyString` parameter is set to `true`)
         *
         * @param {Object} value The value to test
         * @param {Boolean} allowEmptyString (optional) true to allow empty strings (defaults to false)
         * @return {Boolean}
         * @markdown
         */
        isEmpty: function(value, allowEmptyString) {
            return (value === null) || (value === undefined) || (!allowEmptyString ? value === '' : false) || (erajs.isArray(value) && value.length === 0);
        },

        /**
         * Returns true if the passed value is a JavaScript Array, false otherwise.
         *
         * @param {Object} target The target to test
         * @return {Boolean}
         * @method
         */
        isArray: ('isArray' in Array) ? Array.isArray : function(value) {
            return toString.call(value) === '[object Array]';
        },

        /**
         * Returns true if the passed value is a JavaScript Date object, false otherwise.
         * @param {Object} object The object to test
         * @return {Boolean}
         */
        isDate: function(value) {
            return toString.call(value) === '[object Date]';
        },

        /**
         * @private
         */
        isSimpleObject: function(value) {
            return value instanceof Object && value.constructor === Object;
        },

        /**
         * Returns true if the passed value is a JavaScript 'primitive', a string, number or boolean.
         * @param {Object} value The value to test
         * @return {Boolean}
         */
        isPrimitive: function(value) {
            var type = typeof value;

            return type === 'string' || type === 'number' || type === 'boolean';
        },

        /**
         * Returns true if the passed value is a JavaScript Function, false otherwise.
         * @param {Object} value The value to test
         * @return {Boolean}
         * @method
         */
        isFunction: function(value) {
            return !!(value && value.$eraIsFunction);
        },

        /**
         * Returns true if the passed value is a number. Returns false for non-finite numbers.
         * @param {Object} value The value to test
         * @return {Boolean}
         */
        isNumber: function(value) {
            return typeof value === 'number' && isFinite(value);
        },

        /**
         * Validates that a value is numeric.
         * @param {Object} value Examples: 1, '1', '2.34'
         * @return {Boolean} True if numeric, false otherwise
         */
        isNumeric: function(value) {
            return !isNaN(parseFloat(value)) && isFinite(value);
        },

        /**
         * Returns true if the passed value is a string.
         * @param {Object} value The value to test
         * @return {Boolean}
         */
        isString: function(value) {
            return typeof value === 'string';
        },

        /**
         * Returns true if the passed value is a boolean.
         *
         * @param {Object} value The value to test
         * @return {Boolean}
         */
        isBoolean: function(value) {
            return typeof value === 'boolean';
        },

        /**
         * Returns true if the passed value is defined.
         * @param {Object} value The value to test
         * @return {Boolean}
         */
        isDefined: function(value) {
            return typeof value !== 'undefined';
        },

        /**
         * Encodes a String to {} format.
         * @param {String} s the string to encode
         * @returns {string}
         */
        encodeToJsonStr: function(s){
            return '{' + s + '}';
        }
    });

    erajs.apply(erajs,{

        /**
         * Clone simple variables including array, {}-like objects, DOM nodes and Date without keeping the old reference.
         * A reference for the object itself is returned if it's not a direct decendant of Object. For model cloning.
         *
         * @param {Object} item The variable to clone
         * @return {Object} clone
         */
        clone: function(item) {
            var type,
                i,
                j,
                k,
                clone,
                key;

            if (item === null || item === undefined) {
                return item;
            }

            // DOM nodes
            // recursively
            if (item.nodeType && item.cloneNode) {
                return item.cloneNode(true);
            }

            type = toString.call(item);

            // Date
            if (type === '[object Date]') {
                return new Date(item.getTime());
            }


            // Array
            if (type === '[object Array]') {
                i = item.length;

                clone = [];

                while (i--) {
                    clone[i] = erajs.clone(item[i]);
                }
            }
            // Object
            else if (type === '[object Object]' && item.constructor === Object) {
                clone = {};

                for (key in item) {
                    clone[key] = erajs.clone(item[key]);
                }

                if (enumerables) {
                    for (j = enumerables.length; j--;) {
                        k = enumerables[j];
                        if (item.hasOwnProperty(k)) {
                            clone[k] = item[k];
                        }
                    }
                }
            }

            return clone || item;
        },

        functionFactory: function() {
            var me = this,
                args = Array.prototype.slice.call(arguments),
                ln;

            return Function.prototype.constructor.apply(Function.prototype, args);
        }
    });

}());

window.$$ = erajs;
/*
 * Copyright (c) 2014 www.erajsyt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 */
//  @tag foundation,core
//  @require ../version/Version.js
//  @define erajs.String

/**
 * @class erajs.String
 *
 * 处理字符串的实用静态方法的一个集合。
 * @singleton
 */

erajs.String = (function() {
    var trimRegex     = /^[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u2028\u2029\u202f\u205f\u3000]+|[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u2028\u2029\u202f\u205f\u3000]+$/g,
        escapeRe      = /('|\\)/g,
        formatRe      = /\{(\d+)\}/g,
        escapeRegexRe = /([-.*+?\^${}()|\[\]\/\\])/g,
        basicTrimRe   = /^\s+|\s+$/g,
        whitespaceRe  = /\s+/,
        varReplace    = /(^[^a-z]*|[^\w])/gi,
        charToEntity,
        entityToChar,
        charToEntityRegex,
        entityToCharRegex,
        htmlEncodeReplaceFn = function(match, capture) {
            return charToEntity[capture];
        },
        htmlDecodeReplaceFn = function(match, capture) {
            return (capture in entityToChar) ? entityToChar[capture] : String.fromCharCode(parseInt(capture.substr(2), 10));
        },
        boundsCheck = function(s, other){
            if (s === null || s === undefined || other === null || other === undefined) {
                return false;
            }
            
            return other.length <= s.length; 
        };

    return {
        
        /**
         * 插入一个子串到指定字符串的位置。
         * @param {String} s 原始的字符串。
         * @param {String} value 待插入的子串。
         * @param {Number} index 插入子字符串的索引位置. 负数将从末尾开始插入。
         *
         * 示例:
         *
         *     erajs.String.insert("abcdefg", "h", -1); // abcdefhg
         *
         * @return {String} 插入子字符串的值。
         */
        insert: function(s, value, index) {
            if (!s) {
                return value;
            }
            
            if (!value) {
                return s;
            }
            
            var len = s.length;
            
            if (!index && index !== 0) {
                index = len;
            }
            
            if (index < 0) {
                index *= -1;
                if (index >= len) {
                    // negative overflow, insert at start
                    index = 0;
                } else {
                    index = len - index;
                }
            }
            
            if (index === 0) {
                s = value + s;
            } else if (index >= s.length) {
                s += value;
            } else {
                s = s.substr(0, index) + value + s.substr(index);
            }
            return s;
        },
        
        /**
         * 判断一个字符串是否以某一子串开始。
         * @param {String} s 原始的字符串
         * @param {String} start 待检测的子串
         * @param {Boolean} [ignoreCase=false] 如果为true,比较时忽略大小写。
         */
        startsWith: function(s, start, ignoreCase){
            var result = boundsCheck(s, start);
            
            if (result) {
                if (ignoreCase) {
                    s = s.toLowerCase();
                    start = start.toLowerCase();
                }
                result = s.lastIndexOf(start, 0) === 0;
            }
            return result;
        },
        
        /**
         * 判断一个字符串以子字符串结束。
         * @param {String} s 原始的字符串
         * @param {String} end 待检测的子串
         * @param {Boolean} [ignoreCase=false] 如果为true,比较时忽略大小写。
         */
        endsWith: function(s, end, ignoreCase){
            var result = boundsCheck(s, end);
            
            if (result) {
                if (ignoreCase) {
                    s = s.toLowerCase();
                    end = end.toLowerCase();
                }
                result = s.indexOf(end, s.length - end.length) !== -1;
            }
            return result;
        },

        /**
         * 一个字符串的字符转换成一个合法的,可解析的Javascript var命名，
         * 所传递的字符串包含至少一个字母字符，非字母数字字符， 和 *首字母* 非字母字符将被删除。
         *
         * @param {String} s 一个字符串转换成一个var的命名。
         * @return {String} 一个合法的Javascript var命名。
         */
        createVarName: function(s) {
            return s.replace(varReplace, '');
        },

        /**
         * 转义 (&, <, >, ', 和 ") 为能在HTML中显示的字符。
         * @param {String} value 要编码的字符串。
         * @return {String} 编码后的文本。
         * @method
         */
        htmlEncode: function(value) {
            return (!value) ? value : String(value).replace(charToEntityRegex, htmlEncodeReplaceFn);
        },

        /**
         * 将 (&, <, >, ', 和 ") 字符从HTML显示的格式还原。
         * @param {String} value 要解码的字符串。
         * @return {String} 解码后的文本。
         * @method
         */
        htmlDecode: function(value) {
            return (!value) ? value : String(value).replace(entityToCharRegex, htmlDecodeReplaceFn);
        },

        /**
         * 将一组字符实体定义添加到 {@link erajs.String#htmlEncode}  和 {@link erajs.String#htmlDecode} 所使用的集合中。
         *
         * 此对象应由实体名称序列作为键， 值为该实体的文本形式表示。
         *
         *      erajs.String.addCharacterEntities({
         *          '&amp;Uuml;':'Ü',
         *          '&amp;ccedil;':'ç',
         *          '&amp;ntilde;':'ñ',
         *          '&amp;egrave;':'è'
         *      });
         *      var s = erajs.String.htmlEncode("A string with entities: èÜçñ");
         *
         * 注意: 在此对象上定义的字符实体的值预计将是单个字符的值。
         * 为此， 区分 javascript 源文件中定义的字符串文本形式时的字符编码字符所代表的实际值。
         * 引用为字符实体的服务器资源的脚本 tasgs 必须确保脚此节点的 'charset' 属性是符合实际的服务器资源的字符编码。
         *
         * 字符实体的集合可能被重置到默认状态， 通过{@link erajs.String#resetCharacterEntities}方法。
         *
         * @param {Object} entities 添加到当前定义的字符实体。
         *
         */
        addCharacterEntities: function(newEntities) {
            var charKeys = [],
                entityKeys = [],
                key, echar;
            for (key in newEntities) {
                echar = newEntities[key];
                entityToChar[key] = echar;
                charToEntity[echar] = key;
                charKeys.push(echar);
                entityKeys.push(key);
            }
            charToEntityRegex = new RegExp('(' + charKeys.join('|') + ')', 'g');
            entityToCharRegex = new RegExp('(' + entityKeys.join('|') + '|&#[0-9]{1,5};' + ')', 'g');
        },

        /**
         * 重置 {@link erajs.String#htmlEncode}  和 {@link erajs.String#htmlDecode}
         * 所使用的字符实体的定义， 恢复到默认状态。
         *
         */
        resetCharacterEntities: function() {
            charToEntity = {};
            entityToChar = {};
            // add the default set
            this.addCharacterEntities({
                '&amp;'     :   '&',
                '&gt;'      :   '>',
                '&lt;'      :   '<',
                '&quot;'    :   '"',
                '&#39;'     :   "'"
            });
        },

        /**
         * 将内容追加到URL的查询字符串, 根据处理逻辑来判断放置一个'?'或'&'符号。
         *
         * @param {String} url 要追加到的URL。
         * @param {String} string 要加到URL的内容。
         * @return {String} 所生成的URL。
         */
        urlAppend : function(url, string) {
            if (!erajs.isEmpty(string)) {
                return url + (url.indexOf('?') === -1 ? '?' : '&') + string;
            }

            return url;
        },

        /**
         * 裁剪字符串两旁的空白符，保留中间空白符，例如:
         *
         *     var s = '  foo bar  ';
         *     alert('-' + s + '-');                   //打印 "- foo bar -"
         *     alert('-' + erajs.String.trim(s) + '-');  //打印 "-foo bar-"
         *
         * @param {String} string 要裁剪的字符串。
         * @return {String} 已裁剪的字符串。
         */
        trim: function(string) {
            return string.replace(trimRegex, "");
        },

        /**
         * 返回一个字符串，该字符串中第一个字母为大写字母。
         * @param {String} string 要转换的字符串。
         * @return {String} 转换后的字符串。
         */
        capitalize: function(string) {
            return string.charAt(0).toUpperCase() + string.substr(1);
        },

        /**
         * 返回一个字符串，该字符串中第一个字母为小写字母
         * @param {String} string 要转换的字符串。
         * @return {String} 转换后的字符串。
         */
        uncapitalize: function(string) {
            return string.charAt(0).toLowerCase() + string.substr(1);
        },

        /**
         * 对大于指定长度的字符串，进行裁剪，增加省略号('...')的显示。
         *
         * @param {String} value 要裁剪的字符串。
         * @param {Number} length 要裁剪允许的最大长度。
         * @param {Boolean} [word=false] 如果为 true，则试图找到一个共同的词符。
         * @return {String} 转换后的文本。
         */
        ellipsis: function(value, len, word) {
            if (value && value.length > len) {
                if (word) {
                    var vs = value.substr(0, len - 2),
                    index = Math.max(vs.lastIndexOf(' '), vs.lastIndexOf('.'), vs.lastIndexOf('!'), vs.lastIndexOf('?'));
                    if (index !== -1 && index >= (len - 15)) {
                        return vs.substr(0, index) + "...";
                    }
                }
                return value.substr(0, len - 3) + "...";
            }
            return value;
        },

        /**
         * 避免所传递的字符串在正则表达式中使用。
         * @param {String} string
         * @return {String}
         */
        escapeRegex: function(string) {
            return string.replace(escapeRegexRe, "\\$1");
        },

        /**
         * 把输入的 ' 与 \ 字符转义。
         * @param {String} string 要转义的字符。
         * @return {String} 转义后的字符。
         */
        escape: function(string) {
            return string.replace(escapeRe, "\\$1");
        },

        /**
         * 比较并交换字符串的值。 参数中的第一个值与当前字符串对象比较，
         * 如果相等则返回传入的第一个参数，否则返回第二个参数。
         *
         * 注意：这个方法返回新值，但并不改变现有字符串。
         *
         *     // 可供选择的排序方向。
         *     sort = erajs.String.toggle(sort, 'ASC', 'DESC');
         *
         *     // 等价判断语句：
         *     sort = (sort === 'ASC' ? 'DESC' : 'ASC');
         *
         * @param {String} string 当前字符串。
         * @param {String} value 第一个参数，与当前字符串相等则返回。
         * @param {String} other 传入的第二个参数，不等返回。
         * @return {String} 新值。
         */
        toggle: function(string, value, other) {
            return string === value ? other : value;
        },

        /**
         * 在字符串左边填充指定字符。 这对于统一字符或日期标准格式非常有用。例如:
         *
         *     var s = erajs.String.leftPad('123', 5, '0');
         *     // s now contains the string: '00123'
         *
         * @param {String} string 原字符串
         * @param {Number} size 源加上填充字符串的总长度
         * @param {String} [character=' '] （可选的）填充字符串（默认是" "）
         * @return {String} 填充后的字符串。
         */
        leftPad: function(string, size, character) {
            var result = String(string);
            character = character || " ";
            while (result.length < size) {
                result = character + result;
            }
            return result;
        },

        /**
         * 定义带标记的字符串，并用传入的字符替换标记。
         * 每个标记必须是唯一的，而且必须要像{0},{1}...{n}这样地自增长。
         *
         * 例如：
         *
         *     var cls = 'my-class',
         *         text = 'Some text';
         *     var s = erajs.String.format('<div class="{0}">{1}</div>', cls, text);
         *     // s now contains the string: '<div class="my-class">Some text</div>'
         *
         * @param {String} string 带标记的字符串。
         * @param {Mixed...} values 值依次替换标记“{ 0 }”,“{ 1 }”等。
         * @return {String} 格式化后的字符串。
         */
        format: function(format) {
            var args = erajs.Array.toArray(arguments, 1);
            return format.replace(formatRe, function(m, i) {
                return args[i];
            });
        },

        /**
         * 根据给定的格式字符串与指定的重复次数返回一个新的格式字符串。
         * 该格式字符串由一个不同的字符串分隔。
         *
         *      var s = erajs.String.repeat('---', 4); // = '------------'
         *      var t = erajs.String.repeat('--', 3, '/'); // = '--/--/--'
         *
         * @param {String} pattern 要重复的格式字符串。
         * @param {Number} count 重复格式字符串的次数(可能是0)。
         * @param {String} sep 要分隔每个格式字符串的选项字符串。
         */
        repeat: function(pattern, count, sep) {
            if (count < 1) {
                count = 0;
            }
            for (var buf = [], i = count; i--; ) {
                buf.push(pattern);
            }
            return buf.join(sep || '');
        },

        /**
         * 根据需要裁剪，按照一个或多个空格进行分割一个字符串并将返回的词存到数组中，
         * 如果词已经是一个数组,它将被返回。
         *
         * @param {String/Array} words
         */
        splitWords: function (words) {
            if (words && typeof words == 'string') {
                return words.replace(basicTrimRe, '').split(whitespaceRe);
            }
            return words || [];
        }
    };
}());

// initialize the default encode / decode entities
erajs.String.resetCharacterEntities();

/**
 * Old alias to {@link erajs.String#htmlEncode}
 * @deprecated Use {@link erajs.String#htmlEncode} instead
 * @method
 * @member erajs
 * @inheritdoc erajs.String#htmlEncode
 */
erajs.htmlEncode = erajs.String.htmlEncode;


/**
 * Old alias to {@link erajs.String#htmlDecode}
 * @deprecated Use {@link erajs.String#htmlDecode} instead
 * @method
 * @member erajs
 * @inheritdoc erajs.String#htmlDecode
 */
erajs.htmlDecode = erajs.String.htmlDecode;

/**
 * Old alias to {@link erajs.String#urlAppend}
 * @deprecated Use {@link erajs.String#urlAppend} instead
 * @method
 * @member erajs
 * @inheritdoc erajs.String#urlAppend
 */
erajs.urlAppend = erajs.String.urlAppend;
/*
 * Copyright (c) 2014 www.erajsyt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 */
// @tag extras,core
// @require misc/JSON.js
// @define erajs
/**
 * @class erajs
 * @singleton
 */
erajs.apply(erajs,{
    userAgent: navigator.userAgent.toLowerCase(),
    cache: {},
    idSeed: 1000,
    windowId: 'erajs-window',
    documentId: 'erajs-document',

    /**
     * Generates unique ids. If the element already has an id, it is unchanged
     * @param {HTMLElement/Ext.Element} [el] The element to generate an id for
     * @param {String} prefix (optional) Id prefix (defaults "erajs-gen")
     * @return {String} The generated Id.
     */
    id: function(el, prefix) {
        var me = this,
        el = erajs.getDom(el, true) || {};
        if (el === document) {
            el.id = me.documentId;
        }
        else if (el === window) {
            el.id = me.windowId;
        }
        if (!el.id) {
            el.id = (prefix || "erajs-gen") + (++erajs.idSeed);
        }
        return el.id;
    },

    /**
     * @private
     * @member erajs
     */
    getElementById : function (id) {
        var el = document.getElementById(id);
        return el;
    },

    /**
     * Alias for {@link erajs.String#htmlEncode}.
     * @inheritdoc erajs.String#htmlEncode
     * @ignore
     */
    htmlEncode : function(value) {
        return erajs.String.htmlEncode(value);
    },

    /**
     * Alias for {@link erajs.String#htmlDecode}.
     * @inheritdoc erajs.String#htmlDecode
     * @ignore
     */
    htmlDecode : function(value) {
        return erajs.String.htmlDecode(value);
    },

    /**
     * Alias for {@link erajs.String#urlAppend}.
     * @inheritdoc erajs.String#urlAppend
     * @ignore
     */
    urlAppend : function(url, s) {
        return erajs.String.urlAppend(url, s);
    }
});

erajs.ns = erajs.namespace;
// for old browsers
window.undefined = window.undefined;

(function(){

    var check = function(regex){
        return regex.test(erajs.userAgent);
        },
        isStrict = document.compatMode == "CSS1Compat",
        version = function (is, regex) {
            var m;
            return (is && (m = regex.exec(erajs.userAgent))) ? parseFloat(m[1]) : 0;
        },
        docMode = document.documentMode,
        isOpera = check(/opera/),
        isOpera10_5 = isOpera && check(/version\/10\.5/),
        isChrome = check(/\bchrome\b/),
        isWebKit = check(/webkit/),
        isSafari = !isChrome && check(/safari/),
        isSafari2 = isSafari && check(/applewebkit\/4/), // unique to Safari 2
        isSafari3 = isSafari && check(/version\/3/),
        isSafari4 = isSafari && check(/version\/4/),
        isSafari5_0 = isSafari && check(/version\/5\.0/),
        isSafari5 = isSafari && check(/version\/5/),
        isIE = !isOpera && check(/msie/),
        isIE7 = isIE && ((check(/msie 7/) && docMode != 8 && docMode != 9 && docMode != 10) || docMode == 7),
        isIE8 = isIE && ((check(/msie 8/) && docMode != 7 && docMode != 9 && docMode != 10) || docMode == 8),
        isIE9 = isIE && ((check(/msie 9/) && docMode != 7 && docMode != 8 && docMode != 10) || docMode == 9),
        isIE10 = isIE && ((check(/msie 10/) && docMode != 7 && docMode != 8 && docMode != 9) || docMode == 10),
        isIE6 = isIE && check(/msie 6/),
        isGecko = !isWebKit && check(/gecko/),
        isGecko3 = isGecko && check(/rv:1\.9/),
        isGecko4 = isGecko && check(/rv:2\.0/),
        isGecko5 = isGecko && check(/rv:5\./),
        isGecko10 = isGecko && check(/rv:10\./),
        isFF3_0 = isGecko3 && check(/rv:1\.9\.0/),
        isFF3_5 = isGecko3 && check(/rv:1\.9\.1/),
        isFF3_6 = isGecko3 && check(/rv:1\.9\.2/),
        isWindows = check(/windows|win32/),
        isMac = check(/macintosh|mac os x/),
        isLinux = check(/linux/),
        scrollbarSize = null,
        chromeVersion = version(true, /\bchrome\/(\d+\.\d+)/),
        firefoxVersion = version(true, /\bfirefox\/(\d+\.\d+)/),
        ieVersion = version(isIE, /msie (\d+\.\d+)/),
        operaVersion = version(isOpera, /version\/(\d+\.\d+)/),
        safariVersion = version(isSafari, /version\/(\d+\.\d+)/),
        webKitVersion = version(isWebKit, /webkit\/(\d+\.\d+)/),
        isSecure = /^https/i.test(window.location.protocol),
        nullLog;

    // remove css image flicker
    try {
        document.execCommand("BackgroundImageCache", false, true);
    } catch(e) {}

    function log (message) {
        var options, dump,
            con = erajs.global.console,
            level = 'log',
            indent = log.indent || 0,
            stack,
            out,
            max;

        log.indent = indent;

        if (typeof message != 'string') {
            options = message;
            message = options.msg || '';
            level = options.level || level;
            dump = options.dump;
            stack = options.stack;

            if (options.indent) {
                ++log.indent;
            } else if (options.outdent) {
                log.indent = indent = Math.max(indent - 1, 0);
            }

            if (dump && !(con && con.dir)) {
                message += dumpObject(dump);
                dump = null;
            }
        }

        if (arguments.length > 1) {
            message += Array.prototype.slice.call(arguments, 1).join('');
        }

        message = indent ? erajs.String.repeat(' ', log.indentSize * indent) + message : message;
        // w/o console, all messages are equal, so munge the level into the message:
        if (level != 'log') {
            message = '[' + level.charAt(0).toUpperCase() + '] ' + message;
        }

        // Not obvious, but 'console' comes and goes when Firebug is turned on/off, so
        // an early test may fail either direction if Firebug is toggled.
        //
        if (con) { // if (Firebug-like console)
            if (con[level]) {
                con[level](message);
            } else {
                con.log(message);
            }

            if (dump) {
                con.dir(dump);
            }

            if (stack && con.trace) {
                // Firebug's console.error() includes a trace already...
                if (!con.firebug || level != 'error') {
                    con.trace();
                }
            }
        } else {
            if (erajs.isOpera) {
                opera.postError(message);
            } else {
                out = log.out;
                max = log.max;

                if (out.length >= max) {
                    // this formula allows out.max to change (via debugger), where the
                    // more obvious "max/4" would not quite be the same
                    erajs.Array.erase(out, 0, out.length - 3 * Math.floor(max / 4)); // keep newest 75%
                }

                out.push(message);
            }
        }

        // Mostly informational, but the erajs.Error notifier uses them:
        ++log.count;
        ++log.counters[level];
    }

    function logx (level, args) {
        if (typeof args[0] == 'string') {
            args.unshift({});
        }
        args[0].level = level;
        log.apply(this, args);
    }

    log.error = function () {
        logx('error', Array.prototype.slice.call(arguments));
    };
    log.info = function () {
        logx('info', Array.prototype.slice.call(arguments));
    };
    log.warn = function () {
        logx('warn', Array.prototype.slice.call(arguments));
    };

    log.count = 0;
    log.counters = { error: 0, warn: 0, info: 0, log: 0 };
    log.indentSize = 2;
    log.out = [];
    log.max = 750;
    log.show = function () {
        window.open('','erajslog').document.write([
            '<html><head><script type="text/javascript">',
            'var lastCount = 0;',
            'function update () {',
            'var erajs = window.opener.erajs,',
            'erajslog = erajs && erajs.log;',
            'if (erajslog && erajslog.out && lastCount != erajslog.count) {',
            'lastCount = erajslog.count;',
            'var s = "<tt>" + erajslog.out.join("~~~").replace(/[&]/g, "&amp;").replace(/[<]/g, "&lt;").replace(/[ ]/g, "&#160;").replace(/\\~\\~\\~/g, "<br/>") + "</tt>";',
            'document.body.innerHTML = s;',
            '}',
            'setTimeout(update, 1000);',
            '}',
            'setTimeout(update, 1000);',
            '</script></head><body></body></html>'].join(''));
    };

    erajs.apply(erajs,{
        /**
         * @property {String} SSL_SECURE_URL
         * URL to a blank file used by erajs when in secure mode for iframe src and onReady src
         * to prevent the IE insecure content warning (`'about:blank'`, except for IE
         * in secure mode, which is `'javascript:""'`).
         */
        SSL_SECURE_URL : isSecure && isIE ? 'javascript:\'\'' : 'about:blank',

        /**
         * Returns the dom node for the passed String (id), dom node.
         * Optional 'strict' flag is needed for IE since it can return 'name' and
         * 'id' elements by using getElementById.
         *
         * Here are some examples:
         *
         *     // gets dom node based on id
         *     var elDom = erajs.getDom('elId');
         *     // gets dom node based on the dom node
         *     var elDom1 = erajs.getDom(elDom);
         *
         * **Note:** the dom node to be found actually needs to exist (be rendered, etc)
         * when this method is called to be successful.
         *
         * @param {String/HTMLElement} el
         * @return HTMLElement
         */
        getDom : function(el, strict) {
            if (!el || !document) {
                return null;
            }
            if (el.dom) {
                return el.dom;
            } else {
                if (typeof el == 'string') {
                    var e = Ext.getElementById(el);
                    // IE returns elements with the 'name' and 'id' attribute.
                    // we do a strict check to return the element with only the id attribute
                    if (e && isIE && strict) {
                        if (el == e.getAttribute('id')) {
                            return e;
                        } else {
                            return null;
                        }
                    }
                    return e;
                } else {
                    return el;
                }
            }
        },

        isStrict: isStrict,

        // IE10 quirks behaves like Gecko/WebKit quirks, so don't include it here
        isIEQuirks: isIE && (!isStrict && (isIE6 || isIE7 || isIE8 || isIE9)),

        /**
         * True if the detected browser is Opera.
         * @type Boolean
         */
        isOpera : isOpera,

        /**
         * True if the detected browser is Opera 10.5x.
         * @type Boolean
         */
        isOpera10_5 : isOpera10_5,

        /**
         * True if the detected browser uses WebKit.
         * @type Boolean
         */
        isWebKit : isWebKit,

        /**
         * True if the detected browser is Chrome.
         * @type Boolean
         */
        isChrome : isChrome,

        /**
         * True if the detected browser is Safari.
         * @type Boolean
         */
        isSafari : isSafari,

        /**
         * True if the detected browser is Safari 3.x.
         * @type Boolean
         */
        isSafari3 : isSafari3,

        /**
         * True if the detected browser is Safari 4.x.
         * @type Boolean
         */
        isSafari4 : isSafari4,

        /**
         * True if the detected browser is Safari 5.x.
         * @type Boolean
         */
        isSafari5 : isSafari5,

        /**
         * True if the detected browser is Safari 5.0.x.
         * @type Boolean
         */
        isSafari5_0 : isSafari5_0,


        /**
         * True if the detected browser is Safari 2.x.
         * @type Boolean
         */
        isSafari2 : isSafari2,

        /**
         * True if the detected browser is Internet Explorer.
         * @type Boolean
         */
        isIE : isIE,

        /**
         * True if the detected browser is Internet Explorer 6.x.
         * @type Boolean
         */
        isIE6 : isIE6,

        /**
         * True if the detected browser is Internet Explorer 7.x.
         * @type Boolean
         */
        isIE7 : isIE7,

        /**
         * True if the detected browser is Internet Explorer 7.x or lower.
         * @type Boolean
         */
        isIE7m : isIE6 || isIE7,

        /**
         * True if the detected browser is Internet Explorer 7.x or higher.
         * @type Boolean
         */
        isIE7p : isIE && !isIE6,

        /**
         * True if the detected browser is Internet Explorer 8.x.
         * @type Boolean
         */
        isIE8 : isIE8,

        /**
         * True if the detected browser is Internet Explorer 8.x or lower.
         * @type Boolean
         */
        isIE8m : isIE6 || isIE7 || isIE8,

        /**
         * True if the detected browser is Internet Explorer 8.x or higher.
         * @type Boolean
         */
        isIE8p : isIE && !(isIE6 || isIE7),

        /**
         * True if the detected browser is Internet Explorer 9.x.
         * @type Boolean
         */
        isIE9 : isIE9,

        /**
         * True if the detected browser is Internet Explorer 9.x or lower.
         * @type Boolean
         */
        isIE9m : isIE6 || isIE7 || isIE8 || isIE9,

        /**
         * True if the detected browser is Internet Explorer 9.x or higher.
         * @type Boolean
         */
        isIE9p : isIE && !(isIE6 || isIE7 || isIE8),

        /**
         * True if the detected browser is Internet Explorer 10.x.
         * @type Boolean
         */
        isIE10 : isIE10,

        /**
         * True if the detected browser is Internet Explorer 10.x or lower.
         * @type Boolean
         */
        isIE10m : isIE6 || isIE7 || isIE8 || isIE9 || isIE10,

        /**
         * True if the detected browser is Internet Explorer 10.x or higher.
         * @type Boolean
         */
        isIE10p : isIE && !(isIE6 || isIE7 || isIE8 || isIE9),

        /**
         * True if the detected browser uses the Gecko layout engine (e.g. Mozilla, Firefox).
         * @type Boolean
         */
        isGecko : isGecko,

        /**
         * True if the detected browser uses a Gecko 1.9+ layout engine (e.g. Firefox 3.x).
         * @type Boolean
         */
        isGecko3 : isGecko3,

        /**
         * True if the detected browser uses a Gecko 2.0+ layout engine (e.g. Firefox 4.x).
         * @type Boolean
         */
        isGecko4 : isGecko4,

        /**
         * True if the detected browser uses a Gecko 5.0+ layout engine (e.g. Firefox 5.x).
         * @type Boolean
         */
        isGecko5 : isGecko5,

        /**
         * True if the detected browser uses a Gecko 5.0+ layout engine (e.g. Firefox 5.x).
         * @type Boolean
         */
        isGecko10 : isGecko10,

        /**
         * True if the detected browser uses FireFox 3.0
         * @type Boolean
         */
        isFF3_0 : isFF3_0,

        /**
         * True if the detected browser uses FireFox 3.5
         * @type Boolean
         */
        isFF3_5 : isFF3_5,

        /**
         * True if the detected browser uses FireFox 3.6
         * @type Boolean
         */
        isFF3_6 : isFF3_6,

        /**
         * True if the detected browser uses FireFox 4
         * @type Boolean
         */
        isFF4 : 4 <= firefoxVersion && firefoxVersion < 5,

        /**
         * True if the detected browser uses FireFox 5
         * @type Boolean
         */
        isFF5 : 5 <= firefoxVersion && firefoxVersion < 6,

        /**
         * True if the detected browser uses FireFox 10
         * @type Boolean
         */
        isFF10 : 10 <= firefoxVersion && firefoxVersion < 11,

        /**
         * True if the detected platform is Linux.
         * @type Boolean
         */
        isLinux : isLinux,

        /**
         * True if the detected platform is Windows.
         * @type Boolean
         */
        isWindows : isWindows,

        /**
         * True if the detected platform is Mac OS.
         * @type Boolean
         */
        isMac : isMac,

        /**
         * The current version of Chrome (0 if the browser is not Chrome).
         * @type Number
         */
        chromeVersion: chromeVersion,

        /**
         * The current version of Firefox (0 if the browser is not Firefox).
         * @type Number
         */
        firefoxVersion: firefoxVersion,

        /**
         * The current version of IE (0 if the browser is not IE). This does not account
         * for the documentMode of the current page, which is factored into {@link #isIE7},
         * {@link #isIE8} and {@link #isIE9}. Thus this is not always true:
         *
         *     erajs.isIE8 == (erajs.ieVersion == 8)
         *
         * @type Number
         */
        ieVersion: ieVersion,

        /**
         * The current version of Opera (0 if the browser is not Opera).
         * @type Number
         */
        operaVersion: operaVersion,

        /**
         * The current version of Safari (0 if the browser is not Safari).
         * @type Number
         */
        safariVersion: safariVersion,

        /**
         * The current version of WebKit (0 if the browser does not use WebKit).
         * @type Number
         */
        webKitVersion: webKitVersion,

        /**
         * True if the page is running over SSL
         * @type Boolean
         */
        isSecure: isSecure,

        /**
         * Utility method for returning a default value if the passed value is empty.
         *
         * The value is deemed to be empty if it is:
         *
         * - null
         * - undefined
         * - an empty array
         * - a zero length string (Unless the `allowBlank` parameter is `true`)
         *
         * @param {Object} value The value to test
         * @param {Object} defaultValue The value to return if the original value is empty
         * @param {Boolean} [allowBlank=false] true to allow zero length strings to qualify as non-empty.
         * @return {Object} value, if non-empty, else defaultValue
         * @deprecated 4.0.0 Use {@link erajs#valueFrom} instead
         */
        value : function(v, defaultValue, allowBlank){
            return erajs.isEmpty(v, allowBlank) ? defaultValue : v;
        },

        /**
         * Escapes the passed string for use in a regular expression.
         * @param {String} str
         * @return {String}
         * @deprecated 4.0.0 Use {@link erajs.String#escapeRegex} instead
         */
        escapeRe : function(s) {
            return s.replace(/([-.*+?\^${}()|\[\]\/\\])/g, "\\$1");
        },

        /**
         * Copies a set of named properties fom the source object to the destination object.
         *
         *
         * @param {Object} dest The destination object.
         * @param {Object} source The source object.
         * @param {String/String[]} names Either an Array of property names, or a comma-delimited list
         * of property names to copy.
         * @param {Boolean} [usePrototypeKeys] Defaults to false. Pass true to copy keys off of the
         * prototype as well as the instance.
         * @return {Object} The modified object.
         */
        copyTo : function(dest, source, names, usePrototypeKeys){
            if(typeof names == 'string'){
                names = names.split(/[,;\s]/);
            }

            var n,
                nLen = names? names.length : 0,
                name;

            for(n = 0; n < nLen; n++) {
                name = names[n];

                if(usePrototypeKeys || source.hasOwnProperty(name)){
                    dest[name] = source[name];
                }
            }

            return dest;
        },

        /**
         * Logs a message. If a console is present it will be used. On Opera, the method
         * "opera.postError" is called. In other cases, the message is logged to an array
         * "erajs.log.out". An attached debugger can watch this array and view the log. The
         * log buffer is limited to a maximum of "erajs.log.max" entries (defaults to 250).
         * The `erajs.log.out` array can also be written to a popup window by entering the
         * following in the URL bar (a "bookmarklet"):
         *
         *     javascript:void(erajs.log.show());
         *
         * If additional parameters are passed, they are joined and appended to the message.
         * A technique for tracing entry and exit of a function is this:
         *
         *     function foo () {
         *         erajs.log({ indent: 1 }, '>> foo');
         *
         *         // log statements in here or methods called from here will be indented
         *         // by one step
         *
         *         erajs.log({ outdent: 1 }, '<< foo');
         *     }
         *
         * This method does nothing in a release build.
         *
         * @param {String/Object} [options] The message to log or an options object with any
         * of the following properties:
         *
         *  - `msg`: The message to log (required).
         *  - `level`: One of: "error", "warn", "info" or "log" (the default is "log").
         *  - `dump`: An object to dump to the log as part of the message.
         *  - `stack`: True to include a stack trace in the log.
         *  - `indent`: Cause subsequent log statements to be indented one step.
         *  - `outdent`: Cause this and following statements to be one step less indented.
         *
         * @param {String...} [message] The message to log (required unless specified in
         * options object).
         *
         * @method
         */
        log :
        //<debug>
            log ||
            //</debug>
            nullLog,

        /**
         * Partitions the set into two sets: a true set and a false set.
         *
         * Example 1:
         *
         *     erajs.partition([true, false, true, true, false]);
         *     // returns [[true, true, true], [false, false]]

         * @param {Array/NodeList} arr The array to partition
         * @param {Function} truth (optional) a function to determine truth.
         * If this is omitted the element itself must be able to be evaluated for its truthfulness.
         * @return {Array} [array of truish values, array of falsy values]
         */
        partition : function(arr, truth){
            var ret = [[],[]],
                a, v,
                aLen = arr.length;

            for (a = 0; a < aLen; a++) {
                v = arr[a];
                ret[ (truth && truth(v, a, arr)) || (!truth && v) ? 0 : 1].push(v);
            }

            return ret;
        },

        /**
         * Invokes a method on each item in an Array.
         * @param {Array/NodeList} arr The Array of items to invoke the method on.
         * @param {String} methodName The method name to invoke.
         * @param {Object...} args Arguments to send into the method invocation.
         * @return {Array} The results of invoking the method on each item in the array.
         * @deprecated 4.0.0 Will be removed in the next major version
         */
        invoke : function(arr, methodName){
            var ret  = [],
                args = Array.prototype.slice.call(arguments, 2),
                a, v,
                aLen = arr.length;

            for (a = 0; a < aLen; a++) {
                v = arr[a];

                if (v && typeof v[methodName] == 'function') {
                    ret.push(v[methodName].apply(v, args));
                } else {
                    ret.push(undefined);
                }
            }

            return ret;
        },

        /**
         * Zips N sets together.
         *
         * Example 1:
         *
         *     erajs.zip([1,2,3],[4,5,6]); // [[1,4],[2,5],[3,6]]
         *
         * Example 2:
         *
         *     erajs.zip(
         *         [ "+", "-", "+"],
         *         [  12,  10,  22],
         *         [  43,  15,  96],
         *         function(a, b, c){
         *             return "$" + a + "" + b + "." + c
         *         }
         *     ); // ["$+12.43", "$-10.15", "$+22.96"]
         *
         * @param {Array/NodeList...} arr This argument may be repeated. Array(s)
         * to contribute values.
         * @param {Function} zipper (optional) The last item in the argument list.
         * This will drive how the items are zipped together.
         * @return {Array} The zipped set.
         * @deprecated 4.0.0 Will be removed in the next major version
         */
        zip : function(){
            var parts = erajs.partition(arguments, function( val ){ return typeof val != 'function'; }),
                arrs = parts[0],
                fn = parts[1][0],
                len = erajs.max(erajs.pluck(arrs, "length")),
                ret = [],
                i,
                j,
                aLen;

            for (i = 0; i < len; i++) {
                ret[i] = [];
                if(fn){
                    ret[i] = fn.apply(fn, erajs.pluck(arrs, i));
                }else{
                    for (j = 0, aLen = arrs.length; j < aLen; j++){
                        ret[i].push( arrs[j][i] );
                    }
                }
            }
            return ret;
        },

        /**
         * Turns an array into a sentence, joined by a specified connector - e.g.:
         *
         *     erajs.toSentence(['Adama', 'Tigh', 'Roslin']); //'Adama, Tigh and Roslin'
         *     erajs.toSentence(['Adama', 'Tigh', 'Roslin'], 'or'); //'Adama, Tigh or Roslin'
         *
         * @param {String[]} items The array to create a sentence from
         * @param {String} connector The string to use to connect the last two words.
         * Usually 'and' or 'or' - defaults to 'and'.
         * @return {String} The sentence string
         */
        toSentence: function(items, connector) {
            var length = items.length,
                head,
                tail;

            if (length <= 1) {
                return items[0];
            } else {
                head = items.slice(0, length - 1);
                tail = items[length - 1];

                return erajs.util.Format.format("{0} {1} {2}", head.join(", "), connector || 'and', tail);
            }
        }
    });

}());

/*
  Copyright (c) 2014 www.erajsyt.com. All rights reserved.
  Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
  To use it on other terms please contact us: chengqiuhua@erayt.com
 */

//  @require ../Ext-more.js
//  @define erajs.util.Format

/**
 * @class erajs.util.Format
 * 此类是一个用于格式化函数集中的类。 它包括要格式化的各种不同类型数据的函数，如文本、日期和数值。
 *  
 * ## 本地化
 *
 * 此类包含本地化的一些选项。
 * 当类库加载完后才可以将这些选项设置进去, 从这里对函数的所有调用将都使用指定的语言环境设置。
 *
 * 选项包括:
 *
 * - thousandSeparator
 * - decimalSeparator
 * - currenyPrecision
 * - currencySign
 * - currencyAtEnd
 *
 * 此类还在这里使用定义的默认日期格式: {@link erajs.Date#defaultFormat}.
 *  
 * @singleton
 */
(function() {

    var UtilFormat     = erajs.util.Format = {},
        stripTagsRE    = /<\/?[^>]+>/gi,
        stripScriptsRe = /(?:<script.*?>)((\n|\r|.)*?)(?:<\/script>)/ig,
        nl2brRe        = /\r?\n/g,
        allHashes      = /^#+$/,

        // Match a format string characters to be able to detect remaining "literal" characters
        formatPattern = /[\d,\.#]+/,

        // A RegExp to remove from a number format string, all characters except digits and '.'
        formatCleanRe  = /[^\d\.#]/g,

        // A RegExp to remove from a number format string, all characters except digits and the local decimal separator.
        // Created on first use. The local decimal separator character must be initialized for this to be created.
        I18NFormatCleanRe,

        // Cache ofg number formatting functions keyed by format string
        formatFns = {};

    erajs.apply(UtilFormat, {
        //<locale>
        /**
         * @property {String} thousandSeparator
         * {@link #number}函数使用作为千位分隔符的字符。
         *
         * 此属性可能被本地文件所覆盖。
         */
        thousandSeparator: ',',
        //</locale>

        //<locale>
        /**
         * @property {String} decimalSeparator
         * {@link #number}函数使用作为小数点的字符。
         *
         * 此属性可能被本地文件所覆盖。
         */
        decimalSeparator: '.',
        //</locale>

        //<locale>
        /**
         * @property {Number} currencyPrecision
         * {@link #currency}函数显示的小数位数。
         *
         * 此属性可能被本地文件所覆盖。
         */
        currencyPrecision: 2,
        //</locale>

         //<locale>
        /**
         * @property {String} currencySign
         * {@link #currency}货币函数显示的货币符号。
         *
         * 此属性可能被本地文件所覆盖。
         */
        currencySign: '$',
        //</locale>

        //<locale>
        /**
         * @property {Boolean} currencyAtEnd
         * 此属性可以设置成true以使{@link #currency}函数将货币符号追加到格式化的值。
         *
         * 此属性可能被本地文件所覆盖。
         */
        currencyAtEnd: false,
        //</locale>

        /**
         * 检查一个引用，如果它是undefined则将它转换成空字符串。
         * @param {Object} value 要检查的引用值
         * @return {Object} 如果转换过，则为空字符串，否则为原先的值。
         */
        undef : function(value) {
            return value !== undefined ? value : "";
        },

        /**
         * 检查一个引用，如果它为空则转换成一个默认值。
         * @param {Object} value 要检查的引用值
         * @param {String} [defaultValue=""] 如果为undefined时插入的值(默认为"")。
         * @return {String}
         */
        defaultValue : function(value, defaultValue) {
            return value !== undefined && value !== '' ? value : defaultValue;
        },

        /**
         * 返回原字符串中的一个子串。
         * @param {String} value 原始文本
         * @param {Number} start 子串的起始索引位置
         * @param {Number} length 子串的长度
         * @return {String} 指定长度的子字符串
         * @method
         */
        substr : 'ab'.substr(-1) != 'b'
        ? function (value, start, length) {
            var str = String(value);
            return (start < 0)
                ? str.substr(Math.max(str.length + start, 0), length)
                : str.substr(start, length);
        }
        : function(value, start, length) {
            return String(value).substr(start, length);
        },

        /**
         * 返回一个字符串，该字符串中的字母被转换为小写字母。
         * @param {String} value 要转换的字符串
         * @return {String} 转换后的字符串。
         */
        lowercase : function(value) {
            return String(value).toLowerCase();
        },

        /**
         * 返回一个字符串，该字符串中的字母被转换为大写字母。
         * @param {String} 要转换的字符串
         * @return {String} 转换后的字符串
         */
        uppercase : function(value) {
            return String(value).toUpperCase();
        },

        /**
         * 将一个数值格式化成美元形式。
         * @param {Number/String} value 需要进行格式化的数值
         * @return {String} 格式化后的美元字符串
         */
        usMoney : function(v) {
            return UtilFormat.currency(v, '$', 2);
        },

        /**
         * 将一个数值格式化成货币形式。
         * @param {Number/String} value 需要进行格式化的数值
         * @param {String} [sign] 使用的货币符号(缺省值为{@link #currencySign})
         * @param {Number} [decimals] 使用的货币值小数点后的位数(缺省值为{@link #currencyPrecision})
         * @param {Boolean} [end] 如果为true则货币符号应追加在字符串的结尾(缺省值为{@link #currencyAtEnd})
         * @return {String} 格式化后的货币字符串
         */
        currency: function(v, currencySign, decimals, end) {
            var negativeSign = '',
                format = ",0",
                i = 0;
            v = v - 0;
            if (v < 0) {
                v = -v;
                negativeSign = '-';
            }
            decimals = erajs.isDefined(decimals) ? decimals : UtilFormat.currencyPrecision;
            format += (decimals > 0 ? '.' : '');
            for (; i < decimals; i++) {
                format += '0';
            }
            v = UtilFormat.number(v, format);
            if ((end || UtilFormat.currencyAtEnd) === true) {
                return erajs.String.format("{0}{1}{2}", negativeSign, v, currencySign || UtilFormat.currencySign);
            } else {
                return erajs.String.format("{0}{1}{2}", negativeSign, currencySign || UtilFormat.currencySign, v);
            }
        },

        /**
         * 将某个值解析成为一个特定格式的日期。
         * @param {String/Date} value 需要格式化的值(字符串必须符合 javascript Date对象的parse()方法期望的格式)。
         * @param {String} [format] 任何有效的日期格式字符串。默认为{@link erajs.Date#defaultFormat}.
         * @return {String} 格式化后的日期字符串。
         */
        date: function(v, format) {
            if (!v) {
                return "";
            }
            if (!erajs.isDate(v)) {
                v = new Date(Date.parse(v));
            }
            return erajs.Date.dateFormat(v, format || erajs.Date.defaultFormat);
        },

        /**
         * 返回一个日期渲染函数，它可以高效地，多次反复应用到日期格式上。
         * @param {String} format 任何有效的日期格式字符串。默认为{@link erajs.Date#defaultFormat}.
         * @return {Function} 日期格式函数
         */
        dateRenderer : function(format) {
            return function(v) {
                return UtilFormat.date(v, format);
            };
        },

        /**
         * 去除所有HTML标签。
         * @param {Object} value 需要从其中去掉标签的文本
         * @return {String} 去除标签后的文本
         */
        stripTags : function(v) {
            return !v ? v : String(v).replace(stripTagsRE, "");
        },

        /**
         * 去掉所有script标签。
         * @param {Object} value 需要去除script标签的文本
         * @return {String} 去掉script标签后的文本
         */
        stripScripts : function(v) {
            return !v ? v : String(v).replace(stripScriptsRe, "");
        },

        /**
         * 对文件大小进行简单的格式化(xxx bytes, xxx KB, xxx MB)
         * @param {Number/String} size 需要格式化的数值
         * @return {String} 格式化后的文件大小
         */
        fileSize : (function(){
            var byteLimit = 1024,
                kbLimit = 1048576,
                mbLimit = 1073741824;
                
            return function(size) {
                var out;
                if (size < byteLimit) {
                    if (size === 1) {
                        out = '1 byte';    
                    } else {
                        out = size + ' bytes';
                    }
                } else if (size < kbLimit) {
                    out = (Math.round(((size*10) / byteLimit))/10) + ' KB';
                } else if (size < mbLimit) {
                    out = (Math.round(((size*10) / kbLimit))/10) + ' MB';
                } else {
                    out = (Math.round(((size*10) / mbLimit))/10) + ' GB';
                }
                return out;
            };
        })(),

        /**
         * 进行简单的匹配，以便用在一个模板中。
         * @return {Function} 在传递的值上进行操作的函数。
         * @method
         */
        math : (function(){
            var fns = {};

            return function(v, a){
                if (!fns[a]) {
                    fns[a] = erajs.functionFactory('v', 'return v ' + a + ';');
                }
                return fns[a](v);
            };
        }()),

        /**
         * 将所传递的数字四舍五入到所需的精度。
         * @param {Number/String} value 需要四舍五入的数值。
         * @param {Number} precision 用来四舍五入第一个参数值的小数位数值。
         * @return {Number} 四舍五入后的值。
         */
        round : function(value, precision) {
            var result = Number(value);
            if (typeof precision == 'number') {
                precision = Math.pow(10, precision);
                result = Math.round(value * precision) / precision;
            }
            return result;
        },

        /**
         * 根据传入的格式字符串将传递的数字格式化。
         *
         * 小数分隔符数字的数量 ，精确了小数位 在字条串的位置。在结果中使用*区域特定设置*的小数位字符。
         *
         * *出现*在格式字符串中的千位分隔字符将被插入到 *区域特定设置*(如果存在)的千位分隔符列表中。
         *
         * 默认情况下，","预期作为千位分隔符，和"."预期作为小数点分隔符。
         *
         * 当插入千位和小数分隔符进行格式化输出时总是 使用区域设置的特定字符。
         *
         * 根据美国/英国的惯例，格式化字符串必须指定分隔字符 ("," 作为 千位分隔符, 和 "." 作为小数点分隔符)。
         *
         * 允许字符串的格式规范根据当地惯例的分隔字符,将字符串 /i添加到格式字符串的末尾。
         *
         * 例如 (123456.789):
         * 
         * - `0` - (123456) 只显示整数，没有小数
         * - `0.00` - (123456.78) 精确到两位小数
         * - `0.0000` - (123456.7890) 精确到四位小数
         * - `0,000` - (123,456) 显示逗号和整数，没有小数
         * - `0,000.00` - (123,456.78) 显示逗号和两位小数
         * - `0,0.00` - (123,456.78) 快捷方法，显示逗号和两位小数
         * - `0.####` - (123,456,789) 在一些国际化的场合需要反转分组（,）和小数位（.），那么就在后面加上/i. 例如: 0.000,00/i
         *
         * @param {Number} v 需要格式化的数字。
         * @param {String} format 你需要格式化文本的方式。
         * @return {String} 格式化后的数字。
         */
        number : function(v, formatString) {
            if (!formatString) {
                return v;
            }
            var formatFn = formatFns[formatString];

            // Generate formatting function to be cached and reused keyed by the format string.
            // This results in a 100% performance increase over analyzing the format string each invocation.
            if (!formatFn) {

                var originalFormatString = formatString,
                    comma = UtilFormat.thousandSeparator,
                    decimalSeparator = UtilFormat.decimalSeparator,
                    hasComma,
                    splitFormat,
                    extraChars,
                    precision = 0,
                    multiplier,
                    trimTrailingZeroes,
                    code;

                // The "/i" suffix allows caller to use a locale-specific formatting string.
                // Clean the format string by removing all but numerals and the decimal separator.
                // Then split the format string into pre and post decimal segments according to *what* the
                // decimal separator is. If they are specifying "/i", they are using the local convention in the format string.
                if (formatString.substr(formatString.length - 2) == '/i') {
                    if (!I18NFormatCleanRe) {
                        I18NFormatCleanRe = new RegExp('[^\\d\\' + UtilFormat.decimalSeparator + ']','g');
                    }
                    formatString = formatString.substr(0, formatString.length - 2);
                    hasComma = formatString.indexOf(comma) != -1;
                    splitFormat = formatString.replace(I18NFormatCleanRe, '').split(decimalSeparator);
                } else {
                    hasComma = formatString.indexOf(',') != -1;
                    splitFormat = formatString.replace(formatCleanRe, '').split('.');
                }
                extraChars = formatString.replace(formatPattern, '');

                if (splitFormat.length > 2) {
                    //<debug>
                    erajs.Error.raise({
                        sourceClass: "erajs.util.Format",
                        sourceMethod: "number",
                        value: v,
                        formatString: formatString,
                        msg: "Invalid number format, should have no more than 1 decimal"
                    });
                    //</debug>
                } else if (splitFormat.length === 2) {
                    precision = splitFormat[1].length;

                    // Formatting ending in .##### means maximum 5 trailing significant digits
                    trimTrailingZeroes = allHashes.test(splitFormat[1]);
                }
                
                // The function we create is called immediately and returns a closure which has access to vars and some fixed values; RegExes and the format string.
                code = [
                    'var utilFormat=erajs.util.Format,extNumber=erajs.Number,neg,fnum,parts' +
                        (hasComma ? ',thousandSeparator,thousands=[],j,n,i' : '') +
                        (extraChars  ? ',formatString="' + formatString + '",formatPattern=/[\\d,\\.#]+/' : '') +
                        (trimTrailingZeroes ? ',trailingZeroes=/\\.?0+$/;' : ';') +
                    'return function(v){' +
                    'if(typeof v!=="number"&&isNaN(v=extNumber.from(v,NaN)))return"";' +
                    'neg=v<0;',
                    'fnum=erajs.Number.toFixed(Math.abs(v), ' + precision + ');'
                ];

                if (hasComma) {
                    // If we have to insert commas...
                    
                    // split the string up into whole and decimal parts if there are decimals
                    if (precision) {
                        code[code.length] = 'parts=fnum.split(".");';
                        code[code.length] = 'fnum=parts[0];';
                    }
                    code[code.length] =
                        'if(v>=1000) {';
                            code[code.length] = 'thousandSeparator=utilFormat.thousandSeparator;' +
                            'thousands.length=0;' +
                            'j=fnum.length;' +
                            'n=fnum.length%3||3;' +
                            'for(i=0;i<j;i+=n){' +
                                'if(i!==0){' +
                                    'n=3;' +
                                '}' +
                                'thousands[thousands.length]=fnum.substr(i,n);' +
                            '}' +
                            'fnum=thousands.join(thousandSeparator);' + 
                        '}';
                    if (precision) {
                        code[code.length] = 'fnum += utilFormat.decimalSeparator+parts[1];';
                    }
                    
                } else if (precision) {
                    // If they are using a weird decimal separator, split and concat using it
                    code[code.length] = 'if(utilFormat.decimalSeparator!=="."){' +
                        'parts=fnum.split(".");' +
                        'fnum=parts[0]+utilFormat.decimalSeparator+parts[1];' +
                    '}';
                }

                if (trimTrailingZeroes) {
                    code[code.length] = 'fnum=fnum.replace(trailingZeroes,"");';
                }

                /*
                 * Edge case. If we have a very small negative number it will get rounded to 0,
                 * however the initial check at the top will still report as negative. Replace
                 * everything but 1-9 and check if the string is empty to determine a 0 value.
                 */
                code[code.length] = 'if(neg&&fnum!=="' + (precision ? '0.' + erajs.String.repeat('0', precision) : '0') + '")fnum="-"+fnum;';

                code[code.length] = 'return ';

                // If there were extra characters around the formatting string, replace the format string part with the formatted number.
                if (extraChars) {
                    code[code.length] = 'formatString.replace(formatPattern, fnum);';
                } else {
                    code[code.length] = 'fnum;';
                }
                code[code.length] = '};';

                formatFn = formatFns[originalFormatString] = erajs.functionFactory('Ext', code.join(''))(Ext);
            }
            return formatFn(v);
        },

        /**
         * 返回一个数值渲染函数，它可以高效地，多次反复应用到数值格式上。
         *
         * @param {String} format 对{@link #number}任何有效的数值格式字符串。
         *
         * @return {Function} 数值格式化函数
         */
        numberRenderer : function(format) {
            return function(v) {
                return UtilFormat.number(v, format);
            };
        },

        /**
         * Formats an object of name value properties as HTML element attribute values suitable for using when creating textual markup.
         * @param {Object} attributes An object containing the HTML attributes as properties eg: `{height:40, vAlign:'top'}`
         */
        attributes: function(attributes) {
            if (typeof attributes === 'object') {
                var result = [],
                    name;

                for (name in attributes) {
                    result.push(name, '="', name === 'style' ? erajs.DomHelper.generateStyles(attributes[name]) : erajs.htmlEncode(attributes[name]), '"');
                }
                attributes = result.join('');
            }
            return attributes||'';
        },

        /**
         * 根据一个数值，可对单词选用一个复数形式。
         * 例如，在模板中:
         * {commentCount:plural("Comment")} 如果commentCount为1 ，
         * 那么结果就是"1 Comment"， 如果值为0或者大于1就是"x Comments"。
         *
         * @param {Number} value 需要用来对比的值
         * @param {String} singular 单词的单数格式
         * @param {String} [plural] (可选) 单词的复数形式(默认为单数格式加一个"s")
         */
        plural : function(v, s, p) {
            return v +' ' + (v == 1 ? s : (p ? p : s+'s'));
        },

        /**
         * 将换行字符串格式化成HTML标签 `<br/>`
         *
         * @param {String} v 需要格式化的字符串值。
         * @return {String} 包含内嵌 `<br/>`标签的字符串，用来替代换行。
         */
        nl2br : function(v) {
            return erajs.isEmpty(v) ? '' : v.replace(nl2brRe, '<br/>');
        },

        /**
         * {@link erajs.String#capitalize} 方法别名.
         * @method
         * @inheritdoc erajs.String#capitalize
         */
        capitalize: erajs.String.capitalize,

        /**
         * {@link erajs.String#ellipsis} 方法别名.
         * @method
         * @inheritdoc erajs.String#ellipsis
         */
        ellipsis: erajs.String.ellipsis,

        /**
         * {@link erajs.String#format} 方法别名.
         * @method
         * @inheritdoc erajs.String#format
         */
        format: erajs.String.format,

        /**
         * {@link erajs.String#htmlDecode} 方法别名.
         * @method
         * @inheritdoc erajs.String#htmlDecode
         */
        htmlDecode: erajs.String.htmlDecode,

        /**
         * {@link erajs.String#htmlEncode} 方法别名.
         * @method
         * @inheritdoc erajs.String#htmlEncode
         */
        htmlEncode: erajs.String.htmlEncode,

        /**
         * {@link erajs.String#leftPad} 方法别名.
         * @method
         * @inheritdoc erajs.String#leftPad
         */
        leftPad: erajs.String.leftPad,

        /**
         * {@link erajs.String#trim} 方法别名.
         * @method
         * @inheritdoc erajs.String#trim
         */
        trim : erajs.String.trim,

        /**
         * 解析一个数字或字符串，表示成一个对象的边距大小。
         * 支持CSS-style声明中设置的外边距属性
         * (例如 10, "10", "10 10", "10 10 10" 和 "10 10 10 10"
         * 均是有效的选项，并将返回相同的结果)
         *
         * @param {Number/String} v 已编码的边距
         * @return {Object} 一个具有上，右，下，左边距宽度的对象。
         */
        parseBox : function(box) {
            box = box || 0;

            if (typeof box === 'number') {
                return {
                    top   : box,
                    right : box,
                    bottom: box,
                    left  : box
                };
             }

            var parts  = box.split(' '),
                ln = parts.length;

            if (ln == 1) {
                parts[1] = parts[2] = parts[3] = parts[0];
            }
            else if (ln == 2) {
                parts[2] = parts[0];
                parts[3] = parts[1];
            }
            else if (ln == 3) {
                parts[3] = parts[1];
            }

            return {
                top   :parseInt(parts[0], 10) || 0,
                right :parseInt(parts[1], 10) || 0,
                bottom:parseInt(parts[2], 10) || 0,
                left  :parseInt(parts[3], 10) || 0
            };
        },

        /**
         * 避免所传递的字符串用在一个正则表达式中。
         * @param {String} str
         * @return {String}
         */
        escapeRegex : function(s) {
            return s.replace(/([\-.*+?\^${}()|\[\]\/\\])/g, "\\$1");
        }
    });
}());

/*
 * Copyright (c) 2014 www.erajsyt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 *
 **/
// @tag foundation,core
// @require ../class/Loader.js
// @define erajs.Error

/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 *
 * A wrapper class for the native JavaScript Error object that adds a few useful capabilities for handling
 * errors in an erajs application. When you use erajs.Error to {@link #raise} an error from within any class that
 * the Error class can automatically add the source class and method from which
 * the error was raised. It also includes logic to automatically log the error to the console, if available,
 * with additional metadata about the error. In all cases, the error will always be thrown at the end so that
 * execution will halt.
 *
 * erajs.Error also offers a global error {@link #handle handling} method that can be overridden in order to
 * handle application-wide errors in a single spot. You can optionally {@link #ignore} errors altogether,
 * although in a real application it's usually a better idea to override the handling function and perform
 * logging or some other method of reporting the errors in a way that is meaningful to the application.
 *
 * At its simplest you can simply raise an error as a simple string from within any code:
 *
 * Example usage:
 *
 *     erajs.Error.raise('Something bad happened!');
 *
 * If raised from plain JavaScript code, the error will be logged to the console (if available) and the message
 * displayed. In most cases however you'll be raising errors from within a class, and it may often be useful to add
 * additional metadata about the error being raised.  The {@link #raise} method can also take a config object.
 * In this form the `msg` attribute becomes the error description, and any other data added to the config gets
 * added to the error object and, if the console is available, logged to the console for inspection.
 *
 *
 * If a console is available (that supports the `console.dir` function) you'll see console output like:
 *
 *     An error was raised with the following data:
 *     option:         Object { foo: "bar"}
 *         foo:        "bar"
 *     error code:     100
 *     msg:            "You cannot do that!"
 *     sourceClass:   "erajs.Foo"
 *     sourceMethod:  "doSomething"
 *
 *     uncaught exception: You cannot do that!
 *
 * As you can see, the error will report exactly where it was raised and will include as much information as the
 * raising code can usefully provide.
 *
 * If you want to handle all application errors globally you can simply override the static {@link #handle} method
 * and provide whatever handling logic you need. If the method returns true then the error is considered handled
 * and will not be thrown to the browser. If anything but true is returned then the error will be thrown normally.
 *
 * Example usage:
 *
 *     erajs.Error.handle = function(err) {
 *         if (err.someProperty == 'NotReallyAnError') {
 *             // maybe log something to the application here if applicable
 *             return true;
 *         }
 *         // any non-true return value (including none) will cause the error to be thrown
 *     }
 *
 */
erajs.Error = erajs.extend(Error, {
    statics: {
        /**
         * @property {Boolean} ignore
         * Static flag that can be used to globally disable error reporting to the browser if set to true
         * (defaults to false). Note that if you ignore Ext errors it's likely that some other code may fail
         * and throw a native JavaScript error thereafter, so use with caution. In most cases it will probably
         * be preferajsble to supply a custom error {@link #handle handling} function instead.
         *
         * Example usage:
         *
         *     erajs.Error.ignore = true;
         *
         * @static
         */
        ignore: false,

        /**
         * @property {Boolean} notify
         * Static flag that can be used to globally control error notification to the user. Unlike
         * erajs.Error.ignore, this does not effect exceptions. They are still thrown. This value can be
         * set to false to disable the alert notification (default is true for IE6 and IE7).
         *
         * Only the first error will generajste an alert. Internally this flag is set to false when the
         * first error occurs prior to displaying the alert.
         *
         * This flag is not used in a release build.
         *
         * Example usage:
         *
         *     erajs.Error.notify = false;
         *
         * @static
         */
        //notify: erajs.isIE6 || erajs.isIE7,

        /**
         * Raise an error that can include additional data and supports automatic console logging if available.
         * You can pass a string error message or an object with the `msg` attribute which will be used as the
         * error message. The object can contain any other name-value attributes (or objects) to be logged
         * along with the error.
         *
         * Note that after displaying the error message a JavaScript error will ultimately be thrown so that
         * execution will halt.
         *
         * Example usage:
         *
         *     erajs.Error.raise('A simple string error message');
         *
         * @param {String/Object} err The error message string, or an object containing the attribute "msg" that will be
         * used as the error message. Any other data included in the object will also be logged to the browser console,
         * if available.
         * @static
         */
        raise: function(err){
            err = err || {};
            if (erajs.isString(err)) {
                err = { msg: err };
            }

            var method = this.raise.caller,
                msg;

            if (method) {
                if (method.$name) {
                    err.sourceMethod = method.$name;
                }
                if (method.$owner) {
                    err.sourceClass = method.$owner.$className;
                }
            }

            if (erajs.Error.handle(err) !== true) {
                msg = erajs.Error.prototype.toString.call(err);

                erajs.log({
                    msg: msg,
                    level: 'error',
                    dump: err,
                    stack: true
                });

                throw new erajs.Error(err);
            }
        },

        /**
         * Globally handle any Ext errors that may be raised, optionally providing custom logic to
         * handle different errors individually. Return true from the function to bypass throwing the
         * error to the browser, otherwise the error will be thrown and execution will halt.
         *
         * Example usage:
         *
         *     erajs.Error.handle = function(err) {
         *         if (err.someProperty == 'NotReallyAnError') {
         *             // maybe log something to the application here if applicable
         *             return true;
         *         }
         *         // any non-true return value (including none) will cause the error to be thrown
         *     }
         *
         * @param {erajs.Error} err The erajs.Error object being raised. It will contain any attributes that were originally
         * raised with it, plus properties about the method and class from which the error originated (if raised from a
         * class that uses the Ext 4 class system).
         * @static
         */
        handle: function(){
            return erajs.Error.ignore;
        }
    },

    // This is the standard property that is the name of the constructor.
    name: 'erajs.Error',

    /**
     * Creates new Error object.
     * @param {String/Object} config The error message string, or an object containing the
     * attribute "msg" that will be used as the error message. Any other data included in
     * the object will be applied to the error instance and logged to the browser console, if available.
     */
    constructor: function(config){
        if (erajs.isString(config)) {
            config = { msg: config };
        }

        var me = this;

        erajs.apply(me, config);

        me.message = me.message || me.msg; // 'message' is standard ('msg' is non-standard)
        // note: the above does not work in old WebKit (me.message is readonly) (Safari 4)
    },

    /**
     * Provides a custom string representation of the error object. This is an override of the base JavaScript
     * `Object.toString` method, which is useful so that when logged to the browser console, an error object will
     * be displayed with a useful message instead of `[object Object]`, the default `toString` result.
     *
     * The default implementation will include the error message along with the raising class and method, if available,
     * but this can be overridden with a custom implementation either at the prototype level (for all errors) or on
     * a particular error instance, if you want to provide a custom description that will show up in the console.
     * @return {String} The error message. If raised from within the Ext 4 class system, the error message will also
     * include the raising class and method names, if available.
     */
    toString: function(){
        var me = this,
            className = me.sourceClass ? me.sourceClass : '',
            methodName = me.sourceMethod ? '.' + me.sourceMethod + '(): ' : '',
            msg = me.msg || '(No description provided)';

        return className + methodName + msg;
    }
});

/*
 * Create a function that will throw an error if called (in debug mode) with a message that
 * indicates the method has been removed.
 * @param {String} suggestion Optional text to include in the message (a workaround perhaps).
 * @return {Function} The generajsted function.
 * @private
 */
erajs.deprecated = function (suggestion) {
    //<debug>
    if (!suggestion) {
        suggestion = '';
    }

    function fail () {
        erajs.Error.raise('The method "' + fail.$owner.$className + '.' + fail.$name + 
                '" has been removed. ' + suggestion);
    }

    return fail;
    //</debug>
    return erajs.emptyFn;
};

/*
 * This mechanism is used to notify the user of the first error encountered on the page. This
 * was previously internal to erajs.Error.raise and is a desirable feature since errors often
 * slip silently under the radar. It cannot live in erajs.Error.raise since there are times
 * where exceptions are handled in a try/catch.
 */
//<debug>
(function () {
    var timer, errors = 0,
        win = erajs.global,
        msg;

    if (typeof window === 'undefined') {
        return; // build system or some such environment...
    }

    // This method is called to notify the user of the current error status.
    function notify () {
        var counters = erajs.log.counters,
            supports = erajs.supports,
            hasOnError = supports && supports.WindowOnError; // TODO - timing

        // Put log counters to the status bar (for most browsers):
        if (counters && (counters.error + counters.warn + counters.info + counters.log)) {
            msg = [ 'Logged Errors:',counters.error, 'Warnings:',counters.warn,
                        'Info:',counters.info, 'Log:',counters.log].join(' ');
            if (errors) {
                msg = '*** Errors: ' + errors + ' - ' + msg;
            } else if (counters.error) {
                msg = '*** ' + msg;
            }
            win.status = msg;
        }

        // Display an alert on the first error:
        if (!erajs.isDefined(erajs.Error.notify)) {
            erajs.Error.notify = erajs.isIE6 || erajs.isIE7; // TODO - timing
        }
        if (erajs.Error.notify && (hasOnError ? errors : (counters && counters.error))) {
            erajs.Error.notify = false;

            if (timer) {
                win.clearInterval(timer); // ticks can queue up so stop...
                timer = null;
            }

            alert('Unhandled error on page: See console or log');
            poll();
        }
    }

    // Sets up polling loop. This is the only way to know about errors in some browsers
    // (Operajs/Safari) and is the only way to update the status bar for warnings and other
    // non-errors.
    function poll () {
        timer = win.setInterval(notify, 1000);
    }

    // window.onerror sounds ideal but it prevents the built-in error dialog from doing
    // its (better) thing.
    poll();
}());
//</debug>

/*
 * Copyright (c) 2014 www.erajsyt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
*/

//  @tag extras,core
//  @require ../lang/Error.js
//  @define erajs.JSON

/**
 * [Douglas Crockford's JSON.js][dc] 的修改版本，该版本没有“入侵”Object对象的prototype。
 *
 * [dc]: http://www.json.org/js.html
 *
 * @singleton
 */
erajs.JSON = (new(function() {
    var me = this,
    encodingFunction,
    decodingFunction,
    useNative = null,
    useHasOwn = !! {}.hasOwnProperty,
    isNative = function() {
        if (useNative === null) {
            useNative = erajs.USE_NATIVE_JSON && window.JSON && JSON.toString() == '[object JSON]';
        }
        return useNative;
    },
    pad = function(n) {
        return n < 10 ? "0" + n : n;
    },
    doDecode = function(json) {
        return eval("(" + json + ')');
    },
    doEncode = function(o, newline) {
        // http://jsperf.com/is-undefined
        if (o === null || o === undefined) {
            return "null";
        } else if (erajs.isDate(o)) {
            return erajs.JSON.encodeDate(o);
        } else if (erajs.isString(o)) {
            return erajs.JSON.encodeString(o);
        } else if (typeof o == "number") {
            //don't use isNumber here, since finite checks happen inside isNumber
            return isFinite(o) ? String(o) : "null";
        } else if (erajs.isBoolean(o)) {
            return String(o);
        }
        // Allow custom zerialization by adding a toJSON method to any object type.
        // Date/String have a toJSON in some environments, so check these first.
        else if (o.toJSON) {
            return o.toJSON();
        } else if (erajs.isArray(o)) {
            return encodeArray(o, newline);
        } else if (erajs.isObject(o)) {
            return encodeObject(o, newline);
        } else if (typeof o === "function") {
            return "null";
        }
        return 'undefined';
    },
    m = {
        "\b": '\\b',
        "\t": '\\t',
        "\n": '\\n',
        "\f": '\\f',
        "\r": '\\r',
        '"': '\\"',
        "\\": '\\\\',
        '\x0b': '\\u000b' //ie doesn't handle \v
    },
    charToReplace = /[\\\"\x00-\x1f\x7f-\uffff]/g,
    encodeString = function(s) {
        return '"' + s.replace(charToReplace, function(a) {
            var c = m[a];
            return typeof c === 'string' ? c : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"';
    },

    //<debug>
    encodeArrayPretty = function(o, newline) {
        var len = o.length,
            cnewline = newline + '   ',
            sep = ',' + cnewline,
            a = ["[", cnewline], // Note newline in case there are no members
            i;

        for (i = 0; i < len; i += 1) {
            a.push(erajs.JSON.encodeValue(o[i], cnewline), sep);
        }

        // Overwrite trailing comma (or empty string)
        a[a.length - 1] = newline + ']';

        return a.join('');
    },

    encodeObjectPretty = function(o, newline) {
        var cnewline = newline + '   ',
            sep = ',' + cnewline,
            a = ["{", cnewline], // Note newline in case there are no members
            i, val;

        for (i in o) {
            val = o[i];
            if (!useHasOwn || o.hasOwnProperty(i)) {
                // To match JSON.stringify, we shouldn't encode functions or undefined
                if (typeof val === 'function' || val === undefined) {
                    continue;
                }
                a.push(erajs.JSON.encodeValue(i) + ': ' + erajs.JSON.encodeValue(val, cnewline), sep);
            }
        }

        // Overwrite trailing comma (or empty string)
        a[a.length - 1] = newline + '}';

        return a.join('');
    },
    //</debug>

    encodeArray = function(o, newline) {
        //<debug>
        if (newline) {
            return encodeArrayPretty(o, newline);
        }
        //</debug>

        var a = ["[", ""], // Note empty string in case there are no serializable members.
            len = o.length,
            i;
        for (i = 0; i < len; i += 1) {
            a.push(erajs.JSON.encodeValue(o[i]), ',');
        }
        // Overwrite trailing comma (or empty string)
        a[a.length - 1] = ']';
        return a.join("");
    },

    encodeObject = function(o, newline) {
        //<debug>
        if (newline) {
            return encodeObjectPretty(o, newline);
        }
        //</debug>

        var a = ["{", ""], // Note empty string in case there are no serializable members.
            i, val;
        for (i in o) {
            val = o[i];
            if (!useHasOwn || o.hasOwnProperty(i)) {
                // To match JSON.stringify, we shouldn't encode functions or undefined
                if (typeof val === 'function' || val === undefined) {
                    continue;
                }
                a.push(erajs.JSON.encodeValue(i), ":", erajs.JSON.encodeValue(val), ',');
                
            }
        }
        // Overwrite trailing comma (or empty string)
        a[a.length - 1] = '}';
        return a.join("");
    };
    
    /**
     * Encodes a String. This returns the actual string which is inserted into the JSON string as the literal
     * expression. **The returned value includes enclosing double quotation marks.**
     *
     * To override this:
     *
     *     erajs.JSON.encodeString = function(s) {
     *         return 'Foo' + s;
     *     };
     *
     * @param {String} s The String to encode
     * @return {String} The string literal to use in a JSON string.
     * @method
     */
    me.encodeString = encodeString;

    /**
     * 当 {@link erajs#USE_NATIVE_JSON}为false时，
     * {@link #encode}用来编码所有的javascript值成他们的 JSON 表示形式的函数。
     *
     * 这是公开的，这样它可以被替换为一个自定义实现。
     * 
     * @param {Object} o 任何 javascript 值转换为它的 JSON 表示形式.
     * @return {String} T传递的值的 JSON 表示形式.
     * @method
     */
    me.encodeValue = doEncode;

    /**
     * 编码一个日期。将返回的实际字符串，插入到 JSON 字符串作为文本表达式。
     * **返回值包括封闭双引号**。
     *
     * 返回的默认格式是 "yyyy-mm-ddThh:mm:ss"。
     *
     * 要覆盖它:
     *
     *     erajs.JSON.encodeDate = function(d) {
     *         return erajs.Date.format(d, '"Y-m-d"');
     *     };
     *
     * @param {Date} d 要进行编码的日期.
     * @return {String} 以 JSON 字符串形式表示的字符串文字。
     */
    me.encodeDate = function(o) {
        return '"' + o.getFullYear() + "-"
        + pad(o.getMonth() + 1) + "-"
        + pad(o.getDate()) + "T"
        + pad(o.getHours()) + ":"
        + pad(o.getMinutes()) + ":"
        + pad(o.getSeconds()) + '"';
    };

    /**
     * 编码对象、 数组或其他值。
     *
     * 如果环境中的原生JSON编码没有被使用 ({@link erajs#USE_NATIVE_JSON} 没有设置，或环境不支持)，
     * 那么将使用ExtJS的编码。
     * 这里允许开发人员在需要序列化的类中添加 toJSON 方法， 返回有效的 JSON 表示形式的对象。
     * 
     * @param {Object} o 要进行编码的变量
     * @return {String} JSON 字符串。
     */
    me.encode = function(o) {
        if (!encodingFunction) {
            // setup encoding function on first access
            encodingFunction = isNative() ? JSON.stringify : me.encodeValue;
        }
        return encodingFunction(o);
    };

    /**
     * 解码（解析）JSON字符串对象。如果JSON是无效的，
     * 这个函数抛出一个SyntaxError，除非设置了安全选项
     *
     * @param {String} json JSON字符串.
     * @param {Boolean} [safe=false]  如果JSON是无效的，是否返回null或抛出一个异常。
     * @return {Object} 由此生成的对象.
     */
    me.decode = function(json, safe) {
        if (!decodingFunction) {
            // setup decoding function on first access
            decodingFunction = isNative() ? JSON.parse : doDecode;
        }
        try {
            return decodingFunction(json);
        } catch (e) {
            if (safe === true) {
                return null;
            }
            erajs.Error.raise({
                sourceClass: "erajs.JSON",
                sourceMethod: "decode",
                msg: "You're trying to decode an invalid JSON String: " + json
            });
        }
    };
})());
/**
 * Shorthand for {@link erajs.JSON#encode}
 * @member erajs
 * @method encode
 * @inheritdoc erajs.JSON#encode
 */
erajs.encode = erajs.JSON.encode;
/**
 * Shorthand for {@link erajs.JSON#decode}
 * @member erajs
 * @method decode
 * @inheritdoc erajs.JSON#decode
 */
erajs.decode = erajs.JSON.decode;
/*
 * Copyright (c) 2014 www.erajsyt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 */
//  @tag foundation,core
//  @require String.js
//  @define erajs.util.HashMap
/**
 * @class erajs.util.HashMap
 *
 * 代表键值对的集合。HashMap中的每个键 必须唯一，同一个键不能出现两次。
 * 只能通过 键访问HashMap中的项。使用范例：
 *
 *     var map = new erajs.util.HashMap();
 *     map.add('key1', 1);
 *     map.add('key2', 2);
 *     map.add('key3', 3);
 *
 *     map.each(function(key, value, length){
 *         console.log(key, value, length);
 *     });
 *
 * HashMap是无序的， 无法保证遍历其中的项时，这些项是某种 特定的顺序。
 *
 */
(function(){

    erajs.util.HashMap = function(config){
        config = config || {};
        var me = this,
            keyFn = config.keyFn;

        me.initialConfig = config;

        me.clear(true);

        if (keyFn) {
            me.getKey = keyFn;
        }

    };

  erajs.util.HashMap.prototype = {
        /**
         * @private Mutation counter which is incremented upon add and remove.
         */
        generajstion: 0,
        map : {},
        length : 0,

        /**
         * 获取哈希表中项的条数。
         * @return {Number} 哈希表中项的条数。
         */
        getCount: function() {
            return this.length;
        },

        /**
         * Implementation for being able to extract the key from an object if only
         * a single argument is passed.
         * @private
         * @param {String} key The key
         * @param {Object} value The value
         * @return {Array} [key, value]
         */
        getData: function(key, value) {
            // if we have no value, it means we need to get the key from the object
            if (value === undefined) {
                value = key;
                key = this.getKey(value);
            }

            return [key, value];
        },

        /**
         * 从对象中提取键。它是一个默认的实现，它可以被覆盖。
         * @param {Object} o 待提取键的对象
         * @return {String} 对象的键
         */
        getKey: function(o) {
            return o.id;
        },

        /**
         * 向哈希表中添加项。
         *
         * @param {String/Object} 项的键
         *
         * 如果为这个HashMap指定了{@link #getKey}实现，
         * 或者保存的项的键保存在id属性中， HashMap将能*取得*新项的键。
         * 这样只需要在参数中传新的项。
         *
         * @param {Object} [o] 待添加的项
         *
         * @return {Object} 添加的项
         */
        add: function(key, value) {
            var me = this;

            // Need to check arguments length here, since we could have called:
            // map.add('foo', undefined);
            if (arguments.length === 1) {
                value = key;
                key = me.getKey(value);
            }

            if (me.containsKey(key)) {
                return me.replace(key, value);
            }

            me.map[key] = value;
            ++me.length;
            me.generajstion++;
            return value;
        },

        /**
         * 替换哈希表中的一个项。如果键不存在， 将使用{@link #method-add}。
         * @param {String} key 项的键
         * @param {Object} value 项的新值
         * @return {Object} 项的新值
         */
        replace: function(key, value) {
            var me = this,
                map = me.map,
                old;

            // Need to check arguments length here, since we could have called:
            // map.replace('foo', undefined);
            if (arguments.length === 1) {
                value = key;
                key = me.getKey(value);
            }

            if (!me.containsKey(key)) {
                me.add(key, value);
            }
            old = map[key];
            map[key] = value;
            me.generajstion++;
            return value;
        },

        /**
         * 移除哈希表中的一个项。
         * @param {Object} o 待移除项的值
         * @return {Boolean} 成功移除时返回true。
         */
        remove: function(o) {
            var key = this.findKey(o);
            if (key !== undefined) {
                return this.removeAtKey(key);
            }
            return false;
        },

        /**
         *移除哈希表中的一个项。
         * @param {String} key 待移除的键
         * @return {Boolean} 成功移除时返回true。
         */
        removeAtKey: function(key) {
            var me = this,
                value;

            if (me.containsKey(key)) {
                value = me.map[key];
                delete me.map[key];
                --me.length;
                me.generajstion++;
                return true;
            }
            return false;
        },

        /**
         * 使用特定的键检索项。
         * @param {String} key 检索的键
         * @return {Object} 键对应的值，如果不存在，返回undefined。
         */
        get: function(key) {
            var map = this.map;
            return map.hasOwnProperty(key) ? map[key] : undefined;
        },

        /**
         * 移除哈希表中的所有项。
         * @return {erajs.util.HashMap} this
         */
        clear: function(/* private */ initial) {
            var me = this;

            // Only clear if it has ever had any content
            if (initial || me.generajstion) {
                me.map = {};
                me.length = 0;
                me.generajstion = initial ? 0 : me.generajstion + 1;
            }
            return me;
        },

        /**
         * 检查哈希表中是否存在某个键。
         * @param {String} key The key to check for.
         * @return {Boolean} True if they key exists in the hash.
         */
        containsKey: function(key) {
            var map = this.map;
            return map.hasOwnProperty(key) && map[key] !== undefined;
        },

        /**
         * 检查哈希表中是否存在某个值。
         * @param {Object} value 待检查的值
         * @return {Boolean} 如果值存在返回true。
         */
        contains: function(value) {
            return this.containsKey(this.findKey(value));
        },

        /**
         * 返回哈希表中的所有的键。
         * @return {Array} 键数组
         */
        getKeys: function() {
            return this.getArray(true);
        },

        /**
         * 返回哈希表中的所有的值。
         * @return {Array} 值数组
         */
        getValues: function() {
            return this.getArray(false);
        },

        /**
         * Gets either the keys/values in an array from the hash.
         * @private
         * @param {Boolean} isKey True to extract the keys, otherwise, the value
         * @return {Array} An array of either keys/values from the hash.
         */
        getArray: function(isKey) {
            var arr = [],
                key,
                map = this.map;
            for (key in map) {
                if (map.hasOwnProperty(key)) {
                    arr.push(isKey ? key: map[key]);
                }
            }
            return arr;
        },

        /**
         * 对哈希表中的每个项执行一次指定的函数。
         *  函数返回false将停止迭代。
         *
         * @param {Function} fn 待执行的函数。
         * @param {String} fn.key The key of the item.
         * @param {Number} fn.value The value of the item.
         * @param {Number} fn.length The total number of items in the hash.
         * @param {Object} [scope] 函数执行的作用域。默认为<tt>this</tt>.
         * @return {erajs.util.HashMap} this
         */
        each: function(fn, scope) {
            // copy items so they may be removed during iterajstion.
            var items = erajs.apply({}, this.map),
                key,
                length = this.length;

            scope = scope || this;
            for (key in items) {
                if (items.hasOwnProperty(key)) {
                    if (fn.call(scope, key, items[key], length) === false) {
                        break;
                    }
                }
            }
            return this;
        },

        /**
         * 浅拷贝哈希表。
         * @return {erajs.util.HashMap} 新的哈希对象
         */
        clone: function() {
            var hash = new this.self(this.initialConfig),
                map = this.map,
                key;

            hash.suspendEvents();
            for (key in map) {
                if (map.hasOwnProperty(key)) {
                    hash.add(key, map[key]);
                }
            }
            hash.resumeEvents();
            return hash;
        },

        /**
         * @private
         * Find the key for a value.
         * @param {Object} value The value to find.
         * @return {Object} The value of the item. Returns <tt>undefined</tt> if not found.
         */
        findKey: function(value) {
            var key,
                map = this.map;

            for (key in map) {
                if (map.hasOwnProperty(key) && map[key] === value) {
                    return key;
                }
            }
            return undefined;
        }
    };
})();

/*
 * Copyright (c) 2014 www.erajsyt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 **/

//  @tag foundation,core
//  @require String.js
//  @define erajs.Number
/**
 * @class erajs.Number
 * 一组处理数字的实用静态方法集合。
 * @singleton
 */

erajs.Number = new function() {

    var me = this,
        isToFixedBroken = (0.9).toFixed() !== '1',
        math = Math;

    erajs.apply(this, {
        /**
         * 检查给定的数值是否在约束的范围内。 如果在范围内就返回此数值。
         * 否则，如果大于最大值则返回最大值，如果小于最小值则返回最小值。
         * 注意本方法不改变给定的数值本身。
         *
         * @param {Number} number 要检查的数值
         * @param {Number} min 范围的最小值
         * @param {Number} max 范围的最大值
         * @return {Number} 如果范围以外，则返回约束的值,否则返回当前值。
         */
        constrain: function(number, min, max) {
            var x = parseFloat(number);

            // Watch out for NaN in Chrome 18
            // V8bug: http://code.google.com/p/v8/issues/detail?id=2056

            // Operajstors are faster than Math.min/max. See http://jsperf.com/number-constrain
            // ... and (x < Nan) || (x < undefined) == false
            // ... same for (x > NaN) || (x > undefined)
            // so if min or max are undefined or NaN, we never return them... sadly, this
            // is not true of null (but even Math.max(-1,null)==0 and isNaN(null)==false)
            return (x < min) ? min : ((x > max) ? max : x);
        },

        /**
         * Snaps the passed number between stopping points based upon a passed increment value.
         *
         * The difference between this and {@link #snapInRange} is that {@link #snapInRange} uses the minValue
         * when calculating snap points:
         *
         *     r = erajs.Number.snap(56, 2, 55, 65);        // Returns 56 - snap points are zero based
         *
         *     r = erajs.Number.snapInRange(56, 2, 55, 65); // Returns 57 - snap points are based from minValue
         *
         * @param {Number} value The unsnapped value.
         * @param {Number} increment The increment by which the value must move.
         * @param {Number} minValue The minimum value to which the returned value must be constrained. Overrides the increment.
         * @param {Number} maxValue The maximum value to which the returned value must be constrained. Overrides the increment.
         * @return {Number} The value of the nearest snap target.
         */
        snap : function(value, increment, minValue, maxValue) {
            var m;

            // If no value passed, or minValue was passed and value is less than minValue (anything < undefined is false)
            // Then use the minValue (or zero if the value was undefined)
            if (value === undefined || value < minValue) {
                return minValue || 0;
            }

            if (increment) {
                m = value % increment;
                if (m !== 0) {
                    value -= m;
                    if (m * 2 >= increment) {
                        value += increment;
                    } else if (m * 2 < -increment) {
                        value -= increment;
                    }
                }
            }
            return me.constrain(value, minValue,  maxValue);
        },

        /**
         * Snaps the passed number between stopping points based upon a passed increment value.
         *
         * The difference between this and {@link #snap} is that {@link #snap} does not use the minValue
         * when calculating snap points:
         *
         *     r = erajs.Number.snap(56, 2, 55, 65);        // Returns 56 - snap points are zero based
         *
         *     r = erajs.Number.snapInRange(56, 2, 55, 65); // Returns 57 - snap points are based from minValue
         *
         * @param {Number} value The unsnapped value.
         * @param {Number} increment The increment by which the value must move.
         * @param {Number} [minValue=0] The minimum value to which the returned value must be constrained.
         * @param {Number} [maxValue=Infinity] The maximum value to which the returned value must be constrained.
         * @return {Number} The value of the nearest snap target.
         */
        snapInRange : function(value, increment, minValue, maxValue) {
            var tween;

            // default minValue to zero
            minValue = (minValue || 0);

            // If value is undefined, or less than minValue, use minValue
            if (value === undefined || value < minValue) {
                return minValue;
            }

            // Calculate how many snap points from the minValue the passed value is.
            if (increment && (tween = ((value - minValue) % increment))) {
                value -= tween;
                tween *= 2;
                if (tween >= increment) {
                    value += increment;
                }
            }

            // If constraining within a maximum, ensure the maximum is on a snap point
            if (maxValue !== undefined) {
                if (value > (maxValue = me.snapInRange(maxValue, increment, minValue))) {
                    value = maxValue;
                }
            }

            return value;
        },

        /**
         * Formats a number using fixed-point notation
         * @param {Number} value The number to format
         * @param {Number} precision The number of digits to show after the decimal point
         */
        toFixed: isToFixedBroken ? function(value, precision) {
            precision = precision || 0;
            var pow = math.pow(10, precision);
            return (math.round(value * pow) / pow).toFixed(precision);
        } : function(value, precision) {
            return value.toFixed(precision);
        },

        /**
         * Validate that a value is numeric and convert it to a number if necessary. Returns the specified default value if
         * it is not.

    erajs.Number.from('1.23', 1); // returns 1.23
    erajs.Number.from('abc', 1); // returns 1

         * @param {Object} value
         * @param {Number} defaultValue The value to return if the original value is non-numeric
         * @return {Number} value, if numeric, defaultValue otherwise
         */
        from: function(value, defaultValue) {
            if (isFinite(value)) {
                value = parseFloat(value);
            }

            return !isNaN(value) ? value : defaultValue;
        },

        /**
         * Returns a random integer between the specified range (inclusive)
         * @param {Number} from Lowest value to return.
         * @param {Number} to Highst value to return.
         * @return {Number} A random integer within the specified range.
         */
        randomInt: function (from, to) {
           return math.floor(math.random() * (to - from + 1) + from);
        },
        
        /**
         * Corrects floating point numbers that overflow to a non-precise
         * value because of their floating nature, for example `0.1 + 0.2`
         * @param {Number} The number
         * @return {Number} The correctly rounded number
         */
        correctFloat: function(n) {
            // This is to correct the type of errors where 2 floats end with
            // a long string of decimals, eg 0.1 + 0.2. When they overflow in this
            // manner, they usually go to 15-16 decimals, so we cut it off at 14.
            return parseFloat(n.toPrecision(14));
        }
    });

    /**
     * @member erajs
     * @method num
     * @inheritdoc erajs.Number#from
     */
    erajs.num = function() {
        return me.from.apply(this, arguments);
    };
};
/*
 * Copyright (c) 2014 www.erajsyt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 *
 **/

// @tag foundation,core
// @require Number.js
// @define erajs.Array

/**
 * @class erajs.Array
 * @singleton
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 *
 * 一组处理数组的实用静态方法集合; 提供某些老版本浏览器缺少的方法.
 */
(function() {

    var arrayPrototype = Array.prototype,
        slice = arrayPrototype.slice,
        supportsSplice = (function () {
            var array = [],
                lengthBefore,
                j = 20;

            if (!array.splice) {
                return false;
            }

            // This detects a bug in IE8 splice method:
            // see http://social.msdn.microsoft.com/Forums/en-US/iewebdevelopment/thread/6e946d03-e09f-4b22-a4dd-cd5e276bf05a/

            while (j--) {
                array.push("A");
            }

            array.splice(15, 0, "F", "F", "F", "F", "F","F","F","F","F","F","F","F","F","F","F","F","F","F","F","F","F");

            lengthBefore = array.length; //41
            array.splice(13, 0, "XXX"); // add one element

            if (lengthBefore+1 != array.length) {
                return false;
            }
            // end IE8 bug

            return true;
        }()),
        supportsForEach = 'forEach' in arrayPrototype,
        supportsMap = 'map' in arrayPrototype,
        supportsIndexOf = 'indexOf' in arrayPrototype,
        supportsEvery = 'every' in arrayPrototype,
        supportsSome = 'some' in arrayPrototype,
        supportsFilter = 'filter' in arrayPrototype,
        supportsSort = (function() {
            var a = [1,2,3,4,5].sort(function(){ return 0; });
            return a[0] === 1 && a[1] === 2 && a[2] === 3 && a[3] === 4 && a[4] === 5;
        }()),
        supportsSliceOnNodeList = true,
        ExtArray,
        erase,
        replace,
        splice;

    try {
        // IE 6 - 8 will throw an error when using Array.prototype.slice on NodeList
        if (typeof document !== 'undefined') {
            slice.call(document.getElementsByTagName('body'));
        }
    } catch (e) {
        supportsSliceOnNodeList = false;
    }

    function fixArrayIndex (array, index) {
        return (index < 0) ? Math.max(0, array.length + index)
                           : Math.min(array.length, index);
    }

    /*
    Does the same work as splice, but with a slightly more convenient signature. The splice
    method has bugs in IE8, so this is the implementation we use on that platform.

    The rippling of items in the array can be tricky. Consider two use cases:

                  index=2
                  removeCount=2
                 /=====\
        +---+---+---+---+---+---+---+---+
        | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |
        +---+---+---+---+---+---+---+---+
                         /  \/  \/  \/  \
                        /   /\  /\  /\   \
                       /   /  \/  \/  \   +--------------------------+
                      /   /   /\  /\   +--------------------------+   \
                     /   /   /  \/  +--------------------------+   \   \
                    /   /   /   /+--------------------------+   \   \   \
                   /   /   /   /                             \   \   \   \
                  v   v   v   v                               v   v   v   v
        +---+---+---+---+---+---+       +---+---+---+---+---+---+---+---+---+
        | 0 | 1 | 4 | 5 | 6 | 7 |       | 0 | 1 | a | b | c | 4 | 5 | 6 | 7 |
        +---+---+---+---+---+---+       +---+---+---+---+---+---+---+---+---+
        A                               B        \=========/
                                                 insert=[a,b,c]

    In case A, it is obvious that copying of [4,5,6,7] must be left-to-right so
    that we don't end up with [0,1,6,7,6,7]. In case B, we have the opposite; we
    must go right-to-left or else we would end up with [0,1,a,b,c,4,4,4,4].
    */
    function replaceSim (array, index, removeCount, insert) {
        var add = insert ? insert.length : 0,
            length = array.length,
            pos = fixArrayIndex(array, index),
            remove,
            tailOldPos,
            tailNewPos,
            tailCount,
            lengthAfterRemove,
            i;

        // we try to use Array.push when we can for efficiency...
        if (pos === length) {
            if (add) {
                array.push.apply(array, insert);
            }
        } else {
            remove = Math.min(removeCount, length - pos);
            tailOldPos = pos + remove;
            tailNewPos = tailOldPos + add - remove;
            tailCount = length - tailOldPos;
            lengthAfterRemove = length - remove;

            if (tailNewPos < tailOldPos) { // case A
                for (i = 0; i < tailCount; ++i) {
                    array[tailNewPos+i] = array[tailOldPos+i];
                }
            } else if (tailNewPos > tailOldPos) { // case B
                for (i = tailCount; i--; ) {
                    array[tailNewPos+i] = array[tailOldPos+i];
                }
            } // else, add == remove (nothing to do)

            if (add && pos === lengthAfterRemove) {
                array.length = lengthAfterRemove; // truncate array
                array.push.apply(array, insert);
            } else {
                array.length = lengthAfterRemove + add; // reserves space
                for (i = 0; i < add; ++i) {
                    array[pos+i] = insert[i];
                }
            }
        }

        return array;
    }

    function replaceNative (array, index, removeCount, insert) {
        if (insert && insert.length) {
            // Inserting at index zero with no removing: use unshift
            if (index === 0 && !removeCount) {
                array.unshift.apply(array, insert);
            }
            // Inserting/replacing in middle of array
            else if (index < array.length) {
                array.splice.apply(array, [index, removeCount].concat(insert));
            }
            // Appending to array
            else {
                array.push.apply(array, insert);
            }
        } else {
            array.splice(index, removeCount);
        }
        return array;
    }

    function eraseSim (array, index, removeCount) {
        return replaceSim(array, index, removeCount);
    }

    function eraseNative (array, index, removeCount) {
        array.splice(index, removeCount);
        return array;
    }

    function spliceSim (array, index, removeCount) {
        var pos = fixArrayIndex(array, index),
            removed = array.slice(index, fixArrayIndex(array, pos+removeCount));

        if (arguments.length < 4) {
            replaceSim(array, pos, removeCount);
        } else {
            replaceSim(array, pos, removeCount, slice.call(arguments, 3));
        }

        return removed;
    }

    function spliceNative (array) {
        return array.splice.apply(array, slice.call(arguments, 1));
    }

    erase = supportsSplice ? eraseNative : eraseSim;
    replace = supportsSplice ? replaceNative : replaceSim;
    splice = supportsSplice ? spliceNative : spliceSim;

    // NOTE: from here on, use erase, replace or splice (not native methods)...

    ExtArray = erajs.Array = {
        /**
         * 迭代一个数组或是可迭代的值，在每个元素上调用给定的回调函数。
         *
         *     var countries = ['Vietnam', 'Singapore', 'United States', 'Russia'];
         *
         *     erajs.Array.each(countries, function(name, index, countriesItSelf) {
         *         console.log(name);
         *     });
         *
         *     var sum = function() {
         *         var sum = 0;
         *
         *         erajs.Array.each(arguments, function(value) {
         *             sum += value;
         *         });
         *
         *         return sum;
         *     };
         *
         *     sum(1, 2, 3); // returns 6
         *
         * 在回调函数中返回false，即可停止迭代过程。
         *
         *     erajs.Array.each(countries, function(name, index, countriesItSelf) {
         *         if (name === 'Singapore') {
         *             return false; // break here
         *         }
         *     });
         *
         * {@link erajs#each erajs.each} 是 {@link erajs.Array#each erajs.Array.each}的别名。
         *
         * @param {Array/NodeList/Object} 将要迭代的值。
         * 如果这个参数不可迭代，回调函数将只调用一次。
         * @param {Function} fn 回调函数. 如果返回false, 迭代将停止， 方法返回当前的索引.
         * @param {Object} fn.item 数组当前的索引中的元素
         * @param {Number} fn.index 数组当前的索引
         * @param {Array} fn.allItems 作为方法第一个参数的数组本身
         * @param {Boolean} fn.return 返回false来停止迭代。
         * @param {Object} scope (Optional) 指定函数执行的(this 引用)作用域。
         * @param {Boolean} [reverse=false] 反转迭代的顺序（从尾到头循环）。
         * @return {Boolean} 参见 fn 参数的描述.
         */
        each: function(array, fn, scope, reverse) {
            array = ExtArray.from(array);

            var i,
                ln = array.length;

            if (reverse !== true) {
                for (i = 0; i < ln; i++) {
                    if (fn.call(scope || array[i], array[i], i, array) === false) {
                        return i;
                    }
                }
            }
            else {
                for (i = ln - 1; i > -1; i--) {
                    if (fn.call(scope || array[i], array[i], i, array) === false) {
                        return i;
                    }
                }
            }

            return true;
        },

        /**
         * 迭代一个数组，在每个元素上调用给定的回调函数。
         * 注意如果原生的Array.prototype.forEach被支持， 这个函数将委托到Array.prototype.forEach。
         * 它不支持像{@link erajs.Array#each}一样， 通过返回一个false来停止迭代。
         * 因此，其性能在现代的浏览器中会比{@link erajs.Array#each}更好。
         *
         * @param {Array} array 要迭代的数组
         * @param {Function} fn 回调函数
         * @param {Object} fn.item 数组当前的索引中的元素
         * @param {Number} fn.index 数组当前的索引
         * @param {Array}  fn.allItems 作为方法第一个参数的数组本身
         * @param {Object} scope (Optional) 指定函数执行的(this 引用)作用域。
         */
        forEach: supportsForEach ? function(array, fn, scope) {
            array.forEach(fn, scope);
        } : function(array, fn, scope) {
            var i = 0,
                ln = array.length;

            for (; i < ln; i++) {
                fn.call(scope, array[i], i, array);
            }
        },

        /**
         * 查找指定元素在数组中的索引位置， 补充IE中缺少的arrayPrototype.indexOf原生方法。
         *
         * @param {Array} array 要检查的数组
         * @param {Object} item 要查找的元素
         * @param {Number} from (Optional) 搜索的起始位置
         * @return {Number} 元素在数组中的索引位置（找不到时为-1）
         */
        indexOf: supportsIndexOf ? function(array, item, from) {
            return arrayPrototype.indexOf.call(array, item, from);
         } : function(array, item, from) {
            var i, length = array.length;

            for (i = (from < 0) ? Math.max(0, length + from) : from || 0; i < length; i++) {
                if (array[i] === item) {
                    return i;
                }
            }

            return -1;
        },

        /**
         * 检查数组中是否包含给定元素。
         *
         * @param {Array} array 要检查的数组
         * @param {Object} item 要查找的元素
         * @return {Boolean} 数组包含元素则为true，否则为false。
         */
        contains: supportsIndexOf ? function(array, item) {
            return arrayPrototype.indexOf.call(array, item) !== -1;
        } : function(array, item) {
            var i, ln;

            for (i = 0, ln = array.length; i < ln; i++) {
                if (array[i] === item) {
                    return true;
                }
            }

            return false;
        },

        /**
         * 将一个可迭代元素(具有数字下标和length属性)转换为一个真正的数组。
         *
         *     function test() {
         *         var args = erajs.Array.toArray(arguments),
         *             fromSecondToLastArgs = erajs.Array.toArray(arguments, 1);
         *
         *         alert(args.join(' '));
         *         alert(fromSecondToLastArgs.join(' '));
         *     }
         *
         *     test('just', 'testing', 'here'); // 提示  'just testing here';
         *                                      // 提示  'testing here';
         *
         *     erajs.Array.toArray(document.getElementsByTagName('div')); // 将把 NodeList 转换成一个数组
         *     erajs.Array.toArray('splitted'); // returns ['s', 'p', 'l', 'i', 't', 't', 'e', 'd']
         *     erajs.Array.toArray('splitted', 0, 3); // returns ['s', 'p', 'l']
         *
         * {@link erajs#toArray erajs.toArray}是 {@link erajs.Array#toArray erajs.Array.toArray}的别名。
         *
         * @param {Object} iterajsble 可迭代的对象。
         * @param {Number} start (Optional) 从0开始的索引，表示要转换的起始位置. 默认为 0。
         * @param {Number} end (Optional) 从1开始的索引，表示要转换的结束位置。 默认为要迭代元素的末尾位置。
         * @return {Array} array
         */
        toArray: function(iterajsble, start, end){
            if (!iterajsble || !iterajsble.length) {
                return [];
            }

            if (typeof iterajsble === 'string') {
                iterajsble = iterajsble.split('');
            }

            if (supportsSliceOnNodeList) {
                return slice.call(iterajsble, start || 0, end || iterajsble.length);
            }

            var array = [],
                i;

            start = start || 0;
            end = end ? ((end < 0) ? iterajsble.length + end : end) : iterajsble.length;

            for (i = start; i < end; i++) {
                array.push(iterajsble[i]);
            }

            return array;
        },

        /**
         * 获取数组中每个元素的制定属性值. 示例:
         *
         *     erajs.Array.pluck(erajs.query("p"), "className"); // [el1.className, el2.className, ..., elN.className]
         *
         * @param {Array/NodeList} array The Array of items to pluck the value from.
         * @param {String} propertyName 元素的属性名称。
         * @return {Array} 从数组中的每一项的值。
         */
        pluck: function(array, propertyName) {
            var ret = [],
                i, ln, item;

            for (i = 0, ln = array.length; i < ln; i++) {
                item = array[i];

                ret.push(item[propertyName]);
            }

            return ret;
        },

        /**
         * 通过在数组的每个元素中调用一个特定函数，用结果创建一个新数组。
         *
         * @param {Array} array
         * @param {Function} fn 每个元素上的回调函数。
         * @param {Mixed} fn.item Current item.
         * @param {Number} fn.index Index of the item.
         * @param {Array} fn.array The whole array that's being iterajsted.
         * @param {Object} [scope] 回调函数的作用域。
         * @return {Array} results
         */
        map: supportsMap ? function(array, fn, scope) {
            //<debug>
            if (!fn) {
                erajs.Error.raise('erajs.Array.map must have a callback function passed as second argument.');
            }
            //</debug>
            return array.map(fn, scope);
        } : function(array, fn, scope) {
            //<debug>
            if (!fn) {
                erajs.Error.raise('erajs.Array.map must have a callback function passed as second argument.');
            }
            //</debug>
            var results = [],
                i = 0,
                len = array.length;

            for (; i < len; i++) {
                results[i] = fn.call(scope, array[i], i, array);
            }

            return results;
        },

        /**
         * 在数组的每个元素上执行指定函数，
         * 直到函数返回一个false值 如果某个元素上返回了false值，
         * 本函数立即返回false 否则函数返回true
         *
         * @param {Array} array
         * @param {Function} fn 每个元素上的回调函数。
         * @param {Mixed} fn.item Current item.
         * @param {Number} fn.index Index of the item.
         * @param {Array} fn.array The whole array that's being iterajsted.
         * @param {Object} scope 回调函数的作用域
         * @return {Boolean} 如果回调函数没有返回false值则为true。
         */
        every: supportsEvery ? function(array, fn, scope) {
            //<debug>
            if (!fn) {
                erajs.Error.raise('erajs.Array.every must have a callback function passed as second argument.');
            }
            //</debug>
            return array.every(fn, scope);
        } : function(array, fn, scope) {
            //<debug>
            if (!fn) {
                erajs.Error.raise('erajs.Array.every must have a callback function passed as second argument.');
            }
            //</debug>
            var i = 0,
                ln = array.length;

            for (; i < ln; ++i) {
                if (!fn.call(scope, array[i], i, array)) {
                    return false;
                }
            }

            return true;
        },

        /**
         * 在数组的每个元素上执行指定函数，
         * 直到函数返回一个true值 如果某个元素上返回了true值，本函数立即返回true。
         *
         * @param {Array} array
         * @param {Function} fn 每个元素上的回调函数
         * @param {Mixed} fn.item Current item.
         * @param {Number} fn.index Index of the item.
         * @param {Array} fn.array The whole array that's being iterajsted.
         * @param {Object} scope 回调函数的作用域
         * @return {Boolean} 如果回调函数返回一个true值则为true。
         */
        some: supportsSome ? function(array, fn, scope) {
            //<debug>
            if (!fn) {
                erajs.Error.raise('erajs.Array.some must have a callback function passed as second argument.');
            }
            //</debug>
            return array.some(fn, scope);
        } : function(array, fn, scope) {
            //<debug>
            if (!fn) {
                erajs.Error.raise('erajs.Array.some must have a callback function passed as second argument.');
            }
            //</debug>
            var i = 0,
                ln = array.length;

            for (; i < ln; ++i) {
                if (fn.call(scope, array[i], i, array)) {
                    return true;
                }
            }

            return false;
        },
        
        /**
         * 比较两个数组是否绝对的相等。
         * @param {Array} array1
         * @param {Array} array2
         * @return {Boolean} 如果相等，则返回true。
         */
        equals: function(array1, array2) {
            var len1 = array1.length,
                len2 = array2.length,
                i;
                
            // Short circuit if the same array is passed twice
            if (array1 === array2) {
                return true;
            }
                
            if (len1 !== len2) {
                return false;
            }
            
            for (i = 0; i < len1; ++i) {
                if (array1[i] !== array2[i]) {
                    return false;
                }
            }
            
            return true;
        },

        /**
         * 过滤掉数组里的空值，空值的定义见 {@link erajs#isEmpty erajs.isEmpty}
         *
         * 参见 {@link erajs.Array#filter}.
         *
         * @param {Array} array
         * @return {Array} results
         */
        clean: function(array) {
            var results = [],
                i = 0,
                ln = array.length,
                item;

            for (; i < ln; i++) {
                item = array[i];

                if (!erajs.isEmpty(item)) {
                    results.push(item);
                }
            }

            return results;
        },

        /**
         * 返回一个去掉重复元素的新数组。
         *
         * @param {Array} array
         * @return {Array} results
         */
        unique: function(array) {
            var clone = [],
                i = 0,
                ln = array.length,
                item;

            for (; i < ln; i++) {
                item = array[i];

                if (ExtArray.indexOf(clone, item) === -1) {
                    clone.push(item);
                }
            }

            return clone;
        },

        /**
         * Creates a new array with all of the elements of this array for which
         * the provided filtering function returns true.
         *
         * @param {Array} array
         * @param {Function} fn Callback function for each item
         * @param {Mixed} fn.item Current item.
         * @param {Number} fn.index Index of the item.
         * @param {Array} fn.array The whole array that's being iterajsted.
         * @param {Object} scope Callback function scope
         * @return {Array} results
         */
        filter: supportsFilter ? function(array, fn, scope) {
            //<debug>
            if (!fn) {
                erajs.Error.raise('erajs.Array.filter must have a filter function passed as second argument.');
            }
            //</debug>
            return array.filter(fn, scope);
        } : function(array, fn, scope) {
            //<debug>
            if (!fn) {
                erajs.Error.raise('erajs.Array.filter must have a filter function passed as second argument.');
            }
            //</debug>
            var results = [],
                i = 0,
                ln = array.length;

            for (; i < ln; i++) {
                if (fn.call(scope, array[i], i, array)) {
                    results.push(array[i]);
                }
            }

            return results;
        },

        /**
         * Returns the first item in the array which elicits a true return value from the
         * passed selection function.
         * @param {Array} array The array to search
         * @param {Function} fn The selection function to execute for each item.
         * @param {Mixed} fn.item The array item.
         * @param {String} fn.index The index of the array item.
         * @param {Object} scope (optional) The scope (<code>this</code> reference) in which the
         * function is executed. Defaults to the array
         * @return {Object} The first item in the array which returned true from the selection
         * function, or null if none was found.
         */
        findBy : function(array, fn, scope) {
            var i = 0,
                len = array.length;

            for (; i < len; i++) {
                if (fn.call(scope || array, array[i], i)) {
                    return array[i];
                }
            }
            return null;
        },

        /**
         * 将一个值转换为一个数组，函数返回:
         *
         * - 一个空数组，如果给定的值是 undefined 或 null
         * - 数组本身，如果已经是一个数组
         * - 一个数组的拷贝，如果给定的值是 {@link erajs#isIterajsble iterajsble} (arguments, NodeList 等等)
         * - 一个包含给定值作为唯一元素的数组 ,其他情况。
         *
         * @param {Object} value 给定的值
         * @param {Boolean} newReference (Optional) 为true则如有必要克隆给定数组然后返回一个其新引用 默认为false。
         * @return {Array} array
         */
        from: function(value, newReference) {
            if (value === undefined || value === null) {
                return [];
            }

            if (erajs.isArray(value)) {
                return (newReference) ? slice.call(value) : value;
            }

            var type = typeof value;
            // Both strings and functions will have a length property. In phantomJS, NodeList
            // instances report typeof=='function' but don't have an apply method...
            if (value && value.length !== undefined && type !== 'string' && (type !== 'function' || !value.apply)) {
                return ExtArray.toArray(value);
            }

            return [value];
        },

        /**
         * 移除数组中的指定元素。
         *
         * @param {Array} array 重复
         * @param {Object} item 要移除的元素
         * @return {Array} 数组本身
         */
        remove: function(array, item) {
            var index = ExtArray.indexOf(array, item);

            if (index !== -1) {
                erase(array, index, 1);
            }

            return array;
        },

        /**
         * 把一个元素插入到数组，如果它不存在于这个数组。
         *
         * @param {Array} array 数组
         * @param {Object} item 待插入的元素
         */
        include: function(array, item) {
            if (!ExtArray.contains(array, item)) {
                array.push(item);
            }
        },

        /**
         * 克隆一个数组，而不引用原数组，注意着不同于Ext.clone，Ext.clone不递归克隆。
         * 它把Array.prototype.slice.call(array)方法简化 成一个方便的、容易记住的方法。
         *
         * @param {Array} array 数组
         * @return {Array} 克隆的数组
         */
        clone: function(array) {
            return slice.call(array);
        },

        /**
         * 合并多个数组中的不重复元素到一个数组。
         *
         * {@link erajs.Array#union}是{@link erajs.Array#merge}的别名。
         *
         * @param {Array} array1
         * @param {Array} array2
         * @param {Array} etc
         * @return {Array} 合并的数组
         */
        merge: function() {
            var args = slice.call(arguments),
                array = [],
                i, ln;

            for (i = 0, ln = args.length; i < ln; i++) {
                array = array.concat(args[i]);
            }

            return ExtArray.unique(array);
        },

        /**
         * 返回多个数组的公共交集。
         *
         * @param {Array} array1
         * @param {Array} array2
         * @param {Array} etc
         * @return {Array} 交集
         */
        intersect: function() {
            var intersection = [],
                arrays = slice.call(arguments),
                arraysLength,
                array,
                arrayLength,
                minArray,
                minArrayIndex,
                minArrayCandidate,
                minArrayLength,
                element,
                elementCandidate,
                elementCount,
                i, j, k;

            if (!arrays.length) {
                return intersection;
            }

            // Find the smallest array
            arraysLength = arrays.length;
            for (i = minArrayIndex = 0; i < arraysLength; i++) {
                minArrayCandidate = arrays[i];
                if (!minArray || minArrayCandidate.length < minArray.length) {
                    minArray = minArrayCandidate;
                    minArrayIndex = i;
                }
            }

            minArray = ExtArray.unique(minArray);
            erase(arrays, minArrayIndex, 1);

            // Use the smallest unique'd array as the anchor loop. If the other array(s) do contain
            // an item in the small array, we're likely to find it before reaching the end
            // of the inner loop and can terminate the search early.
            minArrayLength = minArray.length;
            arraysLength = arrays.length;
            for (i = 0; i < minArrayLength; i++) {
                element = minArray[i];
                elementCount = 0;

                for (j = 0; j < arraysLength; j++) {
                    array = arrays[j];
                    arrayLength = array.length;
                    for (k = 0; k < arrayLength; k++) {
                        elementCandidate = array[k];
                        if (element === elementCandidate) {
                            elementCount++;
                            break;
                        }
                    }
                }

                if (elementCount === arraysLength) {
                    intersection.push(element);
                }
            }

            return intersection;
        },

        /**
         * 返回 A-B的差异集合，从A中减去所有B中存在的元素。
         *
         * @param {Array} arrayA
         * @param {Array} arrayB
         * @return {Array} A中不同于B的元素
         */
        difference: function(arrayA, arrayB) {
            var clone = slice.call(arrayA),
                ln = clone.length,
                i, j, lnB;

            for (i = 0,lnB = arrayB.length; i < lnB; i++) {
                for (j = 0; j < ln; j++) {
                    if (clone[j] === arrayB[i]) {
                        erase(clone, j, 1);
                        j--;
                        ln--;
                    }
                }
            }

            return clone;
        },

        /**
         * 返回一个数组中一部分的浅表复制。
         * 等价于 原生方法 "Array.prototype.slice.call(array, begin, end)"。
         * 经常被使用于数组 作为arguments，arguments对象没有提供slice方法，
         * 但是可以作为上下文对象使用 Array.prototype.slice方法。
         *
         * @param {Array} array 数组 (或 arguments 对象)
         * @param {Number} begin 起始索引。为负值则 从数组的末尾计算位移
         * @param {Number} end 结束索引。 复制元素不包括结尾处的元素。
         * 为负值则从数组的末尾计算位移，如果结尾被省略，
         * 数组中一直到结尾的所有元素将被复制。
         *
         * @return {Array} 数组的拷贝件.
         * @method slice
         */
        // Note: IE6 will return [] on slice.call(x, undefined).
        slice: ([1,2].slice(1, undefined).length ?
            function (array, begin, end) {
                return slice.call(array, begin, end);
            } :
            // at least IE6 uses arguments.length for variadic signature
            function (array, begin, end) {
                // After tested for IE 6, the one below is of the best performance
                // see http://jsperf.com/slice-fix
                if (typeof begin === 'undefined') {
                    return slice.call(array);
                }
                if (typeof end === 'undefined') {
                    return slice.call(array, begin);
                }
                return slice.call(array, begin, end);
            }
        ),

        /**
         * 排序数组中的元素 默认使用字母表，按升序排序。
         *
         * @param {Array} array 进行排序的数组。
         * @param {Function} sortFn (optional) 比较函数.
         * @param {Mixed} sortFn.a An item to compare.
         * @param {Mixed} sortFn.b Another item to compare.
         * @return {Array} 排序后的数组.
         */
        sort: supportsSort ? function(array, sortFn) {
            if (sortFn) {
                return array.sort(sortFn);
            } else {
                return array.sort();
            }
         } : function(array, sortFn) {
            var length = array.length,
                i = 0,
                comparison,
                j, min, tmp;

            for (; i < length; i++) {
                min = i;
                for (j = i + 1; j < length; j++) {
                    if (sortFn) {
                        comparison = sortFn(array[j], array[min]);
                        if (comparison < 0) {
                            min = j;
                        }
                    } else if (array[j] < array[min]) {
                        min = j;
                    }
                }
                if (min !== i) {
                    tmp = array[i];
                    array[i] = array[min];
                    array[min] = tmp;
                }
            }

            return array;
        },

        /**
         * 递归将数组和数组中的元素转换为一维数组。
         *
         * @param {Array} array The array to flatten
         * @return {Array} 一维数组.
         */
        flatten: function(array) {
            var worker = [];

            function rFlatten(a) {
                var i, ln, v;

                for (i = 0, ln = a.length; i < ln; i++) {
                    v = a[i];

                    if (erajs.isArray(v)) {
                        rFlatten(v);
                    } else {
                        worker.push(v);
                    }
                }

                return worker;
            }

            return rFlatten(array);
        },

        /**
         * 返回数组中的最小值。
         *
         * @param {Array/NodeList} array The Array from which to select the minimum value.
         * @param {Function} comparisonFn (optional) 比较函数 如果被忽略，
         * 则使用 "<" 操作符。 注意: gt = 1; eq = 0; lt = -1
         * @param {Mixed} comparisonFn.min Current minimum value.
         * @param {Mixed} comparisonFn.item The value to compare with the current minimum.
         * @return {Object} minValue 最小值
         */
        min: function(array, comparisonFn) {
            var min = array[0],
                i, ln, item;

            for (i = 0, ln = array.length; i < ln; i++) {
                item = array[i];

                if (comparisonFn) {
                    if (comparisonFn(min, item) === 1) {
                        min = item;
                    }
                }
                else {
                    if (item < min) {
                        min = item;
                    }
                }
            }

            return min;
        },

        /**
         * 返回数组中的最大值。
         *
         * @param {Array/NodeList} array The Array from which to select the maximum value.
         * @param {Function} comparisonFn (optional) 比较函数 如果被忽略，则使用 ">" 操作符。
         * 注意: gt = 1; eq = 0; lt = -1
         * @param {Mixed} comparisonFn.max Current maximum value.
         * @param {Mixed} comparisonFn.item The value to compare with the current maximum.
         * @return {Object} maxValue 最大值
         */
        max: function(array, comparisonFn) {
            var max = array[0],
                i, ln, item;

            for (i = 0, ln = array.length; i < ln; i++) {
                item = array[i];

                if (comparisonFn) {
                    if (comparisonFn(max, item) === -1) {
                        max = item;
                    }
                }
                else {
                    if (item > max) {
                        max = item;
                    }
                }
            }

            return max;
        },

        /**
         * 计算数组中元素的平均值。
         *
         * @param {Array} array 待计算平均值的数组.
         * @return {Number} 平均值.
         */
        mean: function(array) {
            return array.length > 0 ? ExtArray.sum(array) / array.length : undefined;
        },

        /**
         * 计算数组中元素的和。
         *
         * @param {Array} array 待计算总和的数组.
         * @return {Number} 总和.
         */
        sum: function(array) {
            var sum = 0,
                i, ln, item;

            for (i = 0,ln = array.length; i < ln; i++) {
                item = array[i];

                sum += item;
            }

            return sum;
        },

        /**
         * 使用给定数组中的元素作为key，创建一个map对象，值是元素的索引+1。示例:
         * 
         *      var map = erajs.Array.toMap(['a','b','c']);
         *
         *      // map = { a: 1, b: 2, c: 3 };
         * 
         * 或者指定一个key属性:
         * 
         *      var map = erajs.Array.toMap([
         *              { name: 'a' },
         *              { name: 'b' },
         *              { name: 'c' }
         *          ], 'name');
         *
         *      // map = { a: 1, b: 2, c: 3 };
         * 
         * 当然, 也可以指定一个key生成函数:
         * 
         *      var map = erajs.Array.toMap([
         *              { name: 'a' },
         *              { name: 'b' },
         *              { name: 'c' }
         *          ], function (obj) { return obj.name.toUpperCase(); });
         *
         *      // map = { A: 1, B: 2, C: 3 };
         * 
         * @param {Array} array The Array to create the map from.
         * @param {String/Function} [getKey] Name of the object property to use
         * as a key or a function to extract the key.
         * @param {Object} [scope] Value of this inside callback.
         * @return {Object} The resulting map.
         */
        toMap: function(array, getKey, scope) {
            var map = {},
                i = array.length;

            if (!getKey) {
                while (i--) {
                    map[array[i]] = i+1;
                }
            } else if (typeof getKey == 'string') {
                while (i--) {
                    map[array[i][getKey]] = i+1;
                }
            } else {
                while (i--) {
                    map[getKey.call(scope, array[i])] = i+1;
                }
            }

            return map;
        },

        /**
         * Creates a map (object) keyed by a property of elements of the given array. The values in
         * the map are the array element. For example:
         * 
         *      var map = erajs.Array.toMap(['a','b','c']);
         *
         *      // map = { a: 'a', b: 'b', c: 'c' };
         * 
         * Or a key property can be specified:
         * 
         *      var map = erajs.Array.toMap([
         *              { name: 'a' },
         *              { name: 'b' },
         *              { name: 'c' }
         *          ], 'name');
         *
         *      // map = { a: {name: 'a'}, b: {name: 'b'}, c: {name: 'c'} };
         * 
         * Lastly, a key extractor can be provided:
         * 
         *      var map = erajs.Array.toMap([
         *              { name: 'a' },
         *              { name: 'b' },
         *              { name: 'c' }
         *          ], function (obj) { return obj.name.toUpperCase(); });
         *
         *      // map = { A: {name: 'a'}, B: {name: 'b'}, C: {name: 'c'} };
         *
         * @param {Array} array The Array to create the map from.
         * @param {String/Function} [getKey] Name of the object property to use
         * as a key or a function to extract the key.
         * @param {Object} [scope] Value of this inside callback.
         * @return {Object} The resulting map.
         */
        toValueMap: function(array, getKey, scope) {
            var map = {},
                i = array.length;

            if (!getKey) {
                while (i--) {
                    map[array[i]] = array[i];
                }
            } else if (typeof getKey == 'string') {
                while (i--) {
                    map[array[i][getKey]] = array[i];
                }
            } else {
                while (i--) {
                    map[getKey.call(scope, array[i])] = array[i];
                }
            }

            return map;
        },

        //<debug>
        _replaceSim: replaceSim, // for unit testing
        _spliceSim: spliceSim,
        //</debug>

        /**
         * 移除数组中的多个元素。这个功能相当于Array的splice方法。
         * 但是避免了IE8的splice函数bug，不会复制移除的元素并按次序返回它们。（因为它们通常被忽略）
         *
         * @param {Array} array 数组
         * @param {Number} index 要操作的索引位置
         * @param {Number} removeCount 要移除的元素数量
         * @return {Array} 处理后的数组。
         * @method
         */
        erase: erase,

        /**
         * 在数组中插入多个元素。
         *
         * @param {Array} array 数组.
         * @param {Number} index 插入的位置索引
         * @param {Array} items 要插入的多个元素
         * @return {Array} 插入后的数组。
         */
        insert: function (array, index, items) {
            return replace(array, index, 0, items);
        },

        /**
         * 替换数组里的多个元素。这个功能相当于Array的splice方法。
         * 但是避免了IE8的splice函数bug，而且更便于使用，
         * 因为它插入一个元素的数组，而不是一个可变参数列表。
         *
         * @param {Array} array 数组.
         * @param {Number} index要操作的索引位置.
         * @param {Number} removeCount 要移除的元素数量（可以为0）.
         * @param {Array} insert (optional) 要插入的数组.
         * @return {Array} 处理后的数组
         * @method
         */
        replace: replace,

        /**
         * 替换数组里的多个元素。这个功能相当于Array的splice方法。
         * 但是避免了IE8的splice函数bug，
         * 除了第一个argument参数以外， 与splice方法的签名相同。
         * removeCount后面的所有参数都将被插入到指定位置。
         *
         * @param {Array} array 待替换的数组.
         * @param {Number} index 要操作的索引位置
         * @param {Number} removeCount 要移除的元素数量（可以为0）
         * @param {Object...} elements 要添加到数组的多个元素.
         * 如果没有指定任何元素，splice简化为从数组移除元素。
         * @return {Array} 处理后的数组。
         * @method
         */
        splice: splice,

        /**
         * 在数组的末尾添加新的元素。
         *
         * 参数可能是一个元素集合、也可能是多个元素集合的数组。
         * 如果参数列表中存在一个数组， 则它的所有元素都将被添加到给定数组的末尾。
         *
         * @param {Array} target 目标数组
         * @param {Object...} elements 要添加的元素。
         * 每个元素可能也是一个数组。
         * 这种情形下，各数组的所有元素也将被添加到目标数组的末尾。
         * @return {Array} 处理后的数组。
         *
         */
        push: function(array) {
            var len = arguments.length,
                i = 1,
                newItem;

            if (array === undefined) {
                array = [];
            } else if (!erajs.isArray(array)) {
                array = [array];
            }
            for (; i < len; i++) {
                newItem = arguments[i];
                Array.prototype.push[erajs.isIterajsble(newItem) ? 'apply' : 'call'](array, newItem);
            }
            return array;
        }
    };

    /**
     * @method
     * @member erajs
     * @inheritdoc erajs.Array#each
     */
    erajs.each = ExtArray.each;

    /**
     * @method
     * @member erajs.Array
     * @inheritdoc erajs.Array#merge
     */
    ExtArray.union = ExtArray.merge;

    /**
     * Old alias to {@link erajs.Array#min}
     * @deprecated 4.0.0 Use {@link erajs.Array#min} instead
     * @method
     * @member erajs
     * @inheritdoc erajs.Array#min
     */
    erajs.min = ExtArray.min;

    /**
     * Old alias to {@link erajs.Array#max}
     * @deprecated 4.0.0 Use {@link erajs.Array#max} instead
     * @method
     * @member erajs
     * @inheritdoc erajs.Array#max
     */
    erajs.max = ExtArray.max;

    /**
     * Old alias to {@link erajs.Array#sum}
     * @deprecated 4.0.0 Use {@link erajs.Array#sum} instead
     * @method
     * @member erajs
     * @inheritdoc erajs.Array#sum
     */
    erajs.sum = ExtArray.sum;

    /**
     * Old alias to {@link erajs.Array#mean}
     * @deprecated 4.0.0 Use {@link erajs.Array#mean} instead
     * @method
     * @member erajs
     * @inheritdoc erajs.Array#mean
     */
    erajs.mean = ExtArray.mean;

    /**
     * Old alias to {@link erajs.Array#flatten}
     * @deprecated 4.0.0 Use {@link erajs.Array#flatten} instead
     * @method
     * @member erajs
     * @inheritdoc erajs.Array#flatten
     */
    erajs.flatten = ExtArray.flatten;

    /**
     * Old alias to {@link erajs.Array#clean}
     * @deprecated 4.0.0 Use {@link erajs.Array#clean} instead
     * @method
     * @member erajs
     * @inheritdoc erajs.Array#clean
     */
    erajs.clean = ExtArray.clean;

    /**
     * Old alias to {@link erajs.Array#unique}
     * @deprecated 4.0.0 Use {@link erajs.Array#unique} instead
     * @method
     * @member erajs
     * @inheritdoc erajs.Array#unique
     */
    erajs.unique = ExtArray.unique;

    /**
     * Old alias to {@link erajs.Array#pluck erajs.Array.pluck}
     * @deprecated 4.0.0 Use {@link erajs.Array#pluck erajs.Array.pluck} instead
     * @method
     * @member erajs
     * @inheritdoc erajs.Array#pluck
     */
    erajs.pluck = ExtArray.pluck;

    /**
     * @method
     * @member erajs
     * @inheritdoc erajs.Array#toArray
     */
    erajs.toArray = function() {
        return ExtArray.toArray.apply(ExtArray, arguments);
    };
}());

/*
 * Copyright (c) 2014 www.erajsyt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 *
 **/
//  @tag foundation,core
//  @require Array.js
//  @define erajs.Function

/**
 * @class erajs.Function
 * 处理回调函数的常用静态方法的集合.
 * @singleton
 * @alternateClassName erajs.util.Functions
 */
erajs.Function = {

    /**
     * 整个框架的一个很常用的方法。 它作为另一种方法的包装，最初接受2个参数 name 和 value。
     * 被包装的函数可以"灵活"的对值进行设置为其他值:
     *
     * - `name` 和 `value` 作为2个参数
     * - 一个单一的对象参数与多个键-值对
     *
     * 示例:
     *
     *     var setValue = erajs.Function.flexSetter(function(name, value) {
     *         this[name] = value;
     *     });
     *
     *     // 之后，设置单个名称-值
     *     setValue('name1', 'value1');
     *
     *     // 设置多个名称-值对
     *     setValue({
     *         name1: 'value1',
     *         name2: 'value2',
     *         name3: 'value3'
     *     });
     *
     * @param {Function} setter
     * @returns {Function} flexSetter
     */
    flexSetter: function(fn) {
        return function(a, b) {
            var k, i;

            if (a === null) {
                return this;
            }

            if (typeof a !== 'string') {
                for (k in a) {
                    if (a.hasOwnProperty(k)) {
                        fn.call(this, k, a[k]);
                    }
                }

                if (erajs.enumerajsbles) {
                    for (i = erajs.enumerajsbles.length; i--;) {
                        k = erajs.enumerajsbles[i];
                        if (a.hasOwnProperty(k)) {
                            fn.call(this, k, a[k]);
                        }
                    }
                }
            } else {
                fn.call(this, a, b);
            }

            return this;
        };
    },

    /**
     * 根据指定函数 fn 创建一个代理函数，更改 this 作用域为传入的作用域，
     * 可以选择重写调用的参数。(默认为该函数的参数列表)
     *
     * {@link erajs#bind erajs.bind}是{@link erajs.Function#bind erajs.Function.bind}的别名
     *
     * @param {Function} fn 需要被代理的原始函数.
     * @param {Object} scope (可选) 该函数执行的作用域(this引用)。
     *  如果省略，默认指向默认的全局环境对象(通常是window).
     * @param {Array} args (可选) 覆盖原函数的参数列表（默认为该函数的参数列表）
     * @param {Boolean/Number} appendArgs (可选) 如果该参数为true，将参数加载到该函数的后面，
     * 如果该参数为数字类型，则将参数将插入到所指定的位置。
     * @return {Function} 新的函数.
     */
    bind: function(fn, scope, args, appendArgs) {
        if (arguments.length === 2) {
            return function() {
                return fn.apply(scope, arguments);
            };
        }

        var method = fn,
            slice = Array.prototype.slice;

        return function() {
            var callArgs = args || arguments;

            if (appendArgs === true) {
                callArgs = slice.call(arguments, 0);
                callArgs = callArgs.concat(args);
            }
            else if (typeof appendArgs == 'number') {
                callArgs = slice.call(arguments, 0); // copy arguments first
                erajs.Array.insert(callArgs, appendArgs, args);
            }

            return method.apply(scope || erajs.global, callArgs);
        };
    },

    /**
     * 从提供'fn'创建一个新的函数，其中的参数预先设置到 'args'。
     * 新的参数传递到新创建的回调函数中，调用时追加到预先设定的参数之后。
     * 创建的回调时，这是特别有用的。
     *
     * 示例:
     *
     *     var originalFunction = function(){
     *         alert(erajs.Array.from(arguments).join(' '));
     *     };
     *
     *     var callback = erajs.Function.pass(originalFunction, ['Hello', 'World']);
     *
     *     callback(); // 执行结果为 'Hello World'
     *     callback('by Me'); // // 执行结果为 'Hello World by Me'
     *
     * {@link erajs#pass erajs.pass} 是{@link erajs.Function#pass erajs.Function.pass}的别名.
     *
     * @param {Function} fn 原始函数.
     * @param {Array} args 要传递给新的回调函数的参数.
     * @param {Object} scope (可选) 该函数执行的作用域(this引用).
     * @return {Function} 新的回调函数
     */
    pass: function(fn, args, scope) {
        if (!erajs.isArray(args)) {
            if (erajs.isIterajsble(args)) {
                args = erajs.Array.clone(args);
            } else {
                args = args !== undefined ? [args] : [];
            }
        }

        return function() {
            var fnArgs = [].concat(args);
            fnArgs.push.apply(fnArgs, arguments);
            return fn.apply(scope || this, fnArgs);
        };
    },

    /**
     * 为object提供的方法属性名称为methodName的方法创建一个别名。
     * 注意,执行的作用域仍将被绑定到所提供的“对象”本身。
     *
     * @param {Object/Function} object
     * @param {String} methodName
     * @return {Function} aliasFn
     */
    alias: function(object, methodName) {
        return function() {
            return object[methodName].apply(object, arguments);
        };
    },

    /**
     * 为当前提供的方法创建一个"克隆"。
     * 返回的方法将调用传递所有的参数和"this"指针沿给定的方法，并返回其结果。
     *
     * @param {Function} method
     * @return {Function} cloneFn
     */
    clone: function(method) {
        return function() {
            return method.apply(this, arguments);
        };
    },

    /**
     * 创建一个拦截函数。传递的函数在原函数之前被调用。
     * 如果拦截函数返回false， 则原函数不会被调用。
     * 在返回函数中，将返回原函数的返回值。 拦截函数被调用时会被传入原函数的参数。
     *
     * 示例:
     *
     *     var sayHi = function(name){
     *         alert('Hi, ' + name);
     *     }
     *
     *     sayHi('Fred'); // 提示 "Hi, Fred"
     *
     *     // 不修改原函数的前提下,创建新的验证函数:
     *     var sayHiToFriend = erajs.Function.createInterceptor(sayHi, function(name){
     *         return name == 'Brian';
     *     });
     *
     *     sayHiToFriend('Fred');  // 没提示
     *     sayHiToFriend('Brian'); // 提示 "Hi, Brian"
     *
     * @param {Function} origFn 原始函数.
     * @param {Function} newFn 新的拦截函数
     * @param {Object} [scope] (可选) 传递的函数执行的作用域(this引用)。
     * 如果省略，默认指向被调用的原函数作用域或window。
     * @param {Object} [returnValue=null] (可选)返回的值，如果传递的函数返回false（默认为 null）。
     * @return {Function} The new function
     */
    createInterceptor: function(origFn, newFn, scope, returnValue) {
        var method = origFn;
        if (!erajs.isFunction(newFn)) {
            return origFn;
        } else {
            returnValue = erajs.isDefined(returnValue) ? returnValue : null;
            return function() {
                var me = this,
                    args = arguments;
                    
                newFn.target = me;
                newFn.method = origFn;
                return (newFn.apply(scope || me || erajs.global, args) !== false) ? origFn.apply(me || erajs.global, args) : returnValue;
            };
        }
    },

    /**
     * 创建一个委派对象（就是回调），调用时，在一个特定的延迟后执行。
     *
     * @param {Function} fn 当返回的函数调用时，该函数将在一个延迟后被调用。
     * 可选地,可以指定一个更换(或更多)的参数列表。
     * @param {Number} delay 每当调用时推迟执行的毫秒数。
     * @param {Object} scope (可选) 函数在执行时所使用的作用域(this引用)。
     * @param {Array} args (可选) 覆盖原函数的参数列表（默认为该函数的参数列表）。
     * @param {Boolean/Number} appendArgs (可选) 如果该参数为true，将参数加载到该函数的后面，
     * 如果该参数为数字类型，则将参数将插入到所指定的位置。
     * @return {Function} 一个函数，调用时，在指定的延迟之后执行原函数。
     */
    createDelayed: function(fn, delay, scope, args, appendArgs) {
        if (scope || args) {
            fn = erajs.Function.bind(fn, scope, args, appendArgs);
        }

        return function() {
            var me = this,
                args = Array.prototype.slice.call(arguments);

            setTimeout(function() {
                fn.apply(me, args);
            }, delay);
        };
    },

    /**
     * 延迟调用该函数。你可以加入一个作用域的参数，例如:
     *
     *     var sayHi = function(name){
     *         alert('Hi, ' + name);
     *     }
     *
     *     // 即刻执行:
     *     sayHi('Fred');
     *
     *     // 两秒过后执行：
     *     erajs.Function.defer(sayHi, 2000, this, ['Fred']);
     *
     *     // 有时候加上一个匿名，函数也是很方便的：
     *     erajs.Function.defer(function(){
     *         alert('Anonymous');
     *     }, 100);
     *
     * {@link erajs#defer erajs.defer} 是 {@link erajs.Function#defer erajs.Function.defer}的别名。
     *
     * @param {Function} fn 要延迟执行的函数。
     * @param {Number} millis 延迟时间，以毫秒为单位 (如果小于或等于 0 函数则立即执行)
     * @param {Object} scope (可选) 该函数执行的作用域(this引用)。
     * 如果省略，默认指向window。
     * @param {Array} args (可选) 覆盖原函数的参数列表 (默认为该函数的参数列表)
     * @param {Boolean/Number} appendArgs (可选) 如果该参数为true，将参数加载到该函数的后面，
     * 如果该参数为数字类型，则将参数将插入到所指定的位置。
     * @return {Number} 可被clearTimeout所使用的timeout id。
     */
    defer: function(fn, millis, scope, args, appendArgs) {
        fn = erajs.Function.bind(fn, scope, args, appendArgs);
        if (millis > 0) {
            return setTimeout(erajs.supports.TimeoutActualLateness ? function () {
                fn();
            } : fn, millis);
        }
        fn();
        return 0;
    },

    /**
     * 创建一个组合函数，调用次序为：原函数 + 参数中的函数。
     * 该函数返回了原函数执行的结果（也就是返回了原函数的返回值）。
     * 在参数中传递的函数，它的参数也是原函数的参数。 用法示例:
     *
     *     var sayHi = function(name){
     *         alert('Hi, ' + name);
     *     }
     *
     *     sayHi('Fred'); // 提示 "Hi, Fred"
     *
     *     var sayGoodbye = erajs.Function.createSequence(sayHi, function(name){
     *         alert('Bye, ' + name);
     *     });
     *
     *     sayGoodbye('Fred'); //  显示两个提示
     *
     * @param {Function} originalFn 原始函数。
     * @param {Function} newFn 新的组合函数。
     * @param {Object} scope (可选) 传递的函数执行的作用域(this引用)。
     * 如果省略，默认指向默认的全局环境对象(通常是window)。
     * @return {Function} 新的函数
     */
    createSequence: function(originalFn, newFn, scope) {
        if (!newFn) {
            return originalFn;
        }
        else {
            return function() {
                var result = originalFn.apply(this, arguments);
                newFn.apply(scope || this, arguments);
                return result;
            };
        }
    },

    /**
     * 创建一个缓冲函数，可选绑定范围，在调用时， 根据配置的毫秒数缓冲执行传递的函数。
     * 如果在此期间该函数被重复调用，则第一次调用将被取消， 重新开始计算缓冲时间。
     *
     * @param {Function} fn 需要被缓冲的原始函数。
     * @param {Number} buffer 缓冲函数调用执行的时间，单位是毫秒。
     * @param {Object} scope (可选) 该对象将作为代理函数执行的作用域(this引用)。
     * 如果省略，默认为调用者指定的作用域。
     * @param {Array} args (可选) 覆盖该次调用的参数列表。（默认为该函数的参数列表）。
     * @return {Function} 一个函数，在指定的时间缓冲之后调用传递的函数。
     */
    createBuffered: function(fn, buffer, scope, args) {
        var timerId;

        return function() {
            var callArgs = args || Array.prototype.slice.call(arguments, 0),
                me = scope || this;

            if (timerId) {
                clearTimeout(timerId);
            }

            timerId = setTimeout(function(){
                fn.apply(me, callArgs);
            }, buffer);
        };
    },

    /**
     * 创建一个指定函数的减速代理， 当减速函数被反复快速回调时，
     * 只有在上次调用完成的指定间间隔之后才会被调用。
     *
     * 对于包装可被反复调用的函数，如鼠标移动事件的情况下的处理程序时，
     * 处理是极其昂贵的，这是非常有用的。
     *
     * @param {Function} fn 要在一个固定的时间间隔执行的函数。
     * @param {Number} interval 减速函数执行的时间间隔毫秒为单位。
     * @param {Object} scope (可选) 传递的函数执行的作用域(this引用)。
     * 如果省略，默认为调用者指定的作用域。
     * @returns {Function} 一个函数，在指定的时间间隔调用传递函数。
     */
    createThrottled: function(fn, interval, scope) {
        var lastCallTime, elapsed, lastArgs, timer, execute = function() {
            fn.apply(scope || this, lastArgs);
            lastCallTime = erajs.Date.now();
        };

        return function() {
            elapsed = erajs.Date.now() - lastCallTime;
            lastArgs = arguments;

            clearTimeout(timer);
            if (!lastCallTime || (elapsed >= interval)) {
                execute();
            } else {
                timer = setTimeout(execute, interval - elapsed);
            }
        };
    },


    /**
     * 将行为添加到现有的方法是在该函数的原始行为之前执行。 例如:
     * 
     *     var soup = {
     *         contents: [],
     *         add: function(ingredient) {
     *             this.contents.push(ingredient);
     *         }
     *     };
     *     erajs.Function.interceptBefore(soup, "add", function(ingredient){
     *         if (!this.contents.length && ingredient !== "water") {
     *             // Always add water to start with
     *             this.contents.push("water");
     *         }
     *     });
     *     soup.add("onions");
     *     soup.add("salt");
     *     soup.contents; // will contain: water, onions, salt
     * 
     * @param {Object} object 目标对象
     * @param {String} methodName 要重写的方法名称
     * @param {Function} fn 新的行为函数。
     * 它将与原始方法相同的参数调用。
     * 此函数的返回值将成为新方法的返回值。

     * @param {Object} [scope] 要执行拦截器函数的作用域。默认为当前对象。
     * @return {Function} 刚创建的新函数。
     */
    interceptBefore: function(object, methodName, fn, scope) {
        var method = object[methodName] || erajs.emptyFn;

        return (object[methodName] = function() {
            var ret = fn.apply(scope || this, arguments);
            method.apply(this, arguments);

            return ret;
        });
    },

    /**
     * 将行为添加到现有的方法是在该函数的原始行为之后执行。 例如:
     * 
     *     var soup = {
     *         contents: [],
     *         add: function(ingredient) {
     *             this.contents.push(ingredient);
     *         }
     *     };
     *     erajs.Function.interceptAfter(soup, "add", function(ingredient){
     *         // Always add a bit of extra salt
     *         this.contents.push("salt");
     *     });
     *     soup.add("water");
     *     soup.add("onions");
     *     soup.contents; // will contain: water, salt, onions, salt
     * 
     * @param {Object} object 目标对象
     * @param {String} methodName 要重写的方法名称
     * @param {Function} fn 新的行为函数。
     * 它将与原始方法相同的参数调用。
     * 此函数的返回值将成为新方法的返回值。
     * @param {Object} [scope] 要执行拦截器函数的作用域。默认为当前对象。
     * @return {Function} 刚创建的新函数。
     */
    interceptAfter: function(object, methodName, fn, scope) {
        var method = object[methodName] || erajs.emptyFn;

        return (object[methodName] = function() {
            method.apply(this, arguments);
            return fn.apply(scope || this, arguments);
        });
    }
};

/**
 * @method
 * @member erajs
 * @inheritdoc erajs.Function#defer
 */
erajs.defer = erajs.Function.alias(erajs.Function, 'defer');

/**
 * @method
 * @member erajs
 * @inheritdoc erajs.Function#pass
 */
erajs.pass = erajs.Function.alias(erajs.Function, 'pass');

/**
 * @method
 * @member erajs
 * @inheritdoc erajs.Function#bind
 */
erajs.bind = erajs.Function.alias(erajs.Function, 'bind');

/*
 * Copyright (c) 2014 www.erajsyt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 */

//  @tag foundation,core
//  @require Function.js
//  @define erajs.Object

/**
 * @class erajs.Object
 *
 * 一组处理对象的实用静态方法集合。
 *
 * @singleton
 */

(function() {

// The "constructor" for chain:
var TemplateClass = function(){},
    ExtObject = erajs.Object = {

    /**
     * 使用给定对象作为原生链返回一个新对象。
     * 
     * **注意** 这个方法不支持`Object.create`方法 属性定义功能，只支持第一个参数。
     *
     * @param {Object} object 创建新对象的原生链.
     */
    chain: Object.create || function (object) {
        TemplateClass.prototype = object;
        var result = new TemplateClass();
        TemplateClass.prototype = null;
        return result;
    },

    /**
     * 将一个name - value对转换为一个对象数组，支持内部结构的转换，对构造查询字符串非常有用。 示例:
     *
     *     var objects = erajs.Object.toQueryObjects('hobbies', ['reading', 'cooking', 'swimming']);
     *
     *     // objects此时等于:
     *     [
     *         { name: 'hobbies', value: 'reading' },
     *         { name: 'hobbies', value: 'cooking' },
     *         { name: 'hobbies', value: 'swimming' },
     *     ];
     *
     *     var objects = erajs.Object.toQueryObjects('dateOfBirth', {
     *         day: 3,
     *         month: 8,
     *         year: 1987,
     *         extra: {
     *             hour: 4
     *             minute: 30
     *         }
     *     }, true); // 递归
     *
     *     // objects此时等于:
     *     [
     *         { name: 'dateOfBirth[day]', value: 3 },
     *         { name: 'dateOfBirth[month]', value: 8 },
     *         { name: 'dateOfBirth[year]', value: 1987 },
     *         { name: 'dateOfBirth[extra][hour]', value: 4 },
     *         { name: 'dateOfBirth[extra][minute]', value: 30 },
     *     ];
     *
     * @param {String} name
     * @param {Object/Array} value
     * @param {Boolean} [recursive=false] 为true则递归遍历对象。
     * @return {Array}
     */
    toQueryObjects: function(name, value, recursive) {
        var self = ExtObject.toQueryObjects,
            objects = [],
            i, ln;

        if (erajs.isArray(value)) {
            for (i = 0, ln = value.length; i < ln; i++) {
                if (recursive) {
                    objects = objects.concat(self(name + '[' + i + ']', value[i], true));
                }
                else {
                    objects.push({
                        name: name,
                        value: value[i]
                    });
                }
            }
        }
        else if (erajs.isObject(value)) {
            for (i in value) {
                if (value.hasOwnProperty(i)) {
                    if (recursive) {
                        objects = objects.concat(self(name + '[' + i + ']', value[i], true));
                    }
                    else {
                        objects.push({
                            name: name,
                            value: value[i]
                        });
                    }
                }
            }
        }
        else {
            objects.push({
                name: name,
                value: value
            });
        }

        return objects;
    },

    /**
     * 将一个对象转换成编码的查询字符串。
     *
     * 不递归:
     *
     *     erajs.Object.toQueryString({foo: 1, bar: 2}); // returns "foo=1&bar=2"
     *     erajs.Object.toQueryString({foo: null, bar: 2}); // returns "foo=&bar=2"
     *     erajs.Object.toQueryString({'some price': '$300'}); // returns "some%20price=%24300"
     *     erajs.Object.toQueryString({date: new Date(2011, 0, 1)}); // returns "date=%222011-01-01T00%3A00%3A00%22"
     *     erajs.Object.toQueryString({colors: ['red', 'green', 'blue']}); // returns "colors=red&colors=green&colors=blue"
     *
     * 递归:
     *
     *     erajs.Object.toQueryString({
     *         username: 'Jacky',
     *         dateOfBirth: {
     *             day: 1,
     *             month: 2,
     *             year: 1911
     *         },
     *         hobbies: ['coding', 'eating', 'sleeping', ['nested', 'stuff']]
     *     }, true); // 返回如下字符串(换行和url-decoded是为了便于阅读的目的):
     *     // username=Jacky
     *     //    &dateOfBirth[day]=1&dateOfBirth[month]=2&dateOfBirth[year]=1911
     *     //    &hobbies[0]=coding&hobbies[1]=eating&hobbies[2]=sleeping&hobbies[3][0]=nested&hobbies[3][1]=stuff
     *
     * @param {Object} object 要编码的对象
     * @param {Boolean} [recursive=false] 是否递归的翻译对象，
     * 这种格式在 PHP / Ruby on Rails服务器中被类似地支持.
     *
     * @return {String} queryString
     */
    toQueryString: function(object, recursive) {
        var paramObjects = [],
            params = [],
            i, j, ln, paramObject, value;

        for (i in object) {
            if (object.hasOwnProperty(i)) {
                paramObjects = paramObjects.concat(ExtObject.toQueryObjects(i, object[i], recursive));
            }
        }

        for (j = 0, ln = paramObjects.length; j < ln; j++) {
            paramObject = paramObjects[j];
            value = paramObject.value;

            if (erajs.isEmpty(value)) {
                value = '';
            } else if (erajs.isDate(value)) {
                value = erajs.Date.toString(value);
            }

            params.push(encodeURIComponent(paramObject.name) + '=' + encodeURIComponent(String(value)));
        }

        return params.join('&');
    },

    /**
     * 将查询字符串转换回对象。
     *
     * 不递归:
     *
     *     erajs.Object.fromQueryString("foo=1&bar=2"); // returns {foo: '1', bar: '2'}
     *     erajs.Object.fromQueryString("foo=&bar=2"); // returns {foo: null, bar: '2'}
     *     erajs.Object.fromQueryString("some%20price=%24300"); // returns {'some price': '$300'}
     *     erajs.Object.fromQueryString("colors=red&colors=green&colors=blue"); // returns {colors: ['red', 'green', 'blue']}
     *
     * 递归:
     *
     *     erajs.Object.fromQueryString(
     *         "username=Jacky&"+
     *         "dateOfBirth[day]=1&dateOfBirth[month]=2&dateOfBirth[year]=1911&"+
     *         "hobbies[0]=coding&hobbies[1]=eating&hobbies[2]=sleeping&"+
     *         "hobbies[3][0]=nested&hobbies[3][1]=stuff", true);
     *
     *     // returns
     *     {
     *         username: 'Jacky',
     *         dateOfBirth: {
     *             day: '1',
     *             month: '2',
     *             year: '1911'
     *         },
     *         hobbies: ['coding', 'eating', 'sleeping', ['nested', 'stuff']]
     *     }
     *
     * @param {String} queryString 要解码的查询字符串
     * @param {Boolean} [recursive=false] 是否递归的解码字符串，
     * 这种格式在 PHP / Ruby on Rails服务器中被类似地支持.
     *
     * @return {Object}
     */
    fromQueryString: function(queryString, recursive) {
        var parts = queryString.replace(/^\?/, '').split('&'),
            object = {},
            temp, components, name, value, i, ln,
            part, j, subLn, matchedKeys, matchedName,
            keys, key, nextKey;

        for (i = 0, ln = parts.length; i < ln; i++) {
            part = parts[i];

            if (part.length > 0) {
                components = part.split('=');
                name = decodeURIComponent(components[0]);
                value = (components[1] !== undefined) ? decodeURIComponent(components[1]) : '';

                if (!recursive) {
                    if (object.hasOwnProperty(name)) {
                        if (!erajs.isArray(object[name])) {
                            object[name] = [object[name]];
                        }

                        object[name].push(value);
                    }
                    else {
                        object[name] = value;
                    }
                }
                else {
                    matchedKeys = name.match(/(\[):?([^\]]*)\]/g);
                    matchedName = name.match(/^([^\[]+)/);

                    //<debug error>
                    if (!matchedName) {
                        throw new Error('[erajs.Object.fromQueryString] Malformed query string given, failed parsing name from "' + part + '"');
                    }
                    //</debug>

                    name = matchedName[0];
                    keys = [];

                    if (matchedKeys === null) {
                        object[name] = value;
                        continue;
                    }

                    for (j = 0, subLn = matchedKeys.length; j < subLn; j++) {
                        key = matchedKeys[j];
                        key = (key.length === 2) ? '' : key.substring(1, key.length - 1);
                        keys.push(key);
                    }

                    keys.unshift(name);

                    temp = object;

                    for (j = 0, subLn = keys.length; j < subLn; j++) {
                        key = keys[j];

                        if (j === subLn - 1) {
                            if (erajs.isArray(temp) && key === '') {
                                temp.push(value);
                            }
                            else {
                                temp[key] = value;
                            }
                        }
                        else {
                            if (temp[key] === undefined || typeof temp[key] === 'string') {
                                nextKey = keys[j+1];

                                temp[key] = (erajs.isNumeric(nextKey) || nextKey === '') ? [] : {};
                            }

                            temp = temp[key];
                        }
                    }
                }
            }
        }

        return object;
    },

    /**
     * 迭代一个对象，在每个迭代上调用给定的回调函数 在回调函数中返回 false 可以停止迭代. 示例:
     *
     *     var person = {
     *         name: 'Jacky'
     *         hairColor: 'black'
     *         loves: ['food', 'sleeping', 'wife']
     *     };
     *
     *     erajs.Object.each(person, function(key, value, myself) {
     *         console.log(key + ":" + value);
     *
     *         if (key === 'hairColor') {
     *             return false; // 停止迭代
     *         }
     *     });
     *
     * @param {Object} object 要迭代的对象
     * @param {Function} fn 回调函数
     * @param {String} fn.key
     * @param {Object} fn.value
     * @param {Object} fn.object 对象本身
     * @param {Object} [scope] 回调函数执行的 (this) 作用域.
     */
    each: function(object, fn, scope) {
        for (var property in object) {
            if (object.hasOwnProperty(property)) {
                if (fn.call(scope || object, property, object[property], object) === false) {
                    return;
                }
            }
        }
    },

    /**
     * 递归的合并任意数目的对象，但是不引用他们或他们的子对象。
     *
     *     var erajs = {
     *         companyName: 'Erajs',
     *         products: ['erajs Framework', 'erajs Ui', 'erajs Validator'],
     *         isSuperCool: true,
     *         office: {
     *             size: 2000,
     *             location: 'Palo Alto',
     *             isFun: true
     *         }
     *     };
     *
     *     var newStuff = {
     *         companyName: 'Sencha Inc.',
     *         products: ['Ext  JS', 'Ext  GWT', 'Ext  Designer', 'Sencha Touch', 'Sencha Animator'],
     *         office: {
     *             size: 40000,
     *             location: 'Redwood City'
     *         }
     *     };
     *
     *     var sencha = erajs.Object.merge(extjs, newStuff);
     *
     *     // 此时extjs和sencha等于
     *     {
     *         companyName: 'Sencha Inc.',
     *         products: ['Ext  JS', 'Ext  GWT', 'Ext  Designer', 'Sencha Touch', 'Sencha Animator'],
     *         isSuperCool: true,
     *         office: {
     *             size: 40000,
     *             location: 'Redwood City',
     *             isFun: true
     *         }
     *     }
     *
     * @param {Object} destination 所有的对象子序列将被合并到此目标对象。
     * @param {Object...} object 将要被合并的任意数目对象。
     * @return {Object} 合并所有给定的对象到目标对象。
     */
    merge: function(destination) {
        var i = 1,
            ln = arguments.length,
            mergeFn = ExtObject.merge,
            cloneFn = erajs.clone,
            object, key, value, sourceKey;

        for (; i < ln; i++) {
            object = arguments[i];

            for (key in object) {
                value = object[key];
                if (value && value.constructor === Object) {
                    sourceKey = destination[key];
                    if (sourceKey && sourceKey.constructor === Object) {
                        mergeFn(sourceKey, value);
                    }
                    else {
                        destination[key] = cloneFn(value);
                    }
                }
                else {
                    destination[key] = value;
                }
            }
        }

        return destination;
    },

    /**
     * @private
     * @param destination
     */
    mergeIf: function(destination) {
        var i = 1,
            ln = arguments.length,
            cloneFn = erajs.clone,
            object, key, value;

        for (; i < ln; i++) {
            object = arguments[i];

            for (key in object) {
                if (!(key in destination)) {
                    value = object[key];

                    if (value && value.constructor === Object) {
                        destination[key] = cloneFn(value);
                    }
                    else {
                        destination[key] = value;
                    }
                }
            }
        }

        return destination;
    },

    /**
     * 根据指定的值，返回第一个匹配的key. 如果没有匹配的值，将返回null.
     *
     *     var person = {
     *         name: 'Jacky',
     *         loves: 'food'
     *     };
     *
     *     alert(erajs.Object.getKey(person, 'food')); //  弹出 'loves'
     *
     * @param {Object} object
     * @param {Object} value 要查找的值。
     */
    getKey: function(object, value) {
        for (var property in object) {
            if (object.hasOwnProperty(property) && object[property] === value) {
                return property;
            }
        }

        return null;
    },

    /**
     * 获取给定对象所有的值组成的数组。
     *
     *     var values = erajs.Object.getValues({
     *         name: 'Jacky',
     *         loves: 'food'
     *     }); // ['Jacky', 'food']
     *
     * @param {Object} object
     * @return {Array} 对象的值组成的数组。
     */
    getValues: function(object) {
        var values = [],
            property;

        for (property in object) {
            if (object.hasOwnProperty(property)) {
                values.push(object[property]);
            }
        }

        return values;
    },

    /**
     * 获取所有对象的key组成的数组。
     *
     *     var values = erajs.Object.getKeys({
     *         name: 'Jacky',
     *         loves: 'food'
     *     }); // ['name', 'loves']
     *
     * @param {Object} object
     * @return {String[]} 对象的key组成的数组。
     * @method
     */
    getKeys: (typeof Object.keys == 'function')
        ? function(object){
            if (!object) {
                return [];
            }
            return Object.keys(object);
        }
        : function(object) {
            var keys = [],
                property;

            for (property in object) {
                if (object.hasOwnProperty(property)) {
                    keys.push(property);
                }
            }

            return keys;
        },

    /**
     * 获取此对象的所有自有属性的数目。
     *
     *     var size = erajs.Object.getSize({
     *         name: 'Jacky',
     *         loves: 'food'
     *     }); // size equals 2
     *
     * @param {Object} object
     * @return {Number} size
     */
    getSize: function(object) {
        var size = 0,
            property;

        for (property in object) {
            if (object.hasOwnProperty(property)) {
                size++;
            }
        }

        return size;
    },
    
    /**
     * 检查对象是否有属性。
     * @param {Object} object
     * @return {Boolean} 如果没有属性则返回'true'.
     */
    isEmpty: function(object){
        for (var key in object) {
            if (object.hasOwnProperty(key)) {
                return false;
            }
        }
        return true;    
    },
    
    /**
     * Shallow compares the contents of 2 objects using strict equality. Objects are
     * considered equal if they both have the same set of properties and the
     * value for those properties equals the other in the corresponding object.
     * 
     *     // Returns true
     *     erajs.Object.equals({
     *         foo: 1,
     *         bar: 2
     *     }, {
     *         foo: 1,
     *         bar: 2
     *     });
     * 
     * @param {Object} object1
     * @param {Object} object2
     * @return {Boolean} `true` if the objects are equal.
     */
    equals: (function() {
        var check = function(o1, o2) {
            var key;
        
            for (key in o1) {
                if (o1.hasOwnProperty(key)) {
                    if (o1[key] !== o2[key]) {
                        return false;
                    }    
                }
            }    
            return true;
        };
        
        return function(object1, object2) {
            
            // Short circuit if the same object is passed twice
            if (object1 === object2) {
                return true;
            } if (object1 && object2) {
                // Do the second check because we could have extra keys in
                // object2 that don't exist in object1.
                return check(object1, object2) && check(object2, object1);  
            } else if (!object1 && !object2) {
                return object1 === object2;
            } else {
                return false;
            }
        };
    })(),

    /**
     * @private
     */
    classify: function(object) {
        var prototype = object,
            objectProperties = [],
            propertyClassesMap = {},
            objectClass = function() {
                var i = 0,
                    ln = objectProperties.length,
                    property;

                for (; i < ln; i++) {
                    property = objectProperties[i];
                    this[property] = new propertyClassesMap[property]();
                }
            },
            key, value;

        for (key in object) {
            if (object.hasOwnProperty(key)) {
                value = object[key];

                if (value && value.constructor === Object) {
                    objectProperties.push(key);
                    propertyClassesMap[key] = ExtObject.classify(value);
                }
            }
        }

        objectClass.prototype = prototype;

        return objectClass;
    }
};

/**
 * A convenient alias method for {@link erajs.Object#merge}.
 *
 * @member erajs
 * @method merge
 * @inheritdoc erajs.Object#merge
 */
erajs.merge = erajs.Object.merge;

/**
 * @private
 * @member erajs
 */
erajs.mergeIf = erajs.Object.mergeIf;

/**
 *
 * @member erajs
 * @method urlEncode
 * @inheritdoc erajs.Object#toQueryString
 * @deprecated 4.0.0 Use {@link erajs.Object#toQueryString} instead
 */
erajs.urlEncode = function() {
    var args = erajs.Array.from(arguments),
        prefix = '';

    // Support for the old `pre` argument
    if ((typeof args[1] === 'string')) {
        prefix = args[1] + '&';
        args[1] = false;
    }

    return prefix + ExtObject.toQueryString.apply(ExtObject, args);
};

/**
 * Alias for {@link erajs.Object#fromQueryString}.
 *
 * @member erajs
 * @method urlDecode
 * @inheritdoc erajs.Object#fromQueryString
 * @deprecated 4.0.0 Use {@link erajs.Object#fromQueryString} instead
 */
erajs.urlDecode = function() {
    return ExtObject.fromQueryString.apply(ExtObject, arguments);
};

}());

/*
 * Copyright (c) 2014 www.erajsyt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 *
**/
// @tag foundation,core
// @require Object.js
// @define erajs.Date

/**
 * @class erajs.Date
 * 提供了处理日期的常用的静态方法的集合。
 * 注意，如果Ext.Date需要加载，为方便起见， 它会复制到该对象所有的方法和属性。
 *
 * 日期的处理和格式化是 PHP's date() function的一个子集，
 * 提供的格式和转换后的结果将和 PHP 版本的一模一样。
 *
 * 下面列出的是目前所有支持的格式：:
 * <pre class="">
格式符      说明                                                     输出
------      ------------------------------------------------------  -----------------------
  d         月份中的天数，两位数字，不足位补“0”                         01 到 31
  D         当前星期的缩写                                             Mon 到 Sun
  j         月份中的天数，不补“0”                                      1 到 31
  l         当前星期的完整拼写                                         Sunday 到 Saturday
  N         ISO-8601 标准表示的一周之中的天数（1～7）                   1 (表示 Monday) 到 7 (表示 Sunday)
  S         英语中月份天数的序数词的后缀                                st, nd, rd 或 th。与格式符“j”连用
  w         一周之中的天数（0～6）                                     0 (表示 Sunday) 到 6 (表示 Saturday)
  z         一年之中的天数(从 0 开始)                                  0到364 (闰年含365)
  W         一年之中的ISO-8601周数，周从星期一开始                      01 到 53
  F         当前月份的完整拼写, 例如January或March                      January 到 December
  m         当前的月份，两位数字，不足位补“0”                           01 到 12
  M         当前月份的缩写                                             Jan 到 Dec
  n         当前的月份，不补“0”                                        1 到 12
  t         当前月份的总天数                                           28 到 31
  L         是否闰年                                                   “1”为闰年，“0”为平年
  o         ISO-8601 年数 (对于(Y)相同,但如果ISO星期数(W)               示例: 1998 或 2004
            属于到上一年或下一年, 那一年则被改用)
  Y         4位数字表示的当前年数                                      示例: 1999 或 2003
  y         2位数字表示的当前年数                                      示例: 99 或 03
  a         小写的“am”和“pm”                                           am 或 pm
  A         大写的“AM”和“PM”                                           AM 或 PM
  g         12小时制表示的当前小时数，不补“0”                           1 到 12
  G         24小时制表示的当前小时数，不补“0”                           0 到 23
  h         12小时制表示的当前小时数，不足位补“0”                       01 到 12
  H         24小时制表示的当前小时数，不足位补“0”                       00 到 23
  i         分钟数，不足位补“0”                                        00 到 59
  s         秒数，不足位补“0”                                          00 到 59
  u         秒数的小数形式                                             示例:
            (最低1位数,允许任意位数的数字)                              001 (即 0.001s) 或
                                                                       100 (即 0.100s) 或
                                                                       999 (即 0.999s) 或
                                                                       999876543210 (即 0.999876543210s)
  O         用小时数表示的与 GMT 差异数                                 示例: +1030
  P         以带冒号的小时和分钟表示与 GMT 差异数                        示例: -08:00
  T         当前系统设定的时区                                          示例: EST, MDT, PDT ...
  Z         用秒数表示的时区偏移量（西方为负数，东方为正数）                 -43200 to 50400
  c         ISO 8601 日期
            注意:                                                      示例:
            1) 如果未指定,则月/日默认为当前月/日,                          1991 或
                时间默认为午夜时间, 同时时区默认为                         1992-10 或
                浏览器设置的时区。如果指定时间                             1993-09-20 或
                则它必须包括小时和分钟。                                   1994-08-19T16:20+01:00 或
                "T" 分隔符、秒、毫秒和时区是可选的。.                      1995-07-18T17:21:28-02:00 或
            2) 一个秒数的小数部分,如果指定, 必须包含至少1位数字             1996-06-17T18:22:29.98765+03:00 或
                (在这里允许位数的最大数目没有限制),                        1997-05-16T19:23:30,12345-0400 或
                并可由一个 '.' 或一个 ',' 分隔。                           1998-04-15T20:24:31.2468Z 或
                参见右边的例子为所支持的各级日期时间粒度                    1999-03-14T20:24:32Z 或
                或参见http://www.w3.org/TR/NOTE-datetime
                查阅更多相关信息。                                         2000-02-13T21:25:33
  U         自 Unix 新纪元(January 1 1970 00:00:00 GMT) 以来的秒数         1193432466 或 -2138434463
  MS        Microsoft AJAX 序列化的日期                                    \/Date(1238606590509)\/
                                                                            (即 UTC milliseconds since epoch)
                                                                          或 \/Date(1238606590509+0800)\/
  time      一个javascript毫秒时间戳                                        1350024476440
  timestamp UNIX时间戳(same as U)                                           1350024866
</pre>
 *
 * 用法举例：（注意你必须在字母前使用转意字符“\”才能将其作为字母本身而不是格式符输出）:
 *
 *     // 样本数据:
 *     // 'Wed Jan 10 2007 15:05:01 GMT-0600 (Central Standard Time)'
 *     
 *     var dt = new Date('1/10/2007 03:05:01 PM GMT-0600');
 *     // 2007-01-10
 *     console.log(erajs.Date.format(dt, 'Y-m-d'));
 *     // January 10, 2007, 3:05 pm
 *     console.log(erajs.Date.format(dt, 'F j, Y, g:i a'));
 *     // Wednesday, the 10th of January 2007 03:05:01 PM
 *     console.log(erajs.Date.format(dt, 'l, \\t\\he jS \\of F Y h:i:s A'));
 *
 * 下面有一些标准的日期/时间模板可能会对你有用。 它们不是 Date.js 的一部分，
 * 但是你可以将下列代码拷出，并放在 Date.js 之后所引用的任何脚本内，
 * 都将成为一个全局变量，并对所有的 Date 对象起作用。
 * 你可以按照你的需要随意增加、删除此段代码。
 *
 *     erajs.Date.patterns = {
 *         ISO8601Long:"Y-m-d H:i:s",
 *         ISO8601Short:"Y-m-d",
 *         ShortDate: "n/j/Y",
 *         LongDate: "l, F d, Y",
 *         FullDateTime: "l, F d, Y g:i:s A",
 *         MonthDay: "F d",
 *         ShortTime: "g:i A",
 *         LongTime: "g:i:s A",
 *         SortableDateTime: "Y-m-d\\TH:i:s",
 *         UniversalSortableDateTime: "Y-m-d H:i:sO",
 *         YearMonth: "F, Y"
 *     };
 *
 * 用法示例::
 *
 *     var dt = new Date();
 *     console.log(erajs.Date.format(dt, erajs.Date.patterns.ShortDate));
 *
 * 开发者可以通过设置{@link #parseFunctions} 和 {@link #formatFunctions}实现自定义日期格式化与解释功能， 以满足特殊的需求。
 *
 * @singleton
 */

/*
 * Most of the date-formatting functions below are the excellent work of Baron Schwartz.
 * (see http://www.xaprb.com/blog/2005/12/12/javascript-closures-for-runtime-efficiency/)
 * They generajste precompiled functions from format patterns instead of parsing and
 * processing each pattern every time a date is formatted. These functions are available
 * on every Date object.
 */

erajs.Date = new function() {
  var utilDate = this,
      stripEscapeRe = /(\\.)/g,
      hourInfoRe = /([gGhHisucUOPZ]|MS)/,
      dateInfoRe = /([djzmnYycU]|MS)/,
      slashRe = /\\/gi,
      numberTokenRe = /\{(\d+)\}/g,
      MSFormatRe = new RegExp('\\/Date\\(([-+])?(\\d+)(?:[+-]\\d{4})?\\)\\/'),
      code = [
        // date calculations (note: the code below creates a dependency on erajs.Number.from())
        "var me = this, dt, y, m, d, h, i, s, ms, o, O, z, zz, u, v, W, year, jan4, week1monday, daysInMonth, dayMatched,",
            "def = me.defaults,",
            "from = erajs.Number.from,",
            "results = String(input).match(me.parseRegexes[{0}]);", // either null, or an array of matched strings

        "if(results){",
            "{1}",

            "if(u != null){", // i.e. unix time is defined
                "v = new Date(u * 1000);", // give top priority to UNIX time
            "}else{",
                // create Date object representing midnight of the current day;
                // this will provide us with our date defaults
                // (note: clearTime() handles Daylight Saving Time automatically)
                "dt = me.clearTime(new Date);",

                "y = from(y, from(def.y, dt.getFullYear()));",
                "m = from(m, from(def.m - 1, dt.getMonth()));",
                "dayMatched = d !== undefined;",
                "d = from(d, from(def.d, dt.getDate()));",
                
                // Attempt to validate the day. Since it defaults to today, it may go out
                // of range, for example parsing m/Y where the value is 02/2000 on the 31st of May.
                // It will attempt to parse 2000/02/31, which will overflow to March and end up
                // returning 03/2000. We only do this when we default the day. If an invalid day value
                // was set to be parsed by the user, continue on and either let it overflow or return null
                // depending on the strict value. This will be in line with the normal Date behaviour.
                
                "if (!dayMatched) {", 
                    "dt.setDate(1);",
                    "dt.setMonth(m);",
                    "dt.setFullYear(y);",
                
                    "daysInMonth = me.getDaysInMonth(dt);",
                    "if (d > daysInMonth) {",
                        "d = daysInMonth;",
                    "}",
                "}",

                "h  = from(h, from(def.h, dt.getHours()));",
                "i  = from(i, from(def.i, dt.getMinutes()));",
                "s  = from(s, from(def.s, dt.getSeconds()));",
                "ms = from(ms, from(def.ms, dt.getMilliseconds()));",

                "if(z >= 0 && y >= 0){",
                    // both the year and zero-based day of year are defined and >= 0.
                    // these 2 values alone provide sufficient info to create a full date object

                    // create Date object representing January 1st for the given year
                    // handle years < 100 appropriately
                    "v = me.add(new Date(y < 100 ? 100 : y, 0, 1, h, i, s, ms), me.YEAR, y < 100 ? y - 100 : 0);",

                    // then add day of year, checking for Date "rollover" if necessary
                    "v = !strict? v : (strict === true && (z <= 364 || (me.isLeapYear(v) && z <= 365))? me.add(v, me.DAY, z) : null);",
                "}else if(strict === true && !me.isValid(y, m + 1, d, h, i, s, ms)){", // check for Date "rollover"
                    "v = null;", // invalid date, so return null
                "}else{",
                    "if (W) {", // support ISO-8601
                        // http://en.wikipedia.org/wiki/ISO_week_date
                        //
                        // Mutually equivalent definitions for week 01 are:
                        // a. the week starting with the Monday which is nearest in time to 1 January
                        // b. the week with 4 January in it
                        // ... there are many others ...
                        //
                        // We'll use letter b above to determine the first week of the year.
                        //
                        // So, first get a Date object for January 4th of whatever calendar year is desired.
                        //
                        // Then, the first Monday of the year can easily be determined by (operajsting on this Date):
                        // 1. Getting the day of the week.
                        // 2. Subtracting that by one.
                        // 3. Multiplying that by 86400000 (one day in ms).
                        // 4. Subtracting this number of days (in ms) from the January 4 date (represented in ms).
                        // 
                        // Example #1 ...
                        //
                        //       January 2012
                        //   Su Mo Tu We Th Fr Sa
                        //    1  2  3  4  5  6  7
                        //    8  9 10 11 12 13 14
                        //   15 16 17 18 19 20 21
                        //   22 23 24 25 26 27 28
                        //   29 30 31
                        //
                        // 1. January 4th is a Wednesday.
                        // 2. Its day number is 3.
                        // 3. Simply substract 2 days from Wednesday.
                        // 4. The first week of the year begins on Monday, January 2. Simple!
                        //
                        // Example #2 ...
                        //       January 1992
                        //   Su Mo Tu We Th Fr Sa
                        //             1  2  3  4
                        //    5  6  7  8  9 10 11
                        //   12 13 14 15 16 17 18
                        //   19 20 21 22 23 24 25
                        //   26 27 28 29 30 31
                        // 
                        // 1. January 4th is a Saturday.
                        // 2. Its day number is 6.
                        // 3. Simply subtract 5 days from Saturday.
                        // 4. The first week of the year begins on Monday, December 30. Simple!
                        //
                        // v = erajs.Date.clearTime(new Date(week1monday.getTime() + ((W - 1) * 604800000)));
                        // (This is essentially doing the same thing as above but for the week rather than the day)
                        "year = y || (new Date()).getFullYear(),",
                        "jan4 = new Date(year, 0, 4, 0, 0, 0),",
                        "week1monday = new Date(jan4.getTime() - ((jan4.getDay() - 1) * 86400000));",
                        "v = erajs.Date.clearTime(new Date(week1monday.getTime() + ((W - 1) * 604800000)));",
                    "} else {",
                        // plain old Date object
                        // handle years < 100 properly
                        "v = me.add(new Date(y < 100 ? 100 : y, m, d, h, i, s, ms), me.YEAR, y < 100 ? y - 100 : 0);",
                    "}",
                "}",
            "}",
        "}",

        "if(v){",
            // favor UTC offset over GMT offset
            "if(zz != null){",
                // reset to UTC, then add offset
                "v = me.add(v, me.SECOND, -v.getTimezoneOffset() * 60 - zz);",
            "}else if(o){",
                // reset to GMT, then add offset
                "v = me.add(v, me.MINUTE, -v.getTimezoneOffset() + (sn == '+'? -1 : 1) * (hr * 60 + mn));",
            "}",
        "}",

        "return v;"
      ].join('\n');

  // create private copy of Ext JS's `erajs.util.Format.format()` method
  // - to remove unnecessary dependency
  // - to resolve namespace conflict with MS-Ajax's implementation
  function xf(format) {
      var args = Array.prototype.slice.call(arguments, 1);
      return format.replace(numberTokenRe, function(m, i) {
          return args[i];
      });
  }

  erajs.apply(utilDate, {
    /**
     * 返回当前的时间戳.
     * @return {Number} 当前时间戳.
     * @method
     */
    now: Date.now || function() {
        return +new Date();
    },

    /**
     * @private
     * Private for now
     */
    toString: function(date) {
        var pad = erajs.String.leftPad;

        return date.getFullYear() + "-"
            + pad(date.getMonth() + 1, 2, '0') + "-"
            + pad(date.getDate(), 2, '0') + "T"
            + pad(date.getHours(), 2, '0') + ":"
            + pad(date.getMinutes(), 2, '0') + ":"
            + pad(date.getSeconds(), 2, '0');
    },

    /**
     * 返回两个日期之间的毫秒数.
     * @param {Date} 第一个日期类型参数.
     * @param {Date} [dateB=new Date()] （可选）第二个日期参数，默认为当前日期.
     * @return {Number} 以毫秒为单位的时间差.
     */
    getElapsed: function(dateA, dateB) {
        return Math.abs(dateA - (dateB || utilDate.now()));
    },

    /**
     * 全局标志，确定是否应使用严格的日期解析.
     * 严格的日期解析将不会转换无效的日期， 这是JavaScript日期对象的默认行为.
     * (更多的信息，请参见 {@link #parse})
     * @type Boolean
    */
    useStrict: false,

    // private
    formatCodeToRegex: function(character, currentGroup) {
        // Note: currentGroup - position in regex result array (see notes for erajs.Date.parseCodes below)
        var p = utilDate.parseCodes[character];

        if (p) {
          p = typeof p == 'function'? p() : p;
          utilDate.parseCodes[character] = p; // reassign function result to prevent repeated execution
        }

        return p ? erajs.applyIf({
          c: p.c ? xf(p.c, currentGroup || "{0}") : p.c
        }, p) : {
            g: 0,
            c: null,
            s: erajs.String.escapeRegex(character) // treat unrecognized characters as literajsls
        };
    },

    /**
     * 对象的每个属性是一个日期解析函数.
     * 属性名称是该函数解析的格式字符串。
     * 此对象会自动填充日期解析函数并满足 erajs 标准格式化字符串要求的日期格式.
     * 自定义解析函数可被插入到该对象中, 键入的名称由此可能被parse用作一个格式字符串 {@link #parse}.
     *
     * 示例:
     *
     *     erajs.Date.parseFunctions['x-date-format'] = myDateParser;
     *
     * 解析函数应返回一个日期对象，并传递下列参数:<div class="mdetail-params"><ul>
     * <li><code>date</code> : String<div class="sub-desc">要解析的日期字符串.</div></li>
     * <li><code>strict</code> : Boolean<div class="sub-desc">
     *     如果为true，在解析时验证日期字符串 (即防止 javascript 日期转换) (默认值必须是 false)。 无效的日期字符串在解析时返回null.
     * .</div></li>
     * </ul></div>
     *
     * 若要使用日期对象，也是按照这种格式进行格式化， 相应的格式化函数必须被注入到 {@link #formatFunctions}  属性中。
     *
     * @property parseFunctions
     * @type Object
     */
    parseFunctions: {
        "MS": function(input, strict) {
            // note: the timezone offset is ignored since the MS Ajax server sends
            // a UTC milliseconds-since-Unix-epoch value (negative values are allowed)
            var r = (input || '').match(MSFormatRe);
            return r ? new Date(((r[1] || '') + r[2]) * 1) : null;
        },
        "time": function(input, strict) {
            var num = parseInt(input, 10);
            if (num || num === 0) {
                return new Date(num);
            }
            return null;
        },
        "timestamp": function(input, strict) {
            var num = parseInt(input, 10);
            if (num || num === 0) {
                return new Date(num * 1000);
            }
            return null;
        }
    },
    parseRegexes: [],

    /**
     * 在其中每个属性是一个日期格式函数对象哈希值。
     * 属性的名称作为格式字符串，与生成的格式化日期字符串相对应。
     *
     * 此对象会自动填充日期格式化函数并满足erajs标准格式化字符串要求的日期格式。
     * 自定义格式函数可被插入到该对象中， 键入的名称由此可能被{@link #format}用作一个格式字符串。
     *
     * 示例:
     *
     *     erajs.Date.formatFunctions['x-date-format'] = myDateFormatter;
     *
     * 格式化函数应该返回一个字符串表示传递的日期对象，并传递以下参数:<div class="mdetail-params"><ul>
     * <li><code>date</code> : Date<div class="sub-desc">要进行格式化的日期对象.</div></li>
     * </ul></div>
     *
     * 若要使用日期字符串，也是按照这种格式进行解析， 相应的解析函数必须被注入到 {@link #parseFunctions} 属性中。
     *
     * @type Object
     */
    formatFunctions: {
        "MS": function() {
            // UTC milliseconds since Unix epoch (MS-AJAX serialized date format (MRSF))
            return '\\/Date(' + this.getTime() + ')\\/';
        },
        "time": function(){
            return this.getTime().toString();
        },
        "timestamp": function(){
            return utilDate.format(this, 'U');
        }
    },

    y2kYear : 50,

    /**
     * 日期间隔常量:毫秒
     * @type String
     */
    MILLI : "ms",

    /**
     * 日期间隔常量：秒
     * @type String
     */
    SECOND : "s",

    /**
     * 日期间隔常量：分钟
     * @type String
     */
    MINUTE : "mi",

    /** 日期间隔常量：小时
     * @type String
     */
    HOUR : "h",

    /**
     * 日期间隔常量：天
     * @type String
     */
    DAY : "d",

    /**
     * 日期间隔常量：月
     * @type String
     */
    MONTH : "mo",

    /**
     * 日期间隔常量：年
     * @type String
     */
    YEAR : "y",

    /**
     * @property {Object} defaults 将会在日期解析过程中使用的对象哈希值包含的默认日期值.
     * 可用的属性如下:
     *
     * @property {Number} [defaults.y=undefined] 默认年份值.
     * @property {Number} [defaults.m=undefined] 默认的从1开始的月份值.
     * @property {Number} [defaults.d=undefined] 默认的日期值.
     * @property {Number} [defaults.h=undefined] 默认的小时值.
     * @property {Number} [defaults.i=undefined] 默认的分钟值.
     * @property {Number} [defaults.s=undefined] 默认年份值.
     * @property {Number} [defaults.ms=undefined] 默认的秒值.
     *
     * 重写这些属性,自定义{@link #parse}方法中所使用的默认日期值.
     * 注意: 在一些国家遇到夏令时间(即 DST)，h, i, s 和 ms 属性可能会配合 DST 生效的确切时间.
     * 考虑此情况是开发人员的责任.
     *
     * 用法示例::
     * 
     *     // 将默认天的值设置为该月的第一天.
     *     erajs.Date.defaults.d = 1;
     *
     *     // 解析一个只包含年份和月份值的2月份的日期字符串.
     *     // 当试图解析下面的日期字符串,例如, March 31st 2009，
     *     // 将一天的默认值设置为 1 可防止日期转换时的怪异问题.
     *
     *     erajs.Date.parse('2009-02', 'Y-m'); // 返回一个表示 February 1st 2009 的日期对象
     *
     */
    defaults: {},

    //<locale type="array">
    /**
     * @property {String[]} dayNames 天的文本名称的数组.
     *
     * 日期国际化需重写这些值。
     * 示例:
     *
     *     erajs.Date.dayNames = [
     *         'SundayInYourLang',
     *         'MondayInYourLang'
     *         // ...
     *     ];
     */
    dayNames : [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday"
    ],
    //</locale>

    //<locale type="array">
    /**
     * @property {String[]} monthNames 月份文本名称的数组.
     *
     * 日期国际化需重写这些值.
     *
     * 示例:
     *
     *     erajs.Date.monthNames = [
     *         'JanInYourLang',
     *         'FebInYourLang'
     *         // ...
     *     ];
     */
    monthNames : [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December"
    ],
    //</locale>

    //<locale type="object">
    /**
     * @property {Object} monthNumbers
     * 一个对象关于从零开始的 javascript 月份数的哈希值(使用月份短名作为键。 注意:键值区分大小写).
     * 日期国际化需重写这些值.
     *
     * 示例:
     *
     *     erajs.Date.monthNumbers = {
     *         'LongJanNameInYourLang': 0,
     *         'ShortJanNameInYourLang':0,
     *         'LongFebNameInYourLang':1,
     *         'ShortFebNameInYourLang':1
     *         // ...
     *     };
     */
    monthNumbers : {
        January: 0,
        Jan: 0,
        February: 1,
        Feb: 1,
        March: 2,
        Mar: 2,
        April: 3,
        Apr: 3,
        May: 4,
        June: 5,
        Jun: 5,
        July: 6,
        Jul: 6,
        August: 7,
        Aug: 7,
        September: 8,
        Sep: 8,
        October: 9,
        Oct: 9,
        November: 10,
        Nov: 10,
        December: 11,
        Dec: 11
    },
    //</locale>
    
    //<locale>
    /**
     * @property {String} defaultFormat
     * {@link erajs.util.Format#dateRenderer}和 {@link erajs.util.Format#date} 函数使用的日期格式的字符串.
     * 参见{@link erajs.Date}的详细信息.
     *
     * 这可能被覆盖在区域设置文件中.
     */
    defaultFormat : "m/d/Y",
    //</locale>
    //<locale type="function">
    /**
     * 根据月份数返回对应的月份短名。.
     * 国际日期需重写这个函数.
     * @param {Number} month 一个从零开始的月份数.
     * @return {String} 月份短名.
     */
    getShortMonthName : function(month) {
        return erajs.Date.monthNames[month].substring(0, 3);
    },
    //</locale>

    //<locale type="function">
    /**
     * 根据星期数返回对应的星期短名.
     * 国际日期需重写这个函数.
     * @param {Number} day 一个从零开始的星期数.
     * @return {String} 星期短名.
     */
    getShortDayName : function(day) {
        return erajs.Date.dayNames[day].substring(0, 3);
    },
    //</locale>

    //<locale type="function">
    /**
     * 根据月份的短名或全名返回从零开始的月份数值.
     * 国际日期需重写这个函数.
     * @param {String} name 短名/完整的月份名称.
     * @return {Number} 从零开始的月份数值.
     */
    getMonthNumber : function(name) {
        // handle camel casing for English month names (since the keys for the erajs.Date.monthNumbers hash are case sensitive)
        return erajs.Date.monthNumbers[name.substring(0, 1).toUpperCase() + name.substring(1, 3).toLowerCase()];
    },
    //</locale>

    /**
     * 检查格式字符串中是否包含小时信息.
     * @param {String} format 要检查的格式字符串.
     * @return {Boolean} True 如果格式字符串包含小时信息则返回true.
     * @method
     */
    formatContainsHourInfo : function(format){
        return hourInfoRe.test(format.replace(stripEscapeRe, ''));
    },

    /**
     * 检查格式字符串中是否包含日期信息.
     * @param {String} format 要检查的格式字符串.
     * @return {Boolean} 如果格式字符串包含关于 date/day 的信息则返回true.
     * @method
     */
    formatContainsDateInfo : function(format){
        return dateInfoRe.test(format.replace(stripEscapeRe, ''));
    },
    
    /**
     * 移除所有的转义的日期格式字符串,在日期格式中， 使用一个'\'可以用来转义特殊字符.
     * @param {String} format 要恢复原义的格式字符串.
     * @return {String} 非转义的格式字符串.
     * @method
     */
    unescapeFormat: function(format) {
        // Escape the format, since \ can be used to escape special
        // characters in a date format. For example, in a Spanish
        // locale the format may be: 'd \\de F \\de Y'
        return format.replace(slashRe, '');
    },

    /**
     * 通过format方法使用的格式化函数哈希映射的基本格式代码.
     *
     * 格式函数是字符串(或返回字符串的函数), 当{@link #format}方法被调用时，
     * 从日期对象的上下文中计算后返回相应的值.
     * 添加/重写这些映射为自定义的日期格式.
     *
     * 注意:如果不能找到适当的映射，Ext.Date.format() 会将字符视为文字.
     *
     * 示例:
     *
     *     erajs.Date.formatCodes.x = "erajs.util.Format.leftPad(this.getDate(), 2, '0')";
     *     console.log(erajs.Date.format(new Date(), 'X'); //  返回当前月的第几天
     *
     * @type Object
     */
    formatCodes : {
        d: "erajs.String.leftPad(this.getDate(), 2, '0')",
        D: "erajs.Date.getShortDayName(this.getDay())", // get localized short day name
        j: "this.getDate()",
        l: "erajs.Date.dayNames[this.getDay()]",
        N: "(this.getDay() ? this.getDay() : 7)",
        S: "erajs.Date.getSuffix(this)",
        w: "this.getDay()",
        z: "erajs.Date.getDayOfYear(this)",
        W: "erajs.String.leftPad(erajs.Date.getWeekOfYear(this), 2, '0')",
        F: "erajs.Date.monthNames[this.getMonth()]",
        m: "erajs.String.leftPad(this.getMonth() + 1, 2, '0')",
        M: "erajs.Date.getShortMonthName(this.getMonth())", // get localized short month name
        n: "(this.getMonth() + 1)",
        t: "erajs.Date.getDaysInMonth(this)",
        L: "(erajs.Date.isLeapYear(this) ? 1 : 0)",
        o: "(this.getFullYear() + (erajs.Date.getWeekOfYear(this) == 1 && this.getMonth() > 0 ? +1 : (erajs.Date.getWeekOfYear(this) >= 52 && this.getMonth() < 11 ? -1 : 0)))",
        Y: "erajs.String.leftPad(this.getFullYear(), 4, '0')",
        y: "('' + this.getFullYear()).substring(2, 4)",
        a: "(this.getHours() < 12 ? 'am' : 'pm')",
        A: "(this.getHours() < 12 ? 'AM' : 'PM')",
        g: "((this.getHours() % 12) ? this.getHours() % 12 : 12)",
        G: "this.getHours()",
        h: "erajs.String.leftPad((this.getHours() % 12) ? this.getHours() % 12 : 12, 2, '0')",
        H: "erajs.String.leftPad(this.getHours(), 2, '0')",
        i: "erajs.String.leftPad(this.getMinutes(), 2, '0')",
        s: "erajs.String.leftPad(this.getSeconds(), 2, '0')",
        u: "erajs.String.leftPad(this.getMilliseconds(), 3, '0')",
        O: "erajs.Date.getGMTOffset(this)",
        P: "erajs.Date.getGMTOffset(this, true)",
        T: "erajs.Date.getTimezone(this)",
        Z: "(this.getTimezoneOffset() * -60)",

        c: function() { // ISO-8601 -- GMT format
            var c, code, i, l, e;
            for (c = "Y-m-dTH:i:sP", code = [], i = 0, l = c.length; i < l; ++i) {
                e = c.charAt(i);
                code.push(e == "T" ? "'T'" : utilDate.getFormatCode(e)); // treat T as a character literajsl
            }
            return code.join(" + ");
        },
        /*
        c: function() { // ISO-8601 -- UTC format
            return [
              "this.getUTCFullYear()", "'-'",
              "erajs.util.Format.leftPad(this.getUTCMonth() + 1, 2, '0')", "'-'",
              "erajs.util.Format.leftPad(this.getUTCDate(), 2, '0')",
              "'T'",
              "erajs.util.Format.leftPad(this.getUTCHours(), 2, '0')", "':'",
              "erajs.util.Format.leftPad(this.getUTCMinutes(), 2, '0')", "':'",
              "erajs.util.Format.leftPad(this.getUTCSeconds(), 2, '0')",
              "'Z'"
            ].join(" + ");
        },
        */

        U: "Math.round(this.getTime() / 1000)"
    },

    /**
     * 检查传递的参数是否可以转换为一个有效的的javascript日期对象。
     * @param {Number} year 4位年份
     * @param {Number} month 从1开始的月份
     * @param {Number} day 月份中的天数
     * @param {Number} hour (可选) 小时
     * @param {Number} minute (可选) 分钟
     * @param {Number} second (可选) 秒
     * @param {Number} millisecond (可选) 毫秒
     * @return {Boolean} 如果传递的参数不能转换成日期，则返回false,否则返回true.
     */
    isValid : function(y, m, d, h, i, s, ms) {
        // setup defaults
        h = h || 0;
        i = i || 0;
        s = s || 0;
        ms = ms || 0;

        // Special handling for year < 100
        var dt = utilDate.add(new Date(y < 100 ? 100 : y, m - 1, d, h, i, s, ms), utilDate.YEAR, y < 100 ? y - 100 : 0);

        return y == dt.getFullYear() &&
            m == dt.getMonth() + 1 &&
            d == dt.getDate() &&
            h == dt.getHours() &&
            i == dt.getMinutes() &&
            s == dt.getSeconds() &&
            ms == dt.getMilliseconds();
    },

    /**
     * 使用指定的日期格式来解析传递的字符串.
     * 注意，该函数接受的是普通的日历格式，意味着月份从1开始 (即 1 = January).
     * {@link #defaults} 哈希值将用于传递的字符串不能找到任何日期值(即 year, month, day, hour, minute, second 或 millisecond)的情况中.
     * 如果一个相应的缺省日期值没有被指定在 {@link #defaults} 哈希值中， 当前日期的年、月、日或 DST 调整的零-小时时间值将用来替代。
     * 一定要注意,为了解析操作是成功的(解析失败将返回空值)， 输入日期字符串必须精确匹配指定的格式字符串.
     * 
     * 示例:
     *
     *     //dt = Fri May 25 2007 (current date)
     *     var dt = new Date();
     *     
     *     //dt = Thu May 25 2006 (today&#39;s month/day in 2006)
     *     dt = erajs.Date.parse("2006", "Y");
     *     
     *     //dt = Sun Jan 15 2006 (all date parts specified)
     *     dt = erajs.Date.parse("2006-01-15", "Y-m-d");
     *     
     *     //dt = Sun Jan 15 2006 15:20:01
     *     dt = erajs.Date.parse("2006-01-15 3:20:01 PM", "Y-m-d g:i:s A");
     *     
     *     // attempt to parse Sun Feb 29 2006 03:20:01 in strict mode
     *     dt = erajs.Date.parse("2006-02-29 03:20:01", "Y-m-d H:i:s", true); // returns null
     *
     * @param {String} input 将被解析的日期字符串.
     * @param {String} format 预期的日期字符串格式.
     * @param {Boolean} [strict=false] (可选) true则在解析时（即防止JavaScript日期“反转”）校验日期格式字符串.
     * 无效的日期字符串解析时将返回null.
     * @return {Date} 解析的日期对象.
     */
    parse : function(input, format, strict) {
        var p = utilDate.parseFunctions;
        if (p[format] == null) {
            utilDate.createParser(format);
        }
        return p[format].call(utilDate, input, erajs.isDefined(strict) ? strict : utilDate.useStrict);
    },

    // Backwards compat
    parseDate: function(input, format, strict){
        return utilDate.parse(input, format, strict);
    },


    // private
    getFormatCode : function(character) {
        var f = utilDate.formatCodes[character];

        if (f) {
          f = typeof f == 'function'? f() : f;
          utilDate.formatCodes[character] = f; // reassign function result to prevent repeated execution
        }

        // note: unknown characters are treated as literajsls
        return f || ("'" + erajs.String.escape(character) + "'");
    },

    // private
    createFormat : function(format) {
        var code = [],
            special = false,
            ch = '',
            i;

        for (i = 0; i < format.length; ++i) {
            ch = format.charAt(i);
            if (!special && ch == "\\") {
                special = true;
            } else if (special) {
                special = false;
                code.push("'" + erajs.String.escape(ch) + "'");
            } else {
                code.push(utilDate.getFormatCode(ch));
            }
        }
        utilDate.formatFunctions[format] = erajs.functionFactory("return " + code.join('+'));
    },

    // private
    createParser : function(format) {
        var regexNum = utilDate.parseRegexes.length,
            currentGroup = 1,
            calc = [],
            regex = [],
            special = false,
            ch = "",
            i = 0,
            len = format.length,
            atEnd = [],
            obj;

        for (; i < len; ++i) {
            ch = format.charAt(i);
            if (!special && ch == "\\") {
                special = true;
            } else if (special) {
                special = false;
                regex.push(erajs.String.escape(ch));
            } else {
                obj = utilDate.formatCodeToRegex(ch, currentGroup);
                currentGroup += obj.g;
                regex.push(obj.s);
                if (obj.g && obj.c) {
                    if (obj.calcAtEnd) {
                        atEnd.push(obj.c);
                    } else {
                        calc.push(obj.c);
                    }
                }
            }
        }

        calc = calc.concat(atEnd);

        utilDate.parseRegexes[regexNum] = new RegExp("^" + regex.join('') + "$", 'i');
        utilDate.parseFunctions[format] = erajs.functionFactory("input", "strict", xf(code, regexNum, calc.join('')));
    },

    // private
    parseCodes : {
        /*
         * Notes:
         * g = {Number} calculation group (0 or 1. only group 1 contributes to date calculations.)
         * c = {String} calculation method (required for group 1. null for group 0. {0} = currentGroup - position in regex result array)
         * s = {String} regex pattern. all matches are stored in results[], and are accessible by the calculation mapped to 'c'
         */
        d: {
            g:1,
            c:"d = parseInt(results[{0}], 10);\n",
            s:"(3[0-1]|[1-2][0-9]|0[1-9])" // day of month with leading zeroes (01 - 31)
        },
        j: {
            g:1,
            c:"d = parseInt(results[{0}], 10);\n",
            s:"(3[0-1]|[1-2][0-9]|[1-9])" // day of month without leading zeroes (1 - 31)
        },
        D: function() {
            for (var a = [], i = 0; i < 7; a.push(utilDate.getShortDayName(i)), ++i); // get localised short day names
            return {
                g:0,
                c:null,
                s:"(?:" + a.join("|") +")"
            };
        },
        l: function() {
            return {
                g:0,
                c:null,
                s:"(?:" + utilDate.dayNames.join("|") + ")"
            };
        },
        N: {
            g:0,
            c:null,
            s:"[1-7]" // ISO-8601 day number (1 (monday) - 7 (sunday))
        },
        //<locale type="object" property="parseCodes">
        S: {
            g:0,
            c:null,
            s:"(?:st|nd|rd|th)"
        },
        //</locale>
        w: {
            g:0,
            c:null,
            s:"[0-6]" // JavaScript day number (0 (sunday) - 6 (saturday))
        },
        z: {
            g:1,
            c:"z = parseInt(results[{0}], 10);\n",
            s:"(\\d{1,3})" // day of the year (0 - 364 (365 in leap years))
        },
        W: {
            g:1,
            c:"W = parseInt(results[{0}], 10);\n",
            s:"(\\d{2})" // ISO-8601 week number (with leading zero)
        },
        F: function() {
            return {
                g:1,
                c:"m = parseInt(me.getMonthNumber(results[{0}]), 10);\n", // get localised month number
                s:"(" + utilDate.monthNames.join("|") + ")"
            };
        },
        M: function() {
            for (var a = [], i = 0; i < 12; a.push(utilDate.getShortMonthName(i)), ++i); // get localised short month names
            return erajs.applyIf({
                s:"(" + a.join("|") + ")"
            }, utilDate.formatCodeToRegex("F"));
        },
        m: {
            g:1,
            c:"m = parseInt(results[{0}], 10) - 1;\n",
            s:"(1[0-2]|0[1-9])" // month number with leading zeros (01 - 12)
        },
        n: {
            g:1,
            c:"m = parseInt(results[{0}], 10) - 1;\n",
            s:"(1[0-2]|[1-9])" // month number without leading zeros (1 - 12)
        },
        t: {
            g:0,
            c:null,
            s:"(?:\\d{2})" // no. of days in the month (28 - 31)
        },
        L: {
            g:0,
            c:null,
            s:"(?:1|0)"
        },
        o: { 
            g: 1,
            c: "y = parseInt(results[{0}], 10);\n",
            s: "(\\d{4})" // ISO-8601 year number (with leading zero)

        },
        Y: {
            g:1,
            c:"y = parseInt(results[{0}], 10);\n",
            s:"(\\d{4})" // 4-digit year
        },
        y: {
            g:1,
            c:"var ty = parseInt(results[{0}], 10);\n"
                + "y = ty > me.y2kYear ? 1900 + ty : 2000 + ty;\n", // 2-digit year
            s:"(\\d{1,2})"
        },
        /*
         * In the am/pm parsing routines, we allow both upper and lower case
         * even though it doesn't exactly match the spec. It gives much more flexibility
         * in being able to specify case insensitive regexes.
         */
        //<locale type="object" property="parseCodes">
        a: {
            g:1,
            c:"if (/(am)/i.test(results[{0}])) {\n"
                + "if (!h || h == 12) { h = 0; }\n"
                + "} else { if (!h || h < 12) { h = (h || 0) + 12; }}",
            s:"(am|pm|AM|PM)",
            calcAtEnd: true
        },
        //</locale>
        //<locale type="object" property="parseCodes">
        A: {
            g:1,
            c:"if (/(am)/i.test(results[{0}])) {\n"
                + "if (!h || h == 12) { h = 0; }\n"
                + "} else { if (!h || h < 12) { h = (h || 0) + 12; }}",
            s:"(AM|PM|am|pm)",
            calcAtEnd: true
        },
        //</locale>
        g: {
            g:1,
            c:"h = parseInt(results[{0}], 10);\n",
            s:"(1[0-2]|[0-9])" //  12-hr format of an hour without leading zeroes (1 - 12)
        },
        G: {
            g:1,
            c:"h = parseInt(results[{0}], 10);\n",
            s:"(2[0-3]|1[0-9]|[0-9])" // 24-hr format of an hour without leading zeroes (0 - 23)
        },
        h: {
            g:1,
            c:"h = parseInt(results[{0}], 10);\n",
            s:"(1[0-2]|0[1-9])" //  12-hr format of an hour with leading zeroes (01 - 12)
        },
        H: {
            g:1,
            c:"h = parseInt(results[{0}], 10);\n",
            s:"(2[0-3]|[0-1][0-9])" //  24-hr format of an hour with leading zeroes (00 - 23)
        },
        i: {
            g:1,
            c:"i = parseInt(results[{0}], 10);\n",
            s:"([0-5][0-9])" // minutes with leading zeros (00 - 59)
        },
        s: {
            g:1,
            c:"s = parseInt(results[{0}], 10);\n",
            s:"([0-5][0-9])" // seconds with leading zeros (00 - 59)
        },
        u: {
            g:1,
            c:"ms = results[{0}]; ms = parseInt(ms, 10)/Math.pow(10, ms.length - 3);\n",
            s:"(\\d+)" // decimal fraction of a second (minimum = 1 digit, maximum = unlimited)
        },
        O: {
            g:1,
            c:[
                "o = results[{0}];",
                "var sn = o.substring(0,1),", // get + / - sign
                    "hr = o.substring(1,3)*1 + Math.floor(o.substring(3,5) / 60),", // get hours (performs minutes-to-hour conversion also, just in case)
                    "mn = o.substring(3,5) % 60;", // get minutes
                "o = ((-12 <= (hr*60 + mn)/60) && ((hr*60 + mn)/60 <= 14))? (sn + erajs.String.leftPad(hr, 2, '0') + erajs.String.leftPad(mn, 2, '0')) : null;\n" // -12hrs <= GMT offset <= 14hrs
            ].join("\n"),
            s: "([+-]\\d{4})" // GMT offset in hrs and mins
        },
        P: {
            g:1,
            c:[
                "o = results[{0}];",
                "var sn = o.substring(0,1),", // get + / - sign
                    "hr = o.substring(1,3)*1 + Math.floor(o.substring(4,6) / 60),", // get hours (performs minutes-to-hour conversion also, just in case)
                    "mn = o.substring(4,6) % 60;", // get minutes
                "o = ((-12 <= (hr*60 + mn)/60) && ((hr*60 + mn)/60 <= 14))? (sn + erajs.String.leftPad(hr, 2, '0') + erajs.String.leftPad(mn, 2, '0')) : null;\n" // -12hrs <= GMT offset <= 14hrs
            ].join("\n"),
            s: "([+-]\\d{2}:\\d{2})" // GMT offset in hrs and mins (with colon separator)
        },
        T: {
            g:0,
            c:null,
            s:"[A-Z]{1,5}" // timezone abbrev. may be between 1 - 5 chars
        },
        Z: {
            g:1,
            c:"zz = results[{0}] * 1;\n" // -43200 <= UTC offset <= 50400
                  + "zz = (-43200 <= zz && zz <= 50400)? zz : null;\n",
            s:"([+-]?\\d{1,5})" // leading '+' sign is optional for UTC offset
        },
        c: function() {
            var calc = [],
                arr = [
                    utilDate.formatCodeToRegex("Y", 1), // year
                    utilDate.formatCodeToRegex("m", 2), // month
                    utilDate.formatCodeToRegex("d", 3), // day
                    utilDate.formatCodeToRegex("H", 4), // hour
                    utilDate.formatCodeToRegex("i", 5), // minute
                    utilDate.formatCodeToRegex("s", 6), // second
                    {c:"ms = results[7] || '0'; ms = parseInt(ms, 10)/Math.pow(10, ms.length - 3);\n"}, // decimal fraction of a second (minimum = 1 digit, maximum = unlimited)
                    {c:[ // allow either "Z" (i.e. UTC) or "-0530" or "+08:00" (i.e. UTC offset) timezone delimiters. assumes local timezone if no timezone is specified
                        "if(results[8]) {", // timezone specified
                            "if(results[8] == 'Z'){",
                                "zz = 0;", // UTC
                            "}else if (results[8].indexOf(':') > -1){",
                                utilDate.formatCodeToRegex("P", 8).c, // timezone offset with colon separator
                            "}else{",
                                utilDate.formatCodeToRegex("O", 8).c, // timezone offset without colon separator
                            "}",
                        "}"
                    ].join('\n')}
                ],
                i,
                l;

            for (i = 0, l = arr.length; i < l; ++i) {
                calc.push(arr[i].c);
            }

            return {
                g:1,
                c:calc.join(""),
                s:[
                    arr[0].s, // year (required)
                    "(?:", "-", arr[1].s, // month (optional)
                        "(?:", "-", arr[2].s, // day (optional)
                            "(?:",
                                "(?:T| )?", // time delimiter -- either a "T" or a single blank space
                                arr[3].s, ":", arr[4].s,  // hour AND minute, delimited by a single colon (optional). MUST be preceded by either a "T" or a single blank space
                                "(?::", arr[5].s, ")?", // seconds (optional)
                                "(?:(?:\\.|,)(\\d+))?", // decimal fraction of a second (e.g. ",12345" or ".98765") (optional)
                                "(Z|(?:[-+]\\d{2}(?::)?\\d{2}))?", // "Z" (UTC) or "-0530" (UTC offset without colon delimiter) or "+08:00" (UTC offset with colon delimiter) (optional)
                            ")?",
                        ")?",
                    ")?"
                ].join("")
            };
        },
        U: {
            g:1,
            c:"u = parseInt(results[{0}], 10);\n",
            s:"(-?\\d+)" // leading minus sign indicates seconds before UNIX epoch
        }
    },

    //Old erajs.Date prototype methods.
    // private
    dateFormat: function(date, format) {
        return utilDate.format(date, format);
    },

    /**
     * 通过比较两个日期对象的值来判断两个日期是否相等.
     * @param {Date} date1
     * @param {Date} date2
     * @return {Boolean} 如果日期值相等则返回true.
     */
    isEqual: function(date1, date2) {
        // check we have 2 date objects
        if (date1 && date2) {
            return (date1.getTime() === date2.getTime());
        }
        // one or both isn't a date, only equal if both are falsey
        return !(date1 || date2);
    },

    /**
     * 根据指定的格式将对象格式化.
     * @param {Date} date 需要格式字符串格式化的日期对象.
     * @param {String} format 日期格式字符串.
     * @return {String} 格式化后的日期对象或''（如果日期参数不是一个 JavaScript 日期对象）.
     */
    format: function(date, format) {
        var formatFunctions = utilDate.formatFunctions;

        if (!erajs.isDate(date)) {
            return '';
        }

        if (formatFunctions[format] == null) {
            utilDate.createFormat(format);
        }

        return formatFunctions[format].call(date) + '';
    },

    /**
     * 返回当前日期的时区缩写(等同于指定输出格式“T”).
     *
     * 注意:
     * 对于不同的浏览器(例如 FF 与 IE)和系统区域设置(例如 IE 设置为亚洲与 IE 设置为美国),
     * 通过 javascript 对象的 tostring() 方法返回的日期字符串也会发生变化。
     * 对于一个给定的日期字符串，例如 "Thu Oct 25 2007 22:55:35 GMT+0800 (Malay Peninsula Standard Time)",
     * getTimezone() 方法首先尝试从一对括号之间获取时区缩写 (可能存在或不存在)，
     * 如果获取不成功它将从日期字符串的 GMT 偏移量部分获取时区缩写。
     *
     * @param {Date} date 日期对象.
     * @return {String} 时区名称的缩写(e.g. 'CST', 'PDT', 'EDT', 'MPST' ...).
     */
    getTimezone : function(date) {
        // the following list shows the differences between date strings from different browsers on a WinXP SP2 machine from an Asian locale:
        //
        // Operajs  : "Thu, 25 Oct 2007 22:53:45 GMT+0800" -- shortest (weirdest) date string of the lot
        // Safari : "Thu Oct 25 2007 22:55:35 GMT+0800 (Malay Peninsula Standard Time)" -- value in parentheses always gives the correct timezone (same as FF)
        // FF     : "Thu Oct 25 2007 22:55:35 GMT+0800 (Malay Peninsula Standard Time)" -- value in parentheses always gives the correct timezone
        // IE     : "Thu Oct 25 22:54:35 UTC+0800 2007" -- (Asian system setting) look for 3-4 letter timezone abbrev
        // IE     : "Thu Oct 25 17:06:37 PDT 2007" -- (American system setting) look for 3-4 letter timezone abbrev
        //
        // this crazy regex attempts to guess the correct timezone abbreviation despite these differences.
        // step 1: (?:\((.*)\) -- find timezone in parentheses
        // step 2: ([A-Z]{1,4})(?:[\-+][0-9]{4})?(?: -?\d+)?) -- if nothing was found in step 1, find timezone from timezone offset portion of date string
        // step 3: remove all non uppercase characters found in step 1 and 2
        return date.toString().replace(/^.* (?:\((.*)\)|([A-Z]{1,5})(?:[\-+][0-9]{4})?(?: -?\d+)?)$/, "$1$2").replace(/[^A-Z]/g, "");
    },

    /**
     * 返回 GMT 到当前日期的偏移量(等同于指定输出格式“O”).
     * @param {Date} date 日期对象
     * @param {Boolean} [colon=false] (可选) 如果为 true，用冒号分隔小时数和分钟数(默认为 false).
     * @return {String} 以“+”或“-”加上4位字符表示的偏移量（例如：“-0600”）.
     */
    getGMTOffset : function(date, colon) {
        var offset = date.getTimezoneOffset();
        return (offset > 0 ? "-" : "+")
            + erajs.String.leftPad(Math.floor(Math.abs(offset) / 60), 2, "0")
            + (colon ? ":" : "")
            + erajs.String.leftPad(Math.abs(offset % 60), 2, "0");
    },

    /**
     * 返回当前年份中天数的数值，已经根据闰年调整过.
     * @param {Date} date 日期对象
     * @return {Number} 0 到 365（闰年时为 366）.
     */
    getDayOfYear: function(date) {
        var num = 0,
            d = erajs.Date.clone(date),
            m = date.getMonth(),
            i;

        for (i = 0, d.setDate(1), d.setMonth(0); i < m; d.setMonth(++i)) {
            num += utilDate.getDaysInMonth(d);
        }
        return num + date.getDate() - 1;
    },

    /**
     * 从年份中获取 ISO-8601 标准的星期数.
     * （等同于指定输出格式“W”，如果没有补0）.
     * @param {Date} date 日期对象
     * @return {Number} 返回范围从 1 到 53 中.
     * @method
     */
    getWeekOfYear : (function() {
        // adapted from http://www.merlyn.demon.co.uk/weekcalc.htm
        var ms1d = 864e5, // milliseconds in a day
            ms7d = 7 * ms1d; // milliseconds in a week

        return function(date) { // return a closure so constants get calculated only once
            var DC3 = Date.UTC(date.getFullYear(), date.getMonth(), date.getDate() + 3) / ms1d, // an Absolute Day Number
                AWN = Math.floor(DC3 / 7), // an Absolute Week Number
                Wyr = new Date(AWN * ms7d).getUTCFullYear();

            return AWN - Math.floor(Date.UTC(Wyr, 0, 7) / ms7d) + 1;
        };
    }()),

    /**
     * 返回当前日期是否闰年.
     * @param {Date} date 日期对象
     * @return {Boolean} 如果当前日期属于闰年，则返回true，否则返回false.
     */
    isLeapYear : function(date) {
        var year = date.getFullYear();
        return !!((year & 3) == 0 && (year % 100 || (year % 400 == 0 && year)));
    },

    /**
     * 返回当前月份第一天的数值，已经根据闰年调整过.
     * 返回值为以数字表示的一周中的第几天（0～6）可以与数组 {@link #monthNames}
     * 一起使用来表示当天的星期.
     *
     * 示例:
     *
     *     var dt = new Date('1/10/2007'),
     *         firstDay = erajs.Date.getFirstDayOfMonth(dt);
     *     console.log(erajs.Date.dayNames[firstDay]); // output: 'Monday'
     *
     * @param {Date} date 日期对象
     * @return {Number} 一周中的天数（0～6）.
     */
    getFirstDayOfMonth : function(date) {
        var day = (date.getDay() - (date.getDate() - 1)) % 7;
        return (day < 0) ? (day + 7) : day;
    },

    /**
     * 返回当前月份最后一天的数值，已经根据闰年调整过.
     * 返回值为以数字表示的一周中的第几天（0～6）可以与数组 {@link #monthNames}
     * 一起使用来表示当天的星期.
     *
     *  示例:
     *
     *     var dt = new Date('1/10/2007'),
     *         lastDay = erajs.Date.getLastDayOfMonth(dt);
     *     console.log(erajs.Date.dayNames[lastDay]); // 输出: 'Wednesday'
     *
     * @param {Date} date 日期对象
     * @return {Number} 一周中的天数（0～6）.
     */
    getLastDayOfMonth : function(date) {
        return utilDate.getLastDateOfMonth(date).getDay();
    },


    /**
     * 返回当前月份中第一天的日期对象.
     * @param {Date} date 日期对象
     * @return {Date}
     */
    getFirstDateOfMonth : function(date) {
        return new Date(date.getFullYear(), date.getMonth(), 1);
    },

    /**
     * 返回当前月份中最后一天的日期对象.
     * @param {Date} date 日期对象
     * @return {Date}
     */
    getLastDateOfMonth : function(date) {
        return new Date(date.getFullYear(), date.getMonth(), utilDate.getDaysInMonth(date));
    },

    /**
     * 返回当前月份中天数的数值，已经根据闰年调整过.
     * @param {Date} date 日期对象
     * @return {Number} 月份的天数.
     * @method
     */
    getDaysInMonth: (function() {
        var daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

        return function(date) { // return a closure for efficiency
            var m = date.getMonth();

            return m == 1 && utilDate.isLeapYear(date) ? 29 : daysInMonth[m];
        };
    }()),

    //<locale type="function">
    /**
     * 返回当天的英文单词的后缀（等同于指定输出格式“S”）.
     * @param {Date} date 日期对象
     * @return {String} 'st, 'nd', 'rd' or 'th'.
     */
    getSuffix : function(date) {
        switch (date.getDate()) {
            case 1:
            case 21:
            case 31:
                return "st";
            case 2:
            case 22:
                return "nd";
            case 3:
            case 23:
                return "rd";
            default:
                return "th";
        }
    },
    //</locale>

    /**
     * 创建并返回一个具有完全相同的日期值作为调用实例的新的日期实例。
     * 日期复制并按引用传递，所以如果复制的日期修改变量后， 原变量也将更改。
     * 当意图是要创建一个新的变量，并将不会修改原始实例时， 您应该创建一个克隆。
     *
     * 正确克隆一个日期的示例:
     *
     *     //wrong way:
     *     var orig = new Date('10/1/2006');
     *     var copy = orig;
     *     copy.setDate(5);
     *     console.log(orig);  // 返回 'Thu Oct 05 2006'!
     *
     *     //correct way:
     *     var orig = new Date('10/1/2006'),
     *         copy = erajs.Date.clone(orig);
     *     copy.setDate(5);
     *     console.log(orig);  // 返回 'Thu Oct 01 2006'
     *
     * @param {Date} date 日期对象.
     * @return {Date} 新的日期实例.
     */
    clone : function(date) {
        return new Date(date.getTime());
    },

    /**
     * 检查指定日期是否受夏令时(DST)影响。
     *
     * @param {Date} date 日期对象
     * @return {Boolean} 如果当前日期受夏令时(DST)影响，则返回true.
     */
    isDST : function(date) {
        // adapted from http://sencha.com/forum/showthread.php?p=247172#post247172
        // courtesy of @geoffrey.mcgill
        return new Date(date.getFullYear(), 0, 1).getTimezoneOffset() != date.getTimezoneOffset();
    },

    /**
     * 尝试通过将时间设置为午夜的同一天，在适用的情况自动调整为夏令时 (DST) 清除此日期的所有时间信息。
     * (注意: 浏览器的主机操作系统的 DST 时区信息被假定为最新)
     *
     * @param {Date} date 日期对象
     * @param {Boolean} [clone=false] 值为“true”时创建一个当前日期对象的克隆，清除克隆对象的时间信息后返回（默认为 false）.
     * @return {Date} 实例本身或实例的克隆.
     */
    clearTime : function(date, clone) {
        if (clone) {
            return erajs.Date.clearTime(erajs.Date.clone(date));
        }

        // get current date before clearing time
        var d = date.getDate(),
            hr,
            c;

        // clear time
        date.setHours(0);
        date.setMinutes(0);
        date.setSeconds(0);
        date.setMilliseconds(0);

        if (date.getDate() != d) { // account for DST (i.e. day of month changed when setting hour = 0)
            // note: DST adjustments are assumed to occur in multiples of 1 hour (this is almost always the case)
            // refer to http://www.timeanddate.com/time/aboutdst.html for the (rare) exceptions to this rule

            // increment hour until cloned date == current date
            for (hr = 1, c = utilDate.add(date, erajs.Date.HOUR, hr); c.getDate() != d; hr++, c = utilDate.add(date, erajs.Date.HOUR, hr));

            date.setDate(d);
            date.setHours(c.getHours());
        }

        return date;
    },

    /**
     * 提供执行基本日期运算的简便方法.
     * 此方法不修改被调用的日期实例 - 它将创建并返回包含生成的日期值的一个新的日期对象实例。
     *
     * 示例:
     *
     *     // 基本用法:
     *     var dt = erajs.Date.add(new Date('10/29/2006'), erajs.Date.DAY, 5);
     *     console.log(dt); // 返回 'Fri Nov 03 2006 00:00:00'
     *
     *     // 负数将按照减法运算:
     *     var dt2 = erajs.Date.add(new Date('10/1/2006'), erajs.Date.DAY, -5);
     *     console.log(dt2); // 返回 'Tue Sep 26 2006 00:00:00'
     *
     *      // 可以使用十进制值:
     *     var dt3 = erajs.Date.add(new Date('10/1/2006'), erajs.Date.DAY, 1.25);
     *     console.log(dt3); // 返回 'Mon Oct 02 2006 06:00:00'
     *
     * @param {Date} date 被修改的日期对象
     * @param {String} 一个有效的日期间隔枚举值.
     * @param {Number} value 向当前日期上增加的总数.
     * @return {Date} 新的日期对象实例.
     */
    add : function(date, interval, value) {
        var d = erajs.Date.clone(date),
            Date = erajs.Date,
            day, decimalValue, base = 0;
        if (!interval || value === 0) {
            return d;
        }

        decimalValue = value - parseInt(value, 10);
        value = parseInt(value, 10);

        if (value) {
            switch(interval.toLowerCase()) {
                // See EXTJSIV-7418. We use setTime() here to deal with issues related to
                // the switchover that occurs when changing to daylight savings and vice
                // versa. setTime() handles this correctly where setHour/Minute/Second/Millisecond
                // do not. Let's assume the DST change occurs at 2am and we're incrementing using add
                // for 15 minutes at time. When entering DST, we should see:
                // 01:30am
                // 01:45am
                // 03:00am // skip 2am because the hour does not exist
                // ...
                // Similarly, leaving DST, we should see:
                // 01:30am
                // 01:45am
                // 01:00am // repeat 1am because that's the change over
                // 01:30am
                // 01:45am
                // 02:00am
                // ....
                // 
                case erajs.Date.MILLI:
                    d.setTime(d.getTime() + value);
                    break;
                case erajs.Date.SECOND:
                    d.setTime(d.getTime() + value * 1000);
                    break;
                case erajs.Date.MINUTE:
                    d.setTime(d.getTime() + value * 60 * 1000);
                    break;
                case erajs.Date.HOUR:
                    d.setTime(d.getTime() + value * 60 * 60 * 1000);
                    break;
                case erajs.Date.DAY:
                    d.setDate(d.getDate() + value);
                    break;
                case erajs.Date.MONTH:
                    day = date.getDate();
                    if (day > 28) {
                        day = Math.min(day, erajs.Date.getLastDateOfMonth(erajs.Date.add(erajs.Date.getFirstDateOfMonth(date), erajs.Date.MONTH, value)).getDate());
                    }
                    d.setDate(day);
                    d.setMonth(date.getMonth() + value);
                    break;
                case erajs.Date.YEAR:
                    day = date.getDate();
                    if (day > 28) {
                        day = Math.min(day, erajs.Date.getLastDateOfMonth(erajs.Date.add(erajs.Date.getFirstDateOfMonth(date), erajs.Date.YEAR, value)).getDate());
                    }
                    d.setDate(day);
                    d.setFullYear(date.getFullYear() + value);
                    break;
            }
        }

        if (decimalValue) {
            switch (interval.toLowerCase()) {
                case erajs.Date.MILLI:    base = 1;               break;
                case erajs.Date.SECOND:   base = 1000;            break;
                case erajs.Date.MINUTE:   base = 1000*60;         break;
                case erajs.Date.HOUR:     base = 1000*60*60;      break;
                case erajs.Date.DAY:      base = 1000*60*60*24;   break;

                case erajs.Date.MONTH:
                    day = utilDate.getDaysInMonth(d);
                    base = 1000*60*60*24*day;
                    break;

                case erajs.Date.YEAR:
                    day = (utilDate.isLeapYear(d) ? 366 : 365);
                    base = 1000*60*60*24*day;
                    break;
            }
            if (base) {
                d.setTime(d.getTime() + base * decimalValue); 
            }
        }

        return d;
    },
    
    /**
     * 提供方法用来执行日期的基本算法。
     * 该方法不会修改被调用的日期。它返回一个新的日期实例。
     * 
     * 示例:
     *
     *     // 基本用法:
     *     var dt = erajs.Date.subtract(new Date('10/29/2006'), erajs.Date.DAY, 5);
     *     console.log(dt); // 返回 'Tue Oct 24 2006 00:00:00'
     *
     *     // 负数将按照减法运算:
     *     var dt2 = erajs.Date.subtract(new Date('10/1/2006'), erajs.Date.DAY, -5);
     *     console.log(dt2); // 返回 'Fri Oct 6 2006 00:00:00'
     *
     *      // 十进制运算:
     *     var dt3 = erajs.Date.subtract(new Date('10/1/2006'), erajs.Date.DAY, 1.25);
     *     console.log(dt3); // 返回 'Fri Sep 29 2006 06:00:00'
     * 
     * @param {Date} date 被修改的日期
     * @param {String} interval 一个有效的日期间隔枚举值.
     * @param {Number} value 当前日期减去的数.
     * @return {Date} 新的日期实例.
     */
    subtract: function(date, interval, value){
        return utilDate.add(date, interval, -value);
    },

    /**
     * 检查一个日期是否处在给定的开始日期和结束日期之间，包含这两个日期.
     * @param {Date} date 要检查的日期对象
     * @param {Date} start 开始日期对象
     * @param {Date} end 结束日期对象
     * @return {Boolean} 如果这个日期在给定的开始和结束日期之间（包含边界值）则返回true.
     */
    between : function(date, start, end) {
        var t = date.getTime();
        return start.getTime() <= t && t <= end.getTime();
    },

    //Maintains compatibility with old static and prototype window.Date methods.
    compat: function() {
        var nativeDate = window.Date,
            p,
            statics = ['useStrict', 'formatCodeToRegex', 'parseFunctions', 'parseRegexes', 'formatFunctions', 'y2kYear', 'MILLI', 'SECOND', 'MINUTE', 'HOUR', 'DAY', 'MONTH', 'YEAR', 'defaults', 'dayNames', 'monthNames', 'monthNumbers', 'getShortMonthName', 'getShortDayName', 'getMonthNumber', 'formatCodes', 'isValid', 'parseDate', 'getFormatCode', 'createFormat', 'createParser', 'parseCodes'],
            proto = ['dateFormat', 'format', 'getTimezone', 'getGMTOffset', 'getDayOfYear', 'getWeekOfYear', 'isLeapYear', 'getFirstDayOfMonth', 'getLastDayOfMonth', 'getDaysInMonth', 'getSuffix', 'clone', 'isDST', 'clearTime', 'add', 'between'],
            sLen    = statics.length,
            pLen    = proto.length,
            stat, prot, s;

        //Append statics
        for (s = 0; s < sLen; s++) {
            stat = statics[s];
            nativeDate[stat] = utilDate[stat];
        }

        //Append to prototype
        for (p = 0; p < pLen; p++) {
            prot = proto[p];
            nativeDate.prototype[prot] = function() {
                var args = Array.prototype.slice.call(arguments);
                args.unshift(this);
                return utilDate[prot].apply(utilDate, args);
            };
        }
    }
  });
};

erajs.Date.patterns = {
    ISO8601Long:"Y-m-d H:i:s",
    ISO8601Short:"Y-m-d",
    ShortDate: "n/j/Y",
    LongDate: "l, F d, Y",
    FullDateTime: "l, F d, Y g:i:s A",
    MonthDay: "F d",
    ShortTime: "g:i A",
    LongTime: "g:i:s A",
    SortableDateTime: "Y-m-d\\TH:i:s",
    UniversalSortableDateTime: "Y-m-d H:i:sO",
    YearMonth: "F, Y"
};

/**
 * Copyright (c) 2014 www.erajsyt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 */
// @tag foundation,core
// @require Class.js
// @define erajs.Manager
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.Manager
 *
 * 在整个框架中，erajs.Manager类管理着UI组件实例对象。
 * 我们可以通过{@link erajs#getCmp erajs.getCmp}获取组件对象。
 *
 * @singleton
 */

(function(alias, arraySlice, global){

    // Creates a constructor that has nothing extra in its scope chain.
    function makeCtor () {
        function constructor () {
            // Opera has some problems returning from a constructor when Dragonfly isn't running. The || null seems to
            // be sufficient to stop it misbehaving. Known to be required against 10.53, 11.51 and 11.61.
            return this.constructor.apply(this, arguments) || null;
        }
        return constructor;
    }

    var Manager = erajs.Manager = {

        typeName : 'xtype',

        uiNamespacePrefix : 'erajs.ui.',

        all : new erajs.util.HashMap(),

        types : {},

        /**
         * @private
         * Returns an item by id.
         * For additional details see {@link erajs.util.HashMap#get}.
         * @param {String} id The id of the item
         * @return {Object} The item, undefined if not found.
         */
        get : function(id) {
            return this.all.get(id);
        },

        /**
         * 注册实例对象.
         * @param {Object} 待注册的实例对象.
         */
        register: function(item) {
            //<debug>
            var all = this.all,
                key = all.getKey(item);

            if (all.containsKey(key)) {
              //  alert('Registering duplicate id "' + key + '" with this manager');
                return;
            }
            //</debug>
            this.all.add(item);
        },

        /**
         * 从管理类中删除实例对象.
         * @param {Object} 待删除的实例对象
         */
        unregister: function(item) {
            typeof item == 'string' ? this.all.removeAtKey(item) : this.all.remove(item);
        },

        /**
         * @private
         * Registers a new item constructor, keyed by a type key.
         * @param {String} type The mnemonic string by which the class may be looked up.
         * @param {Function} cls The new instance class.
         */
        registerType : function(type, cls) {
            cls[this.typeName] = type;
            if(!this.isRegistered(type)){
                this.types[type] = this.uiNamespacePrefix + erajs.String.capitalize(type);
            }
        },

        /**
         * @private
         * 检测组件类型是否已经注册.
         * @param {String} type 组件的xtype属性值
         * @return {Boolean} 组件类型是否已经注册.
         */
        isRegistered : function(type){
            return this.types[type] !== undefined;
        },

        /**
         * @private
         * Gets the number of items in the collection.
         * @return {Number} The number of items in the collection.
         */
        getCount: function(){
            return this.all.getCount();
        },

        /**
         * 实例化组件.
         * @returns {Object} 组件实例
         */
        instantiate : function(){
            var name = arguments[0],
                nameType = typeof name,
                s = arraySlice.call(arguments, 1),
                alias = name,
                possibleName, cls;

            if (nameType != 'function') {
                if (nameType != 'string' && s.length === 0) {
                    s = [name];
                    name = name.xclass;
                }
                //<debug error>
                if (typeof name != 'string' || name.length < 1) {
                    throw new Error("[erajs.create] Invalid class name or alias '" + name + "' specified, must be a non-empty string");
                }
                //</debug>
            }else{
                cls = name;
            }

            var xtype = name;
            if(xtype && erajs.isString(xtype))
                xtype = erajs.String.capitalize(xtype);

            if(!cls){
               cls = this.uiNamespacePrefix  + xtype;
            }

            var instantiate = eval('new ' + cls + '(arguments[1],arguments[2])');

            this.registerType(name,instantiate);
            var instantiateId = instantiate.id;
            if(!erajs.isEmpty(instantiateId)){
                this.register(instantiate);
            }

            //记录最后一个创建的window组件对象.
            if(xtype =="Window"){
                erajs.lastWindow = instantiate;
            }
            return instantiate;
        },

        /**
         * 判断是否已经实例化
         * @param {String} id 元素id
         * @returns {Boolean}
         */
        isInstantiate : function(id){
            var all = this.all;
            var is = all.containsKey(id);
            return is;
        },

        /**
         * 销毁实例。
         * @param {Object/String} instantiate
         */
        destroy : function(instantiate){
            this.unregister(instantiate);
        }
    };

    erajs.apply(erajs,{

        /**
         * 创建组件
         * @method
         * @member erajs
         * @method
         */
       create :  alias(Manager,'instantiate'),

        /**
         * @method
         * @member erajs
         * @inheritdoc erajs.Manager#destroy
         */
        destroy : alias(Manager,'destroy'),

        /**
         * @method
         * @member erajs
         * @inheritdoc erajs.Manager#isInstantiate
         */
        isInstantiate : alias(Manager,'isInstantiate'),

        /**
         * @method
         * @member erajs
         * @inheritdoc erajs.Manager#isRegistered
         */
        isRegistered : alias(Manager,'isRegistered'),

        /**
         * 通过id获取实例
         * @method
         * @member erajs
         * @param {String} id
         * @returns {Object} 组件实例
         */
        getCmp : function(id){
            return erajs.Manager.get(id);
        }
    });

}(erajs.Function.alias, Array.prototype.slice, erajs.global));
(function(){

    /**
     * extend plugin to set box model width
     */
    $.fn._outerWidth = function (width) {
        if (width == undefined) {
            if (this[0] == window) {
                return this.width() || document.body.clientWidth;
            }
            return this.outerWidth() || 0;
        }
        return this.each(function () {
            if ($._boxModel) {
                $(this).width(width - ($(this).outerWidth() - $(this).width()));
            } else {
                $(this).width(width);
            }
        });
    };

    /**
     * extend plugin to set box model height
     */
    $.fn._outerHeight = function (height) {
        if (height == undefined) {
            if (this[0] == window) {
                return this.height() || document.body.clientHeight;
            }
            return this.outerHeight() || 0;
        }
        return this.each(function () {
            if ($._boxModel) {
                $(this).height(height - ($(this).outerHeight() - $(this).height()));
            } else {
                $(this).height(height);
            }
        });
    };

    $.fn._scrollLeft = function (left) {
        if (left == undefined) {
            return this.scrollLeft();
        } else {
            return this.each(function () {
                $(this).scrollLeft(left)
            });
        }
    }

    $.fn._propAttr = $.fn.prop || $.fn.attr;

    /**
     * set or unset the fit property of parent container, return the width and height of parent container
     */
    $.fn._fit = function (fit) {
        fit = fit == undefined ? true : fit;
        var t = this[0];
        var p = (t.tagName == 'BODY' ? t : this.parent()[0]);
        if(!p) return;
        var fcount = p.fcount || 0;
        if (fit) {
            if (!t.fitted) {
                t.fitted = true;
                p.fcount = fcount + 1;
                $(p).addClass('panel-noscroll');
                if (p.tagName == 'BODY') {
                    $('html').addClass('panel-fit');
                }
            }
        } else {
            if (t.fitted) {
                t.fitted = false;
                p.fcount = fcount - 1;
                if (p.fcount == 0) {
                    $(p).removeClass('panel-noscroll');
                    if (p.tagName == 'BODY') {
                        $('html').removeClass('panel-fit');
                    }
                }
            }
        }
        return {
            width: $(p).width(),
            height: $(p).height()
        }
    }

    $.fn._size = function(options, parent){
        if (typeof options == 'string'){
            if (options == 'clear'){
                return this.each(function(){
                    $(this).css({width:'',minWidth:'',maxWidth:'',height:'',minHeight:'',maxHeight:''});
                });
            } else if (options == 'unfit'){
                return this.each(function(){
                    _fit(this, $(this).parent(), false);
                });
            } else {
                if (parent == undefined){
                    return _css(this[0], options);
                } else {
                    return this.each(function(){
                        _css(this, options, parent);
                    });
                }
            }
        } else {
            return this.each(function(){
                parent = parent || $(this).parent();
                $.extend(options, _fit(this, parent, options.fit)||{});
                var r1 = _setSize(this, 'width', parent, options);
                var r2 = _setSize(this, 'height', parent, options);
                if (r1 || r2){
                    $(this).addClass('erajs-fluid');
                } else {
                    $(this).removeClass('erajs-fluid');
                }
            });
        }

        function _fit(target, parent, fit){
            var t = $(target)[0];
            var p = parent[0];
            var fcount = p.fcount || 0;
            if (fit){
                if (!t.fitted){
                    t.fitted = true;
                    p.fcount = fcount + 1;
                    $(p).addClass('panel-noscroll');
                    if (p.tagName == 'BODY'){
                        $('html').addClass('panel-fit');
                    }
                }
                return {
                    width: ($(p).width()||1),
                    height: ($(p).height()||1)
                };
            } else {
                if (t.fitted){
                    t.fitted = false;
                    p.fcount = fcount - 1;
                    if (p.fcount == 0){
                        $(p).removeClass('panel-noscroll');
                        if (p.tagName == 'BODY'){
                            $('html').removeClass('panel-fit');
                        }
                    }
                }
                return false;
            }
        }
        function _setSize(target, property, parent, options){
            var t = $(target);
            var p = property;
            var p1 = p.substr(0,1).toUpperCase() + p.substr(1);
            var min = erajs.ui.parser.parseValue('min'+p1, options['min'+p1], parent);// || 0;
            var max = erajs.ui.parser.parseValue('max'+p1, options['max'+p1], parent);// || 99999;
            var val = erajs.ui.parser.parseValue(p, options[p], parent);
            var fluid = (String(options[p]||'').indexOf('%') >= 0 ? true : false);

            if (!isNaN(val)){
                var v = Math.min(Math.max(val, min||0), max||99999);
                if (!fluid){
                    options[p] = v;
                }
                t._size('min'+p1, '');
                t._size('max'+p1, '');
                t._size(p, v);
            } else {
                t._size(p, '');
                t._size('min'+p1, min);
                t._size('max'+p1, max);
            }
            return fluid || options.fit;
        }
        function _css(target, property, value){
            var t = $(target);
            if (value == undefined){
                value = parseInt(target.style[property]);
                if (isNaN(value)){return undefined;}
                if ($._boxModel){
                    value += getDeltaSize();
                }
                return value;
            } else if (value === ''){
                t.css(property, '');
            } else {
                if ($._boxModel){
                    value -= getDeltaSize();
                    if (value < 0){value = 0;}
                }
                t.css(property, value+'px');
            }
            function getDeltaSize(){
                if (property.toLowerCase().indexOf('width') >= 0){
                    return t.outerWidth() - t.width();
                } else {
                    return t.outerHeight() - t.height();
                }
            }
        }
    };

    $.fn.setValues = function(record){
        var form = this;
        for(var name in record){
            var val = record[name];
            //radio checkbox赋值.
            var rr = _checkField(name, val);
            if (!rr.length){
                //自定义UI组件赋值.
                var count = _loadOther(name, val);
                if (!count){
                    //基础类型赋值.
                    $('input[name="'+name+'"]', form).val(val);
                    $('textarea[name="'+name+'"]', form).val(val);
                    $('select[name="'+name+'"]', form).val(val);
                    $('span[initname="'+name + '"]',form).text(val);
                }
            }
            _loadCombo(name, val);
        }

        function _checkField(name, val){
            var rr = form.find('input[name="'+name+'"][type=radio], input[name="'+name+'"][type=checkbox]');
            rr._propAttr('checked', false);
            rr.each(function(){
                var f = $(this);
                if (f.val() == String(val) || $.inArray(f.val(), $.isArray(val)?val:[val]) >= 0){
                    f._propAttr('checked', true);
                }
            });
            return rr;
        }

        function _loadOther(name, val){
            var count = 0;
            var pp = ['numberbox','slider'];
            for(var i=0; i<pp.length; i++){
                var p = pp[i];
                var f = form.find('input['+p+'name="'+name+'"]');
                if (f.length){
                    var id = f.attr('id');
                    erajs.getCmp(id).setValue(val);
                    count += f.length;
                }
            }
            return count;
        }

        function _loadCombo(name, val){
            var cc = ['combobox','combotree','combogrid','datetimebox','datebox','combo'];
            var c = form.find('[comboname="' + name + '"]');
            if (c.length){
                for(var i=0; i<cc.length; i++){
                    var type = cc[i];
                    if (c.hasClass(type+'-f')){
                        var id = c.attr('id');
                        var obj = erajs.getCmp(id);
                        if(obj){
                            var multiple = obj.options.multiple;
                            if(multiple){
                                if(erajs.isString(val)){
                                    var separator = obj.options.separator;
                                    val = val.split(separator);
                                }
                                if(erajs.isArray(val)){
                                    obj.setValues(val);
                                }
                            }else{
                                obj.setValue(val);
                            }
                        }
                        return;
                    }
                }
            }
        }
    };

    $.fn.resetForm = function(){
        var form = this;
        form[0].reset();
        var t = form;
        var plugins = ['combo','combobox','combotree','combogrid','datebox','datetimebox','spinner','timespinner','numberbox','numberspinner','slider'];
        for(var i=0; i<plugins.length; i++){
            var plugin = plugins[i];
            var r = t.find('.'+plugin+'-f');
            if (r.length){
                var id = r.attr('id');
                erajs.getCmp(id).reset();
            }
        }
    };

    //todo file组件未clear
    $.fn.clearForm = function(){
        var form = this;
        $('input,select,textarea', form).each(function(){
            var t = this.type, tag = this.tagName.toLowerCase();
            if (t == 'text' || t == 'hidden' || t == 'password' || tag == 'textarea'){
                this.value = '';
            }else if (t == 'checkbox' || t == 'radio'){
                this.checked = false;
            } else if (tag == 'select'){
                this.selectedIndex = -1;
            }
        });

        var t = $(form);
        var plugins = ['combo','combobox','combotree','combogrid','slider'];
        for(var i=0; i<plugins.length; i++){
            var plugin = plugins[i];
            var r = t.find('.'+plugin+'-f');
            if (r.length){
                var id = r.attr('id');
                erajs.getCmp(id).clear();
            }
        }
    };


    /*
     Usage Note:
     -----------
     Do not use both ajaxSubmit and ajaxForm on the same form.  These
     functions are mutually exclusive.  Use ajaxSubmit if you want
     to bind your own submit handler to the form.  For example,

     $(document).ready(function() {
     $('#myForm').on('submit', function(e) {
     e.preventDefault(); // <-- important
     $(this).ajaxSubmit({
     target: '#output'
     });
     });
     });

     Use ajaxForm when you want the plugin to manage all the event binding
     for you.  For example,

     $(document).ready(function() {
     $('#myForm').ajaxForm({
     target: '#output'
     });
     });

     You can also use ajaxForm with delegation (requires jQuery v1.7+), so the
     form does not have to exist when you invoke ajaxForm:

     $('#myForm').ajaxForm({
     delegation: true,
     target: '#output'
     });

     When using ajaxForm, the ajaxSubmit function will be invoked for you
     at the appropriate time.
     */

    /**
     * Feature detection
     */
    var feature = {};
    feature.fileapi = $("<input type='file'/>").get(0).files !== undefined;
    feature.formdata = window.FormData !== undefined;

    var hasProp = !!$.fn.prop;

    // attr2 uses prop when it can but checks the return type for
    // an expected string.  this accounts for the case where a form
    // contains inputs with names like "action" or "method"; in those
    // cases "prop" returns the element
    $.fn.attr2 = function() {
        if ( ! hasProp ) {
            return this.attr.apply(this, arguments);
        }
        var val = this.prop.apply(this, arguments);
        if ( ( val && val.jquery ) || typeof val === 'string' ) {
            return val;
        }
        return this.attr.apply(this, arguments);
    };

    /**
     * ajaxSubmit() provides a mechanism for immediately submitting
     * an HTML form using AJAX.
     */
    $.fn.ajaxSubmit = function(options) {
        /*jshint scripturl:true */

        // fast fail if nothing selected (http://dev.jquery.com/ticket/2752)
        if (!this.length) {
            log('ajaxSubmit: skipping submit process - no element selected');
            return this;
        }

        var method, action, url, $form = this;

        if (typeof options == 'function') {
            options = { success: options };
        }
        else if ( options === undefined ) {
            options = {};
        }

        method = options.type || this.attr2('method');
        action = options.url  || this.attr2('action');

        url = (typeof action === 'string') ? $.trim(action) : '';
        url = url || window.location.href || '';
        if (url) {
            // clean url (don't include hash vaue)
            url = (url.match(/^([^#]+)/)||[])[1];
        }

        options = $.extend(true, {
            url:  url,
            success: $.ajaxSettings.success,
            type: method || $.ajaxSettings.type,
            iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank'
        }, options);

        // hook for manipulating the form data before it is extracted;
        // convenient for use with rich editors like tinyMCE or FCKEditor
        var veto = {};
        this.trigger('form-pre-serialize', [this, options, veto]);
        if (veto.veto) {
            log('ajaxSubmit: submit vetoed via form-pre-serialize trigger');
            return this;
        }

        // provide opportunity to alter form data before it is serialized
        if (options.beforeSerialize && options.beforeSerialize(this, options) === false) {
            log('ajaxSubmit: submit aborted via beforeSerialize callback');
            return this;
        }

        var traditional = options.traditional;
        if ( traditional === undefined ) {
            traditional = $.ajaxSettings.traditional;
        }

        var elements = [];
        var qx, a = this.formToArray(options.semantic, elements);
        if (options.data) {
            options.extraData = options.data;
            qx = $.param(options.data, traditional);
        }

        // give pre-submit callback an opportunity to abort the submit
        if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) {
            log('ajaxSubmit: submit aborted via beforeSubmit callback');
            return this;
        }

        // fire vetoable 'validate' event
        this.trigger('form-submit-validate', [a, this, options, veto]);
        if (veto.veto) {
            log('ajaxSubmit: submit vetoed via form-submit-validate trigger');
            return this;
        }

        var q = $.param(a, traditional);
        if (qx) {
            q = ( q ? (q + '&' + qx) : qx );
        }
        if (options.type.toUpperCase() == 'GET') {
            options.url += (options.url.indexOf('?') >= 0 ? '&' : '?') + q;
            options.data = null;  // data is null for 'get'
        }
        else {
            options.data = q; // data is the query string for 'post'
        }

        var callbacks = [];
        if (options.resetForm) {
            callbacks.push(function() { $form.resetForm(); });
        }
        if (options.clearForm) {
            callbacks.push(function() { $form.clearForm(options.includeHidden); });
        }

        // perform a load on the target only if dataType is not provided
        if (!options.dataType && options.target) {
            var oldSuccess = options.success || function(){};
            callbacks.push(function(data) {
                var fn = options.replaceTarget ? 'replaceWith' : 'html';
                $(options.target)[fn](data).each(oldSuccess, arguments);
            });
        }
        else if (options.success) {
            callbacks.push(options.success);
        }

        options.success = function(data, status, xhr) { // jQuery 1.4+ passes xhr as 3rd arg
            var context = options.context || this ;    // jQuery 1.4+ supports scope context
            for (var i=0, max=callbacks.length; i < max; i++) {
                callbacks[i].apply(context, [data, status, xhr || $form, $form]);
            }
        };

        if (options.error) {
            var oldError = options.error;
            options.error = function(xhr, status, error) {
                var context = options.context || this;
                oldError.apply(context, [xhr, status, error, $form]);
            };
        }

        if (options.complete) {
            var oldComplete = options.complete;
            options.complete = function(xhr, status) {
                var context = options.context || this;
                oldComplete.apply(context, [xhr, status, $form]);
            };
        }

        // are there files to upload?

        // [value] (issue #113), also see comment:
        // https://github.com/malsup/form/commit/588306aedba1de01388032d5f42a60159eea9228#commitcomment-2180219
        var fileInputs = $('input[type=file]:enabled', this).filter(function() { return $(this).val() !== ''; });

        var hasFileInputs = fileInputs.length > 0;
        var mp = 'multipart/form-data';
        var multipart = ($form.attr('enctype') == mp || $form.attr('encoding') == mp);

        var fileAPI = feature.fileapi && feature.formdata;
        log("fileAPI :" + fileAPI);
        var shouldUseFrame = (hasFileInputs || multipart) && !fileAPI;

        var jqxhr;

        // options.iframe allows user to force iframe mode
        // 06-NOV-09: now defaulting to iframe mode if file input is detected
        if (options.iframe !== false && (options.iframe || shouldUseFrame)) {
            // hack to fix Safari hang (thanks to Tim Molendijk for this)
            // see:  http://groups.google.com/group/jquery-dev/browse_thread/thread/36395b7ab510dd5d
            if (options.closeKeepAlive) {
                $.get(options.closeKeepAlive, function() {
                    jqxhr = fileUploadIframe(a);
                });
            }
            else {
                jqxhr = fileUploadIframe(a);
            }
        }
        else if ((hasFileInputs || multipart) && fileAPI) {
            jqxhr = fileUploadXhr(a);
        }
        else {
            jqxhr = $.ajax(options);
        }

        $form.removeData('jqxhr').data('jqxhr', jqxhr);

        // clear element array
        for (var k=0; k < elements.length; k++) {
            elements[k] = null;
        }

        // fire 'notify' event
        this.trigger('form-submit-notify', [this, options]);
        return this;

        // utility fn for deep serialization
        function deepSerialize(extraData){
            var serialized = $.param(extraData, options.traditional).split('&');
            var len = serialized.length;
            var result = [];
            var i, part;
            for (i=0; i < len; i++) {
                // #252; undo param space replacement
                serialized[i] = serialized[i].replace(/\+/g,' ');
                part = serialized[i].split('=');
                // #278; use array instead of object storage, favoring array serializations
                result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]);
            }
            return result;
        }

        // XMLHttpRequest Level 2 file uploads (big hat tip to francois2metz)
        function fileUploadXhr(a) {
            var formdata = new FormData();

            for (var i=0; i < a.length; i++) {
                formdata.append(a[i].name, a[i].value);
            }

            if (options.extraData) {
                var serializedData = deepSerialize(options.extraData);
                for (i=0; i < serializedData.length; i++) {
                    if (serializedData[i]) {
                        formdata.append(serializedData[i][0], serializedData[i][1]);
                    }
                }
            }

            options.data = null;

            var s = $.extend(true, {}, $.ajaxSettings, options, {
                contentType: false,
                processData: false,
                cache: false,
                type: method || 'POST'
            });

            if (options.uploadProgress) {
                // workaround because jqXHR does not expose upload property
                s.xhr = function() {
                    var xhr = $.ajaxSettings.xhr();
                    if (xhr.upload) {
                        xhr.upload.addEventListener('progress', function(event) {
                            var percent = 0;
                            var position = event.loaded || event.position; /*event.position is deprecated*/
                            var total = event.total;
                            if (event.lengthComputable) {
                                percent = Math.ceil(position / total * 100);
                            }
                            options.uploadProgress(event, position, total, percent);
                        }, false);
                    }
                    return xhr;
                };
            }

            s.data = null;
            var beforeSend = s.beforeSend;
            s.beforeSend = function(xhr, o) {
                //Send FormData() provided by user
                if (options.formData) {
                    o.data = options.formData;
                }
                else {
                    o.data = formdata;
                }
                if(beforeSend) {
                    beforeSend.call(this, xhr, o);
                }
            };
            return $.ajax(s);
        }

        // private function for handling file uploads (hat tip to YAHOO!)
        function fileUploadIframe(a) {
            var form = $form[0], el, i, s, g, id, $io, io, xhr, sub, n, timedOut, timeoutHandle;
            var deferred = $.Deferred();

            // #341
            deferred.abort = function(status) {
                xhr.abort(status);
            };

            if (a) {
                // ensure that every serialized input is still enabled
                for (i=0; i < elements.length; i++) {
                    el = $(elements[i]);
                    if ( hasProp ) {
                        el.prop('disabled', false);
                    }
                    else {
                        el.removeAttr('disabled');
                    }
                }
            }

            s = $.extend(true, {}, $.ajaxSettings, options);
            s.context = s.context || s;
            id = 'jqFormIO' + (new Date().getTime());
            if (s.iframeTarget) {
                $io = $(s.iframeTarget);
                n = $io.attr2('name');
                if (!n) {
                    $io.attr2('name', id);
                }
                else {
                    id = n;
                }
            }
            else {
                $io = $('<iframe name="' + id + '" src="'+ s.iframeSrc +'" />');
                $io.css({ position: 'absolute', top: '-1000px', left: '-1000px' });
            }
            io = $io[0];


            xhr = { // mock object
                aborted: 0,
                responseText: null,
                responseXML: null,
                status: 0,
                statusText: 'n/a',
                getAllResponseHeaders: function() {},
                getResponseHeader: function() {},
                setRequestHeader: function() {},
                abort: function(status) {
                    var e = (status === 'timeout' ? 'timeout' : 'aborted');
                    log('aborting upload... ' + e);
                    this.aborted = 1;

                    try { // #214, #257
                        if (io.contentWindow.document.execCommand) {
                            io.contentWindow.document.execCommand('Stop');
                        }
                    }
                    catch(ignore) {}

                    $io.attr('src', s.iframeSrc); // abort op in progress
                    xhr.error = e;
                    if (s.error) {
                        s.error.call(s.context, xhr, e, status);
                    }
                    if (g) {
                        $.event.trigger("ajaxError", [xhr, s, e]);
                    }
                    if (s.complete) {
                        s.complete.call(s.context, xhr, e);
                    }
                }
            };

            g = s.global;
            // trigger ajax global events so that activity/block indicators work like normal
            if (g && 0 === $.active++) {
                $.event.trigger("ajaxStart");
            }
            if (g) {
                $.event.trigger("ajaxSend", [xhr, s]);
            }

            if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) {
                if (s.global) {
                    $.active--;
                }
                deferred.reject();
                return deferred;
            }
            if (xhr.aborted) {
                deferred.reject();
                return deferred;
            }

            // add submitting element to data if we know it
            sub = form.clk;
            if (sub) {
                n = sub.name;
                if (n && !sub.disabled) {
                    s.extraData = s.extraData || {};
                    s.extraData[n] = sub.value;
                    if (sub.type == "image") {
                        s.extraData[n+'.x'] = form.clk_x;
                        s.extraData[n+'.y'] = form.clk_y;
                    }
                }
            }

            var CLIENT_TIMEOUT_ABORT = 1;
            var SERVER_ABORT = 2;

            function getDoc(frame) {
                /* it looks like contentWindow or contentDocument do not
                 * carry the protocol property in ie8, when running under ssl
                 * frame.document is the only valid response document, since
                 * the protocol is know but not on the other two objects. strange?
                 * "Same origin policy" http://en.wikipedia.org/wiki/Same_origin_policy
                 */

                var doc = null;

                // IE8 cascading access check
                try {
                    if (frame.contentWindow) {
                        doc = frame.contentWindow.document;
                    }
                } catch(err) {
                    // IE8 access denied under ssl & missing protocol
                    log('cannot get iframe.contentWindow document: ' + err);
                }

                if (doc) { // successful getting content
                    return doc;
                }

                try { // simply checking may throw in ie8 under ssl or mismatched protocol
                    doc = frame.contentDocument ? frame.contentDocument : frame.document;
                } catch(err) {
                    // last attempt
                    log('cannot get iframe.contentDocument: ' + err);
                    doc = frame.document;
                }
                return doc;
            }

            // Rails CSRF hack (thanks to Yvan Barthelemy)
            var csrf_token = $('meta[name=csrf-token]').attr('content');
            var csrf_param = $('meta[name=csrf-param]').attr('content');
            if (csrf_param && csrf_token) {
                s.extraData = s.extraData || {};
                s.extraData[csrf_param] = csrf_token;
            }

            // take a breath so that pending repaints get some cpu time before the upload starts
            function doSubmit() {
                // make sure form attrs are set
                var t = $form.attr2('target'),
                    a = $form.attr2('action'),
                    mp = 'multipart/form-data',
                    et = $form.attr('enctype') || $form.attr('encoding') || mp;

                // update form attrs in IE friendly way
                form.setAttribute('target',id);
                if (!method || /post/i.test(method) ) {
                    form.setAttribute('method', 'POST');
                }
                if (a != s.url) {
                    form.setAttribute('action', s.url);
                }

                // ie borks in some cases when setting encoding
                if (! s.skipEncodingOverride && (!method || /post/i.test(method))) {
                    $form.attr({
                        encoding: 'multipart/form-data',
                        enctype:  'multipart/form-data'
                    });
                }

                // support timout
                if (s.timeout) {
                    timeoutHandle = setTimeout(function() { timedOut = true; cb(CLIENT_TIMEOUT_ABORT); }, s.timeout);
                }

                // look for server aborts
                function checkState() {
                    try {
                        var state = getDoc(io).readyState;
                        log('state = ' + state);
                        if (state && state.toLowerCase() == 'uninitialized') {
                            setTimeout(checkState,50);
                        }
                    }
                    catch(e) {
                        log('Server abort: ' , e, ' (', e.name, ')');
                        cb(SERVER_ABORT);
                        if (timeoutHandle) {
                            clearTimeout(timeoutHandle);
                        }
                        timeoutHandle = undefined;
                    }
                }

                // add "extra" data to form if provided in options
                var extraInputs = [];
                try {
                    if (s.extraData) {
                        for (var n in s.extraData) {
                            if (s.extraData.hasOwnProperty(n)) {
                                // if using the $.param format that allows for multiple values with the same name
                                if($.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty('name') && s.extraData[n].hasOwnProperty('value')) {
                                    extraInputs.push(
                                        $('<input type="hidden" name="'+s.extraData[n].name+'">').val(s.extraData[n].value)
                                            .appendTo(form)[0]);
                                } else {
                                    extraInputs.push(
                                        $('<input type="hidden" name="'+n+'">').val(s.extraData[n])
                                            .appendTo(form)[0]);
                                }
                            }
                        }
                    }

                    if (!s.iframeTarget) {
                        // add iframe to doc and submit the form
                        $io.appendTo('body');
                    }
                    if (io.attachEvent) {
                        io.attachEvent('onload', cb);
                    }
                    else {
                        io.addEventListener('load', cb, false);
                    }
                    setTimeout(checkState,15);

                    try {
                        form.submit();
                    } catch(err) {
                        // just in case form has element with name/id of 'submit'
                        var submitFn = document.createElement('form').submit;
                        submitFn.apply(form);
                    }
                }
                finally {
                    // reset attrs and remove "extra" input elements
                    form.setAttribute('action',a);
                    form.setAttribute('enctype', et); // #380
                    if(t) {
                        form.setAttribute('target', t);
                    } else {
                        $form.removeAttr('target');
                    }
                    $(extraInputs).remove();
                }
            }

            if (s.forceSync) {
                doSubmit();
            }
            else {
                setTimeout(doSubmit, 10); // this lets dom updates render
            }

            var data, doc, domCheckCount = 50, callbackProcessed;

            function cb(e) {
                if (xhr.aborted || callbackProcessed) {
                    return;
                }

                doc = getDoc(io);
                if(!doc) {
                    log('cannot access response document');
                    e = SERVER_ABORT;
                }
                if (e === CLIENT_TIMEOUT_ABORT && xhr) {
                    xhr.abort('timeout');
                    deferred.reject(xhr, 'timeout');
                    return;
                }
                else if (e == SERVER_ABORT && xhr) {
                    xhr.abort('server abort');
                    deferred.reject(xhr, 'error', 'server abort');
                    return;
                }

                if (!doc || doc.location.href == s.iframeSrc) {
                    // response not received yet
                    if (!timedOut) {
                        return;
                    }
                }
                if (io.detachEvent) {
                    io.detachEvent('onload', cb);
                }
                else {
                    io.removeEventListener('load', cb, false);
                }

                var status = 'success', errMsg;
                try {
                    if (timedOut) {
                        throw 'timeout';
                    }

                    var isXml = s.dataType == 'xml' || doc.XMLDocument || $.isXMLDoc(doc);
                    log('isXml='+isXml);
                    if (!isXml && window.opera && (doc.body === null || !doc.body.innerHTML)) {
                        if (--domCheckCount) {
                            // in some browsers (Opera) the iframe DOM is not always traversable when
                            // the onload callback fires, so we loop a bit to accommodate
                            log('requeing onLoad callback, DOM not available');
                            setTimeout(cb, 250);
                            return;
                        }
                        // let this fall through because server response could be an empty document
                        //log('Could not access iframe DOM after mutiple tries.');
                        //throw 'DOMException: not available';
                    }

                    //log('response detected');
                    var docRoot = doc.body ? doc.body : doc.documentElement;
                    xhr.responseText = docRoot ? docRoot.innerHTML : null;
                    xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc;
                    if (isXml) {
                        s.dataType = 'xml';
                    }
                    xhr.getResponseHeader = function(header){
                        var headers = {'content-type': s.dataType};
                        return headers[header.toLowerCase()];
                    };
                    // support for XHR 'status' & 'statusText' emulation :
                    if (docRoot) {
                        xhr.status = Number( docRoot.getAttribute('status') ) || xhr.status;
                        xhr.statusText = docRoot.getAttribute('statusText') || xhr.statusText;
                    }

                    var dt = (s.dataType || '').toLowerCase();
                    var scr = /(json|script|text)/.test(dt);
                    if (scr || s.textarea) {
                        // see if user embedded response in textarea
                        var ta = doc.getElementsByTagName('textarea')[0];
                        if (ta) {
                            xhr.responseText = ta.value;
                            // support for XHR 'status' & 'statusText' emulation :
                            xhr.status = Number( ta.getAttribute('status') ) || xhr.status;
                            xhr.statusText = ta.getAttribute('statusText') || xhr.statusText;
                        }
                        else if (scr) {
                            // account for browsers injecting pre around json response
                            var pre = doc.getElementsByTagName('pre')[0];
                            var b = doc.getElementsByTagName('body')[0];
                            if (pre) {
                                xhr.responseText = pre.textContent ? pre.textContent : pre.innerText;
                            }
                            else if (b) {
                                xhr.responseText = b.textContent ? b.textContent : b.innerText;
                            }
                        }
                    }
                    else if (dt == 'xml' && !xhr.responseXML && xhr.responseText) {
                        xhr.responseXML = toXml(xhr.responseText);
                    }

                    try {
                        data = httpData(xhr, dt, s);
                    }
                    catch (err) {
                        status = 'parsererror';
                        xhr.error = errMsg = (err || status);
                    }
                }
                catch (err) {
                    log('error caught: ',err);
                    status = 'error';
                    xhr.error = errMsg = (err || status);
                }

                if (xhr.aborted) {
                    log('upload aborted');
                    status = null;
                }

                if (xhr.status) { // we've set xhr.status
                    status = (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) ? 'success' : 'error';
                }

                // ordering of these callbacks/triggers is odd, but that's how $.ajax does it
                if (status === 'success') {
                    if (s.success) {
                        s.success.call(s.context, data, 'success', xhr);
                    }
                    deferred.resolve(xhr.responseText, 'success', xhr);
                    if (g) {
                        $.event.trigger("ajaxSuccess", [xhr, s]);
                    }
                }
                else if (status) {
                    if (errMsg === undefined) {
                        errMsg = xhr.statusText;
                    }
                    if (s.error) {
                        s.error.call(s.context, xhr, status, errMsg);
                    }
                    deferred.reject(xhr, 'error', errMsg);
                    if (g) {
                        $.event.trigger("ajaxError", [xhr, s, errMsg]);
                    }
                }

                if (g) {
                    $.event.trigger("ajaxComplete", [xhr, s]);
                }

                if (g && ! --$.active) {
                    $.event.trigger("ajaxStop");
                }

                if (s.complete) {
                    s.complete.call(s.context, xhr, status);
                }

                callbackProcessed = true;
                if (s.timeout) {
                    clearTimeout(timeoutHandle);
                }

                // clean up
                setTimeout(function() {
                    if (!s.iframeTarget) {
                        $io.remove();
                    }
                    else { //adding else to clean up existing iframe response.
                        $io.attr('src', s.iframeSrc);
                    }
                    xhr.responseXML = null;
                }, 100);
            }

            var toXml = $.parseXML || function(s, doc) { // use parseXML if available (jQuery 1.5+)
                if (window.ActiveXObject) {
                    doc = new ActiveXObject('Microsoft.XMLDOM');
                    doc.async = 'false';
                    doc.loadXML(s);
                }
                else {
                    doc = (new DOMParser()).parseFromString(s, 'text/xml');
                }
                return (doc && doc.documentElement && doc.documentElement.nodeName != 'parsererror') ? doc : null;
            };
            var parseJSON = $.parseJSON || function(s) {
                /*jslint evil:true */
                return window['eval']('(' + s + ')');
            };

            var httpData = function( xhr, type, s ) { // mostly lifted from jq1.4.4

                var ct = xhr.getResponseHeader('content-type') || '',
                    xml = type === 'xml' || !type && ct.indexOf('xml') >= 0,
                    data = xml ? xhr.responseXML : xhr.responseText;

                if (xml && data.documentElement.nodeName === 'parsererror') {
                    if ($.error) {
                        $.error('parsererror');
                    }
                }
                if (s && s.dataFilter) {
                    data = s.dataFilter(data, type);
                }
                if (typeof data === 'string') {
                    if (type === 'json' || !type && ct.indexOf('json') >= 0) {
                        data = parseJSON(data);
                    } else if (type === "script" || !type && ct.indexOf("javascript") >= 0) {
                        $.globalEval(data);
                    }
                }
                return data;
            };

            return deferred;
        }
    };

    /**
     * ajaxForm() provides a mechanism for fully automating form submission.
     *
     * The advantages of using this method instead of ajaxSubmit() are:
     *
     * 1: This method will include coordinates for <input type="image" /> elements (if the element
     *    is used to submit the form).
     * 2. This method will include the submit element's name/value data (for the element that was
     *    used to submit the form).
     * 3. This method binds the submit() method to the form for you.
     *
     * The options argument for ajaxForm works exactly as it does for ajaxSubmit.  ajaxForm merely
     * passes the options argument along after properly binding events for submit elements and
     * the form itself.
     */
    $.fn.ajaxForm = function(options) {
        options = options || {};
        options.delegation = options.delegation && $.isFunction($.fn.on);

        // in jQuery 1.3+ we can fix mistakes with the ready state
        if (!options.delegation && this.length === 0) {
            var o = { s: this.selector, c: this.context };
            if (!$.isReady && o.s) {
                log('DOM not ready, queuing ajaxForm');
                $(function() {
                    $(o.s,o.c).ajaxForm(options);
                });
                return this;
            }
            // is your DOM ready?  http://docs.jquery.com/Tutorials:Introducing_$(document).ready()
            log('terminating; zero elements found by selector' + ($.isReady ? '' : ' (DOM not ready)'));
            return this;
        }

        if ( options.delegation ) {
            $(document)
                .off('submit.form-plugin', this.selector, doAjaxSubmit)
                .off('click.form-plugin', this.selector, captureSubmittingElement)
                .on('submit.form-plugin', this.selector, options, doAjaxSubmit)
                .on('click.form-plugin', this.selector, options, captureSubmittingElement);
            return this;
        }

        return this.ajaxFormUnbind()
            .bind('submit.form-plugin', options, doAjaxSubmit)
            .bind('click.form-plugin', options, captureSubmittingElement);
    };

// private event handlers
    function doAjaxSubmit(e) {
        /*jshint validthis:true */
        var options = e.data;
        if (!e.isDefaultPrevented()) { // if event has been canceled, don't proceed
            e.preventDefault();
            $(e.target).ajaxSubmit(options); // #365
        }
    }

    function captureSubmittingElement(e) {
        /*jshint validthis:true */
        var target = e.target;
        var $el = $(target);
        if (!($el.is("[type=submit],[type=image]"))) {
            // is this a child element of the submit el?  (ex: a span within a button)
            var t = $el.closest('[type=submit]');
            if (t.length === 0) {
                return;
            }
            target = t[0];
        }
        var form = this;
        form.clk = target;
        if (target.type == 'image') {
            if (e.offsetX !== undefined) {
                form.clk_x = e.offsetX;
                form.clk_y = e.offsetY;
            } else if (typeof $.fn.offset == 'function') {
                var offset = $el.offset();
                form.clk_x = e.pageX - offset.left;
                form.clk_y = e.pageY - offset.top;
            } else {
                form.clk_x = e.pageX - target.offsetLeft;
                form.clk_y = e.pageY - target.offsetTop;
            }
        }
        // clear form vars
        setTimeout(function() { form.clk = form.clk_x = form.clk_y = null; }, 100);
    }


// ajaxFormUnbind unbinds the event handlers that were bound by ajaxForm
    $.fn.ajaxFormUnbind = function() {
        return this.unbind('submit.form-plugin click.form-plugin');
    };

    /**
     * formToArray() gathers form element data into an array of objects that can
     * be passed to any of the following ajax functions: $.get, $.post, or load.
     * Each object in the array has both a 'name' and 'value' property.  An example of
     * an array for a simple login form might be:
     *
     * [ { name: 'username', value: 'jresig' }, { name: 'password', value: 'secret' } ]
     *
     * It is this array that is passed to pre-submit callback functions provided to the
     * ajaxSubmit() and ajaxForm() methods.
     */
    $.fn.formToArray = function(semantic, elements) {
        var a = [];
        if (this.length === 0) {
            return a;
        }

        var form = this[0];
        var formId = this.attr('id');
        var els = semantic ? form.getElementsByTagName('*') : form.elements;
        var els2;

        if (els && !/MSIE [678]/.test(navigator.userAgent)) { // #390
            els = $(els).get();  // convert to standard array
        }

        // #386; account for inputs outside the form which use the 'form' attribute
        if ( formId ) {
            els2 = $(':input[form="' + formId + '"]').get(); // hat tip @thet
            if ( els2.length ) {
                els = (els || []).concat(els2);
            }
        }

        if (!els || !els.length) {
            return a;
        }

        var i,j,n,v,el,max,jmax;
        for(i=0, max=els.length; i < max; i++) {
            el = els[i];
            n = el.name;
            if (!n || el.disabled) {
                continue;
            }

            if (semantic && form.clk && el.type == "image") {
                // handle image inputs on the fly when semantic == true
                if(form.clk == el) {
                    a.push({name: n, value: $(el).val(), type: el.type });
                    a.push({name: n+'.x', value: form.clk_x}, {name: n+'.y', value: form.clk_y});
                }
                continue;
            }

            v = $.fieldValue(el, true);
            if (v && v.constructor == Array) {
                if (elements) {
                    elements.push(el);
                }
                for(j=0, jmax=v.length; j < jmax; j++) {
                    a.push({name: n, value: v[j]});
                }
            }
            else if (feature.fileapi && el.type == 'file') {
                if (elements) {
                    elements.push(el);
                }
                var files = el.files;
                if (files.length) {
                    for (j=0; j < files.length; j++) {
                        a.push({name: n, value: files[j], type: el.type});
                    }
                }
                else {
                    // #180
                    a.push({ name: n, value: '', type: el.type });
                }
            }
            else if (v !== null && typeof v != 'undefined') {
                if (elements) {
                    elements.push(el);
                }
                a.push({name: n, value: v, type: el.type, required: el.required});
            }
        }

        if (!semantic && form.clk) {
            // input type=='image' are not found in elements array! handle it here
            var $input = $(form.clk), input = $input[0];
            n = input.name;
            if (n && !input.disabled && input.type == 'image') {
                a.push({name: n, value: $input.val()});
                a.push({name: n+'.x', value: form.clk_x}, {name: n+'.y', value: form.clk_y});
            }
        }
        return a;
    };

    /**
     * Serializes form data into a 'submittable' string. This method will return a string
     * in the format: name1=value1&amp;name2=value2
     */
    $.fn.formSerialize = function(semantic) {
        //hand off to jQuery.param for proper encoding
        return $.param(this.formToArray(semantic));
    };

    /**
     * Serializes all field elements in the jQuery object into a query string.
     * This method will return a string in the format: name1=value1&amp;name2=value2
     */
    $.fn.fieldSerialize = function(successful) {
        var a = [];
        this.each(function() {
            var n = this.name;
            if (!n) {
                return;
            }
            var v = $.fieldValue(this, successful);
            if (v && v.constructor == Array) {
                for (var i=0,max=v.length; i < max; i++) {
                    a.push({name: n, value: v[i]});
                }
            }
            else if (v !== null && typeof v != 'undefined') {
                a.push({name: this.name, value: v});
            }
        });
        //hand off to jQuery.param for proper encoding
        return $.param(a);
    };

    /**
     * Returns the value(s) of the element in the matched set.  For example, consider the following form:
     *
     *  <form><fieldset>
     *      <input name="A" type="text" />
     *      <input name="A" type="text" />
     *      <input name="B" type="checkbox" value="B1" />
     *      <input name="B" type="checkbox" value="B2"/>
     *      <input name="C" type="radio" value="C1" />
     *      <input name="C" type="radio" value="C2" />
     *  </fieldset></form>
     *
     *  var v = $('input[type=text]').fieldValue();
     *  // if no values are entered into the text inputs
     *  v == ['','']
     *  // if values entered into the text inputs are 'foo' and 'bar'
     *  v == ['foo','bar']
     *
     *  var v = $('input[type=checkbox]').fieldValue();
     *  // if neither checkbox is checked
     *  v === undefined
     *  // if both checkboxes are checked
     *  v == ['B1', 'B2']
     *
     *  var v = $('input[type=radio]').fieldValue();
     *  // if neither radio is checked
     *  v === undefined
     *  // if first radio is checked
     *  v == ['C1']
     *
     * The successful argument controls whether or not the field element must be 'successful'
     * (per http://www.w3.org/TR/html4/interact/forms.html#successful-controls).
     * The default value of the successful argument is true.  If this value is false the value(s)
     * for each element is returned.
     *
     * Note: This method *always* returns an array.  If no valid value can be determined the
     *    array will be empty, otherwise it will contain one or more values.
     */
    $.fn.fieldValue = function(successful) {
        for (var val=[], i=0, max=this.length; i < max; i++) {
            var el = this[i];
            var v = $.fieldValue(el, successful);
            if (v === null || typeof v == 'undefined' || (v.constructor == Array && !v.length)) {
                continue;
            }
            if (v.constructor == Array) {
                $.merge(val, v);
            }
            else {
                val.push(v);
            }
        }
        return val;
    };

    /**
     * Returns the value of the field element.
     */
    $.fieldValue = function(el, successful) {
        var n = el.name, t = el.type, tag = el.tagName.toLowerCase();
        if (successful === undefined) {
            successful = true;
        }

        if (successful && (!n || el.disabled || t == 'reset' || t == 'button' ||
            (t == 'checkbox' || t == 'radio') && !el.checked ||
            (t == 'submit' || t == 'image') && el.form && el.form.clk != el ||
            tag == 'select' && el.selectedIndex == -1)) {
            return null;
        }

        if (tag == 'select') {
            var index = el.selectedIndex;
            if (index < 0) {
                return null;
            }
            var a = [], ops = el.options;
            var one = (t == 'select-one');
            var max = (one ? index+1 : ops.length);
            for(var i=(one ? index : 0); i < max; i++) {
                var op = ops[i];
                if (op.selected) {
                    var v = op.value;
                    if (!v) { // extra pain for IE...
                        v = (op.attributes && op.attributes.value && !(op.attributes.value.specified)) ? op.text : op.value;
                    }
                    if (one) {
                        return v;
                    }
                    a.push(v);
                }
            }
            return a;
        }
        return $(el).val();
    };

    /**
     * Clears the form data.  Takes the following actions on the form's input fields:
     *  - input text fields will have their 'value' property set to the empty string
     *  - select elements will have their 'selectedIndex' property set to -1
     *  - checkbox and radio inputs will have their 'checked' property set to false
     *  - inputs of type submit, button, reset, and hidden will *not* be effected
     *  - button elements will *not* be effected
     */
    $.fn.clearForm = function(includeHidden) {
        return this.each(function() {
            $('input,select,textarea', this).clearFields(includeHidden);
        });
    };

    /**
     * Clears the selected form elements.
     */
    $.fn.clearFields = $.fn.clearInputs = function(includeHidden) {
        var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; // 'hidden' is not in this list
        return this.each(function() {
            var t = this.type, tag = this.tagName.toLowerCase();
            if (re.test(t) || tag == 'textarea') {
                this.value = '';
            }
            else if (t == 'checkbox' || t == 'radio') {
                this.checked = false;
            }
            else if (tag == 'select') {
                this.selectedIndex = -1;
            }
            else if (t == "file") {
                if (/MSIE/.test(navigator.userAgent)) {
                    $(this).replaceWith($(this).clone(true));
                } else {
                    $(this).val('');
                }
            }
            else if (includeHidden) {
                // includeHidden can be the value true, or it can be a selector string
                // indicating a special test; for example:
                //  $('#myForm').clearForm('.special:hidden')
                // the above would clean hidden inputs that have the class of 'special'
                if ( (includeHidden === true && /hidden/.test(t)) ||
                    (typeof includeHidden == 'string' && $(this).is(includeHidden)) ) {
                    this.value = '';
                }
            }
        });
    };

    /**
     * Resets the form data.  Causes all form elements to be reset to their original value.
     */
    $.fn.resetForm = function() {
        return this.each(function() {
            // guard against an input with the name of 'reset'
            // note that IE reports the reset function as an 'object'
            if (typeof this.reset == 'function' || (typeof this.reset == 'object' && !this.reset.nodeType)) {
                this.reset();
            }
        });
    };

    /**
     * Enables or disables any matching elements.
     */
    $.fn.enable = function(b) {
        if (b === undefined) {
            b = true;
        }
        return this.each(function() {
            this.disabled = !b;
        });
    };

    /**
     * Checks/unchecks any matching checkboxes or radio buttons and
     * selects/deselects and matching option elements.
     */
    $.fn.selected = function(select) {
        if (select === undefined) {
            select = true;
        }
        return this.each(function() {
            var t = this.type;
            if (t == 'checkbox' || t == 'radio') {
                this.checked = select;
            }
            else if (this.tagName.toLowerCase() == 'option') {
                var $sel = $(this).parent('select');
                if (select && $sel[0] && $sel[0].type == 'select-one') {
                    // deselect all other options
                    $sel.find('option').selected(false);
                }
                this.selected = select;
            }
        });
    };

    // expose debug var
    $.fn.ajaxSubmit.debug = false;

    // helper fn for console logging
    function log() {
        if (!$.fn.ajaxSubmit.debug) {
            return;
        }
        var msg = '[jquery.form] ' + Array.prototype.join.call(arguments,'');
        if (window.console && window.console.log) {
            window.console.log(msg);
        }
        else if (window.opera && window.opera.postError) {
            window.opera.postError(msg);
        }
    }

})();

/*
 * Copyright (c) 2014 www.erayt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 * @class erajs.ui.Parser
 * @singleton
 */
(function () {
    erajs.ui.parser = {
        auto: true,
        onComplete: function (context) {

        },
        plugins: ['draggable', 'droppable', 'resizable', 'button','menu','menubutton','tooltip',
            'panel', 'progressbar', 'window', 'accordion', 'tabs', 'layout',
            'combo', 'combobox','messager','slider','spinner','numberbox',
            'dialog','numberspinner','timespinner','calendar','datebox',
            'datetimebox','pagination','datagrid','treegrid','propertygrid',
            'combogrid','combotree','textbox','filebox','tree'],

        parse: function (context) {
            var aa = [];
            for (var i = 0; i < this.plugins.length; i++) {
                var xtype = this.plugins[i];
                var r = $('[xtype="' + xtype + '"]', context);
                if (r.length) {
                    if (r[name]) {
                        r[name]();
                    } else {
                        aa.push({
                            xtype: xtype,
                            jq: r
                        });
                    }
                }
            }
            //如果存在根据样式定义组件，且是按需加载
            if (aa.length && window.erajsloader) {
                var names = []; //插件名称集合
                for (var i = 0; i < aa.length; i++) {
                    names.push(aa[i].xtype);
                }
                erajsloader.load(names, function () {
                    erajs.ui.parser.initComponent(aa);
                });
            } else {
                erajs.ui.parser.initComponent(aa);
            }
        },

        parseValue: function(property, value, parent, delta){
            delta = delta || 0;
            var v = $.trim(String(value||''));
            var endchar = v.substr(v.length-1, 1);
            if (endchar == '%'){
                v = parseInt(v.substr(0, v.length-1));
                if (property.toLowerCase().indexOf('width') >= 0){
                    v = Math.floor((parent.width()-delta) * v / 100.0);
                } else {
                    v = Math.floor((parent.height()-delta) * v / 100.0);
                }
            } else {
                v = parseInt(v) || undefined;
            }
            return v;
        },

        initComponent: function (components, context) {
            var me = this;
            //判断是否需要本地化
            if(erajs.localize){
                me.parseBaseLocale();
            }

            for (var i = 0; i < components.length; i++) {
                var xtype = components[i].xtype;
                var g = components[i].jq;
                for (var k = 0; k < g.length; k++) {
                    var gkEl = $(g[k]);
                    if(!g[k].id){
                        var genId = g[k].name || erajs.id(g[k]);
                        gkEl.attr('id',genId);
                    }
                    //解析自定义扩展custom-options配置
                    var cOptions = {};
                    var co = $.trim(gkEl.attr('custom-options'));
                    if(co){
                        cOptions = erajs.parserCustomOptions(xtype,co,g[k]);
                    }

                    //为已初始化国际化信息的按钮赋值.
                    if(xtype =='button'){
                        me.setKnowBtnsText(g[k]);
                    }
                    //国际化UI组件
                    if(erajs.localize && erajs.Array.contains(me.uiLocales,xtype)){
                        me.parseUiLocale(xtype,g[k]);
                    }

                    erajs.create(xtype, {target: g[k]},cOptions);
                }
            }
            erajs.ui.parser.onComplete.call(erajs.ui.parser, context);
        },

        setKnowBtnsText : function(target){
            var me = this;
            var oldVal = $.trim($(target).text());
            //如果有值将不替换默认值.
            if(oldVal) return;

            var iconCls = me.getUIAttribute(target,'iconCls');
            if(iconCls){
                iconCls = iconCls.replace('-','.');
                var localeV = me.getLocaleValue(iconCls);
                if(localeV){
                    $(target).text(localeV);
                }
            }
        },

        parseUiLocale : function(xtype,target){
            var me = this;
            if(xtype =='button'){
                var oldVal = $(target).text();
                var bVal = me.getLocaleValue(target);
                if(bVal !== undefined &&  bVal !== oldVal){
                    $(target).html(bVal);
                }
            }else if(xtype =='panel' || xtype =='window' || xtype =='dialog' || xtype =='datagrid'){
                setTitle(target);
            }else if(xtype =='tabs' || xtype =='layout' || xtype =='accordion'){
                var divs = $(target).children('div');
                erajs.each(divs,function(div){
                    setTitle(div);
                });
            }

            function setTitle(dom){
                if(!hasTitle(dom)) return;

                var title = me.getLocaleKey(dom);
                if(title){
                    var val = erajs.getMessage(title);
                    if(title !== val){
                        dom.setAttribute('title',val);
                    }
                }
            }

            function hasTitle(dom){
                return me.getUIAttribute(dom,'title') !== null;
            }
        },

        getUIAttribute : function(target,attribute){
            var me = this;
            var attrValue = target.getAttribute(attribute);
            if(!attrValue){
                var customOpts = me.getOptionsObject(target.getAttribute('data-options'));
                if(customOpts.hasOwnProperty(attribute)){
                    attrValue = customOpts[attribute];
                }
            }
            return attrValue;
        },

        uiLocales : ['button','tabs','datagrid','layout','panel','window','dialog','accordion'],

        getLocaleKey : function(dom){
            var langid = dom.getAttribute("langid");
            if (!langid) {
                langid = dom.getAttribute('name') || dom.id;
            }
            return langid;
        },

        getLocaleValue : function(langid){
            var me = this;
            if(typeof langid ==='object'){
                langid = me.getLocaleKey(langid);
            }
            return erajs.getMessage(langid,false);
        },

        getOptionsObject : function(s){
            return erajs.isEmpty(s) ? {} : (new Function('return ' + erajs.encodeToJsonStr(s)))();
        },

        parseBaseLocale : function(){
            var me = this;
            //解析span
            $(".LANGS").each(function() {
                var val = me.getLocaleValue(this);
                if(val) {
                    $(this).html(val);
                }
            });
            //解析原生button
            $('input:button,input:submit').each(function(){
                var val = me.getLocaleValue(this);
                if(val){
                    $(this).val(val);
                }
            });
        },

        /**
         * parse options, including standard 'data-options' attribute.
         *
         * calling examples:
         * $.parser.parseOptions(target);
         * $.parser.parseOptions(target, ['id','title','width',{fit:'boolean',border:'boolean'},{min:'number'}]);
         */
        parseOptions: function (target, properties) {
            var me = this;
            var t = target;
            var options = {};
            var s = $.trim(t.attr('data-options'));
            if (s) {
                $(target).removeAttr('data-options');
                options = me.getOptionsObject(s);
            }

            $.map(['width','height','left','top','minWidth','maxWidth','minHeight','maxHeight'], function(p){
                var pv = $.trim(target[0].style[p] || '');
                if (pv){
                    if (pv.indexOf('%') == -1){
                        pv = parseInt(pv) || undefined;
                    }
                    options[p] = pv;
                }
            });

            if (properties) {
                var opts = {};
                for(var i=0; i<properties.length; i++){
                    var pp = properties[i];
                    if (typeof pp == 'string'){
                        opts[pp] = t.attr(pp);
                    } else {
                        for(var name in pp){
                            var type = pp[name];
                            if (type == 'boolean'){
                                opts[name] = t.attr(name) ? (t.attr(name) == 'true') : undefined;
                            } else if (type == 'number'){
                                opts[name] = t.attr(name)=='0' ? 0 : parseFloat(t.attr(name)) || undefined;
                            }
                        }
                    }
                }
                $.extend(options, opts);
            }

            return options;
        }
    };

    $(function () {
        var d = $('<div style="position:absolute;top:-1000px;width:100px;height:100px;padding:5px"></div>').appendTo('body');
        d.width(100);
        $._boxModel = parseInt(d.width()) == 100;
        d.remove();

        //如果非采用动态loader的方式加载的，那么手动去调用parser.parse()完成初始化
        if (!window.erajsloader && erajs.ui.parser.auto) {
            erajs.ui.parser.parse();
        }
    });
    
})();


/*!
 * EraJs Development Framework v1.2.1
 *
 * http://www.erayt.com/
 *
 * Copyright (c) 2015 SCM
 * Released under the MIT license
 */
(function( factory ) {
	if ( typeof define === "function" && define.amd ) {
		define( ["jquery"], factory );
	} else {
		factory( jQuery );
	}
}(function( $ ) {

/**
 * jQuery EasyUI 1.4
 *
 * Copyright (c) 2009-2014 www.jeasyui.com. All rights reserved.
 *
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us at info@jeasyui.com
 *
 */
/**
 * draggable - jQuery EasyUI
 *
 */
(function($){
//	var isDragging = false;
    function drag(e){
        var state = $.data(e.data.target, 'draggable');
        var opts = state.options;
        var proxy = state.proxy;

        var dragData = e.data;
        var left = dragData.startLeft + e.pageX - dragData.startX;
        var top = dragData.startTop + e.pageY - dragData.startY;

        if (proxy){
            if (proxy.parent()[0] == document.body){
                if (opts.deltaX != null && opts.deltaX != undefined){
                    left = e.pageX + opts.deltaX;
                } else {
                    left = e.pageX - e.data.offsetWidth;
                }
                if (opts.deltaY != null && opts.deltaY != undefined){
                    top = e.pageY + opts.deltaY;
                } else {
                    top = e.pageY - e.data.offsetHeight;
                }
            } else {
                if (opts.deltaX != null && opts.deltaX != undefined){
                    left += e.data.offsetWidth + opts.deltaX;
                }
                if (opts.deltaY != null && opts.deltaY != undefined){
                    top += e.data.offsetHeight + opts.deltaY;
                }
            }
        }

//		if (opts.deltaX != null && opts.deltaX != undefined){
//			left = e.pageX + opts.deltaX;
//		}
//		if (opts.deltaY != null && opts.deltaY != undefined){
//			top = e.pageY + opts.deltaY;
//		}

        if (e.data.parent != document.body) {
            left += $(e.data.parent).scrollLeft();
            top += $(e.data.parent).scrollTop();
        }

        if (opts.axis == 'h') {
            dragData.left = left;
        } else if (opts.axis == 'v') {
            dragData.top = top;
        } else {
            dragData.left = left;
            dragData.top = top;
        }
    }

    function applyDrag(e){
        var state = $.data(e.data.target, 'draggable');
        var opts = state.options;
        var proxy = state.proxy;
        if (!proxy){
            proxy = $(e.data.target);
        }
//		if (proxy){
//			proxy.css('cursor', opts.cursor);
//		} else {
//			proxy = $(e.data.target);
//			$.data(e.data.target, 'draggable').handle.css('cursor', opts.cursor);
//		}
        proxy.css({
            left:e.data.left,
            top:e.data.top
        });
        $('body').css('cursor', opts.cursor);
    }

    function doDown(e){
//		isDragging = true;
        $.fn.draggable.isDragging = true;
        var state = $.data(e.data.target, 'draggable');
        var opts = state.options;

        var droppables = $('.droppable').filter(function(){
            return e.data.target != this;
        }).filter(function(){
            var accept = $.data(this, 'droppable').options.accept;
            if (accept){
                return $(accept).filter(function(){
                    return this == e.data.target;
                }).length > 0;
            } else {
                return true;
            }
        });
        state.droppables = droppables;

        var proxy = state.proxy;
        if (!proxy){
            if (opts.proxy){
                if (opts.proxy == 'clone'){
                    proxy = $(e.data.target).clone().insertAfter(e.data.target);
                } else {
                    proxy = opts.proxy.call(e.data.target, e.data.target);
                }
                state.proxy = proxy;
            } else {
                proxy = $(e.data.target);
            }
        }

        proxy.css('position', 'absolute');
        drag(e);
        applyDrag(e);

        opts.onStartDrag.call(e.data.target, e);
        return false;
    }

    function doMove(e){
        var state = $.data(e.data.target, 'draggable');
        drag(e);
        if (state.options.onDrag.call(e.data.target, e) != false){
            applyDrag(e);
        }

        var source = e.data.target;
        state.droppables.each(function(){
            var dropObj = $(this);
            if (dropObj.droppable('options').disabled){return;}

            var p2 = dropObj.offset();
            if (e.pageX > p2.left && e.pageX < p2.left + dropObj.outerWidth()
                && e.pageY > p2.top && e.pageY < p2.top + dropObj.outerHeight()){
                if (!this.entered){
                    $(this).trigger('_dragenter', [source]);
                    this.entered = true;
                }
                $(this).trigger('_dragover', [source]);
            } else {
                if (this.entered){
                    $(this).trigger('_dragleave', [source]);
                    this.entered = false;
                }
            }
        });

        return false;
    }

    function doUp(e){
//		isDragging = false;
        $.fn.draggable.isDragging = false;
//		drag(e);
        doMove(e);

        var state = $.data(e.data.target, 'draggable');
        var proxy = state.proxy;
        var opts = state.options;
        if (opts.revert){
            if (checkDrop() == true){
                $(e.data.target).css({
                    position:e.data.startPosition,
                    left:e.data.startLeft,
                    top:e.data.startTop
                });
            } else {
                if (proxy){
                    var left, top;
                    if (proxy.parent()[0] == document.body){
                        left = e.data.startX - e.data.offsetWidth;
                        top = e.data.startY - e.data.offsetHeight;
                    } else {
                        left = e.data.startLeft;
                        top = e.data.startTop;
                    }
                    proxy.animate({
                        left: left,
                        top: top
                    }, function(){
                        removeProxy();
                    });
                } else {
                    $(e.data.target).animate({
                        left:e.data.startLeft,
                        top:e.data.startTop
                    }, function(){
                        $(e.data.target).css('position', e.data.startPosition);
                    });
                }
            }
        } else {
            $(e.data.target).css({
                position:'absolute',
                left:e.data.left,
                top:e.data.top
            });
            checkDrop();
        }

        opts.onStopDrag.call(e.data.target, e);

        $(document).unbind('.draggable');
        setTimeout(function(){
            $('body').css('cursor','');
        },100);

        function removeProxy(){
            if (proxy){
                proxy.remove();
            }
            state.proxy = null;
        }

        function checkDrop(){
            var dropped = false;
            state.droppables.each(function(){
                var dropObj = $(this);
                if (dropObj.droppable('options').disabled){return;}

                var p2 = dropObj.offset();
                if (e.pageX > p2.left && e.pageX < p2.left + dropObj.outerWidth()
                    && e.pageY > p2.top && e.pageY < p2.top + dropObj.outerHeight()){
                    if (opts.revert){
                        $(e.data.target).css({
                            position:e.data.startPosition,
                            left:e.data.startLeft,
                            top:e.data.startTop
                        });
                    }
                    $(this).trigger('_drop', [e.data.target]);
                    removeProxy();
                    dropped = true;
                    this.entered = false;
                    return false;
                }
            });
            if (!dropped && !opts.revert){
                removeProxy();
            }
            return dropped;
        }

        return false;
    }

    $.fn.draggable = function(options, param){
        if (typeof options == 'string'){
            return $.fn.draggable.methods[options](this, param);
        }

        return this.each(function(){
            var opts;
            var state = $.data(this, 'draggable');
            if (state) {
                state.handle.unbind('.draggable');
                opts = $.extend(state.options, options);
            } else {
                opts = $.extend({}, $.fn.draggable.defaults, $.fn.draggable.parseOptions(this), options || {});
            }
            var handle = opts.handle ? (typeof opts.handle=='string' ? $(opts.handle, this) : opts.handle) : $(this);

            $.data(this, 'draggable', {
                options: opts,
                handle: handle
            });

            if (opts.disabled) {
                $(this).css('cursor', '');
                return;
            }

            handle.unbind('.draggable').bind('mousemove.draggable', {target:this}, function(e){
//				if (isDragging) return;
                if ($.fn.draggable.isDragging){return}
                var opts = $.data(e.data.target, 'draggable').options;
                if (checkArea(e)){
                    $(this).css('cursor', opts.cursor);
                } else {
                    $(this).css('cursor', '');
                }
            }).bind('mouseleave.draggable', {target:this}, function(e){
                $(this).css('cursor', '');
            }).bind('mousedown.draggable', {target:this}, function(e){
                if (checkArea(e) == false) return;
                $(this).css('cursor', '');

                var position = $(e.data.target).position();
                var offset = $(e.data.target).offset();
                var data = {
                    startPosition: $(e.data.target).css('position'),
                    startLeft: position.left,
                    startTop: position.top,
                    left: position.left,
                    top: position.top,
                    startX: e.pageX,
                    startY: e.pageY,
                    offsetWidth: (e.pageX - offset.left),
                    offsetHeight: (e.pageY - offset.top),
                    target: e.data.target,
                    parent: $(e.data.target).parent()[0]
                };

                $.extend(e.data, data);
                var opts = $.data(e.data.target, 'draggable').options;
                if (opts.onBeforeDrag.call(e.data.target, e) == false) return;

                $(document).bind('mousedown.draggable', e.data, doDown);
                $(document).bind('mousemove.draggable', e.data, doMove);
                $(document).bind('mouseup.draggable', e.data, doUp);
//				$('body').css('cursor', opts.cursor);
            });

            // check if the handle can be dragged
            function checkArea(e) {
                var state = $.data(e.data.target, 'draggable');
                var handle = state.handle;
                var offset = $(handle).offset();
                var width = $(handle).outerWidth();
                var height = $(handle).outerHeight();
                var t = e.pageY - offset.top;
                var r = offset.left + width - e.pageX;
                var b = offset.top + height - e.pageY;
                var l = e.pageX - offset.left;

                return Math.min(t,r,b,l) > state.options.edge;
            }

        });
    };

    $.fn.draggable.methods = {
        options: function(jq){
            return $.data(jq[0], 'draggable').options;
        },
        proxy: function(jq){
            return $.data(jq[0], 'draggable').proxy;
        },
        enable: function(jq){
            return jq.each(function(){
                $(this).draggable({disabled:false});
            });
        },
        disable: function(jq){
            return jq.each(function(){
                $(this).draggable({disabled:true});
            });
        }
    };

    $.fn.draggable.parseOptions = function(target){
        var t = $(target);
        return $.extend({},
            erajs.ui.parser.parseOptions(t, ['cursor','handle','axis',
                {'revert':'boolean','deltaX':'number','deltaY':'number','edge':'number'}]), {
                disabled: (t.attr('disabled') ? true : undefined)
            });
    };

    $.fn.draggable.defaults = {
        proxy:null,	// 'clone' or a function that will create the proxy object,
        // the function has the source parameter that indicate the source object dragged.
        revert:false,
        cursor:'move',
        deltaX:null,
        deltaY:null,
        handle: null,
        disabled: false,
        edge:0,
        axis:null,	// v or h

        onBeforeDrag: function(e){},
        onStartDrag: function(e){},
        onDrag: function(e){},
        onStopDrag: function(e){}
    };

    $.fn.draggable.isDragging = false;

})(jQuery);

/*
 * Copyright (c) 2014 www.erayt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 */
(function($){
    function init(target){
        $(target).addClass('droppable');
        $(target).bind('_dragenter', function(e, source){
            $.data(target, 'droppable').options.onDragEnter.apply(target, [e, source]);
        });
        $(target).bind('_dragleave', function(e, source){
            $.data(target, 'droppable').options.onDragLeave.apply(target, [e, source]);
        });
        $(target).bind('_dragover', function(e, source){
            $.data(target, 'droppable').options.onDragOver.apply(target, [e, source]);
        });
        $(target).bind('_drop', function(e, source){
            $.data(target, 'droppable').options.onDrop.apply(target, [e, source]);
        });
    }

    $.fn.droppable = function(options, param){
        if (typeof options == 'string'){
            return $.fn.droppable.methods[options](this, param);
        }

        options = options || {};
        return this.each(function(){
            var state = $.data(this, 'droppable');
            if (state){
                $.extend(state.options, options);
            } else {
                init(this);
                $.data(this, 'droppable', {
                    options: $.extend({}, $.fn.droppable.defaults, $.fn.droppable.parseOptions(this), options)
                });
            }
        });
    };

    $.fn.droppable.methods = {
        options: function(jq){
            return $.data(jq[0], 'droppable').options;
        },
        enable: function(jq){
            return jq.each(function(){
                $(this).droppable({disabled:false});
            });
        },
        disable: function(jq){
            return jq.each(function(){
                $(this).droppable({disabled:true});
            });
        }
    };

    $.fn.droppable.parseOptions = function(target){
        var t = $(target);
        return $.extend({},	erajs.ui.parser.parseOptions(t, ['accept']), {
            disabled: (t.attr('disabled') ? true : undefined)
        });
    };

    $.fn.droppable.defaults = {
        accept:null,
        disabled:false,
        onDragEnter:function(e, source){},
        onDragOver:function(e, source){},
        onDragLeave:function(e, source){},
        onDrop:function(e, source){}
    };
})(jQuery);
/**
 * jQuery EasyUI 1.3.6
 *
 * Copyright (c) 2009-2014 www.jeasyui.com. All rights reserved.
 *
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us at info@jeasyui.com
 *
 */
/**
 * resizable - jQuery EasyUI
 *
 */
(function($){
//	var isResizing = false;
    $.fn.resizable = function(options, param){
        if (typeof options == 'string'){
            return $.fn.resizable.methods[options](this, param);
        }

        function resize(e){
            var resizeData = e.data;
            var options = $.data(resizeData.target, 'resizable').options;
            if (resizeData.dir.indexOf('e') != -1) {
                var width = resizeData.startWidth + e.pageX - resizeData.startX;
                width = Math.min(
                    Math.max(width, options.minWidth),
                    options.maxWidth
                );
                resizeData.width = width;
            }
            if (resizeData.dir.indexOf('s') != -1) {
                var height = resizeData.startHeight + e.pageY - resizeData.startY;
                height = Math.min(
                    Math.max(height, options.minHeight),
                    options.maxHeight
                );
                resizeData.height = height;
            }
            if (resizeData.dir.indexOf('w') != -1) {
                var width = resizeData.startWidth - e.pageX + resizeData.startX;
                width = Math.min(
                    Math.max(width, options.minWidth),
                    options.maxWidth
                );
                resizeData.width = width;
                resizeData.left = resizeData.startLeft + resizeData.startWidth - resizeData.width;

            }
            if (resizeData.dir.indexOf('n') != -1) {
                var height = resizeData.startHeight - e.pageY + resizeData.startY;
                height = Math.min(
                    Math.max(height, options.minHeight),
                    options.maxHeight
                );
                resizeData.height = height;
                resizeData.top = resizeData.startTop + resizeData.startHeight - resizeData.height;

            }
        }

        function applySize(e){
            var resizeData = e.data;
            var t = $(resizeData.target);
            t.css({
                left: resizeData.left,
                top: resizeData.top
            });
            if (t.outerWidth() != resizeData.width){t._outerWidth(resizeData.width)}
            if (t.outerHeight() != resizeData.height){t._outerHeight(resizeData.height)}
        }

        function doDown(e){
            $.fn.resizable.isResizing = true;
            $.data(e.data.target, 'resizable').options.onStartResize.call(e.data.target, e);
            return false;
        }

        function doMove(e){
            resize(e);
            if ($.data(e.data.target, 'resizable').options.onResize.call(e.data.target, e) != false){
                applySize(e)
            }
            return false;
        }

        function doUp(e){
//			isResizing = false;
            $.fn.resizable.isResizing = false;
            resize(e, true);
            applySize(e);
            $.data(e.data.target, 'resizable').options.onStopResize.call(e.data.target, e);
            $(document).unbind('.resizable');
            $('body').css('cursor','');
//			$('body').css('cursor','auto');
            return false;
        }

        return this.each(function(){
            var opts = null;
            var state = $.data(this, 'resizable');
            if (state) {
                $(this).unbind('.resizable');
                opts = $.extend(state.options, options || {});
            } else {
                opts = $.extend({}, $.fn.resizable.defaults, $.fn.resizable.parseOptions(this), options || {});
                $.data(this, 'resizable', {
                    options:opts
                });
            }

            if (opts.disabled == true) {
                return;
            }

            // bind mouse event using namespace resizable
            $(this).bind('mousemove.resizable', {target:this}, function(e){
//				if (isResizing) return;
                if ($.fn.resizable.isResizing){return}
                var dir = getDirection(e);
                if (dir == '') {
                    $(e.data.target).css('cursor', '');
                } else {
                    $(e.data.target).css('cursor', dir + '-resize');
                }
            }).bind('mouseleave.resizable', {target:this}, function(e){
                $(e.data.target).css('cursor', '');
            }).bind('mousedown.resizable', {target:this}, function(e){
                var dir = getDirection(e);
                if (dir == '') return;

                function getCssValue(css) {
                    var val = parseInt($(e.data.target).css(css));
                    if (isNaN(val)) {
                        return 0;
                    } else {
                        return val;
                    }
                }

                var data = {
                    target: e.data.target,
                    dir: dir,
                    startLeft: getCssValue('left'),
                    startTop: getCssValue('top'),
                    left: getCssValue('left'),
                    top: getCssValue('top'),
                    startX: e.pageX,
                    startY: e.pageY,
                    startWidth: $(e.data.target).outerWidth(),
                    startHeight: $(e.data.target).outerHeight(),
                    width: $(e.data.target).outerWidth(),
                    height: $(e.data.target).outerHeight(),
                    deltaWidth: $(e.data.target).outerWidth() - $(e.data.target).width(),
                    deltaHeight: $(e.data.target).outerHeight() - $(e.data.target).height()
                };
                $(document).bind('mousedown.resizable', data, doDown);
                $(document).bind('mousemove.resizable', data, doMove);
                $(document).bind('mouseup.resizable', data, doUp);
                $('body').css('cursor', dir+'-resize');
            });

            // get the resize direction
            function getDirection(e) {
                var tt = $(e.data.target);
                var dir = '';
                var offset = tt.offset();
                var width = tt.outerWidth();
                var height = tt.outerHeight();
                var edge = opts.edge;
                if (e.pageY > offset.top && e.pageY < offset.top + edge) {
                    dir += 'n';
                } else if (e.pageY < offset.top + height && e.pageY > offset.top + height - edge) {
                    dir += 's';
                }
                if (e.pageX > offset.left && e.pageX < offset.left + edge) {
                    dir += 'w';
                } else if (e.pageX < offset.left + width && e.pageX > offset.left + width - edge) {
                    dir += 'e';
                }

                var handles = opts.handles.split(',');
                for(var i=0; i<handles.length; i++) {
                    var handle = handles[i].replace(/(^\s*)|(\s*$)/g, '');
                    if (handle == 'all' || handle == dir) {
                        return dir;
                    }
                }
                return '';
            }


        });
    };

    $.fn.resizable.methods = {
        options: function(jq){
            return $.data(jq[0], 'resizable').options;
        },
        enable: function(jq){
            return jq.each(function(){
                $(this).resizable({disabled:false});
            });
        },
        disable: function(jq){
            return jq.each(function(){
                $(this).resizable({disabled:true});
            });
        }
    };

    $.fn.resizable.parseOptions = function(target){
        var t = $(target);
        return $.extend({},
            erajs.ui.parser.parseOptions(t, [
                'handles',{minWidth:'number',minHeight:'number',maxWidth:'number',maxHeight:'number',edge:'number'}
            ]), {
                disabled: (t.attr('disabled') ? true : undefined)
            })
    };

    $.fn.resizable.defaults = {
        disabled:false,
        handles:'n, e, s, w, ne, se, sw, nw, all',
        minWidth: 10,
        minHeight: 10,
        maxWidth: 10000,//$(document).width(),
        maxHeight: 10000,//$(document).height(),
        edge:5,
        onStartResize: function(e){},
        onResize: function(e){},
        onStopResize: function(e){}
    };

    $.fn.resizable.isResizing = false;

})(jQuery);

/*
 * Copyright (c) 2014 www.erayt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 */
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.ui.Button
 * @extends erajs.ui.Button.defaults
 *
 * 使用{@link erajs.ui.Button.defaults}重写默认值对象.
 * 链接按钮用于创建超链接按钮。它是表示正常的`<a>`或`<div>`标记。它可以显示图标和文字，或只图标或文字。
 * 该按钮的宽度可以动态收缩/展开，以适应其文本标签。
 *
 * {@img erajs.ui.Button/button.png}
 *
 * ## 使用案例
 *
 * ### 创建按钮
 *
 * 1、用标签很容易创建链接按钮。
 *
 *      @example
 *      <div id="helpBtn" xtype="button" data-options="iconCls:'icon-help'">帮助</div>
 *
 * 2、编程的也可以创建一个按钮。
 *
 *      erajs.create('button', {
 *            id : 'pictureBtn',
 *            parent : '#jsGroup', //父容器的ID
 *            iconCls : 'icon-print',
 *            text : 'Print',
 *            onClick : function(){
 *                alert('我是新创建的Print按钮!');
 *            }
 *        });
 *
 * ## 点击按钮示范
 *
 * 1、原生的onclick事件方式；
 *
 *      @example
 *      <a href="#" xtype="button" data-options="iconCls:'icon-search'" onclick="javascript:alert('erajs')">erajs</a>
 *
 * 2、UI的onClick方式;
 *
 *      @example
 *      <div id="btn" xtype="button"
 *              data-options="
 *                  iconCls : 'icon-tip',
 *                  onClick : function(){
 *                      alert('erajs');
 *                  }
 *            ">erajs</div>
 *
 */
(function() {

    "use strict";

    function setSize(self, param){
        var opts = self.options;
        if (param){
            $.extend(opts, param);
        }
        if (opts.width || opts.height || opts.fit){
            var spacer = $('<div style="display:none"></div>').insertBefore(target);
            var btn = $(target);
            var parent = btn.parent();
            btn.appendTo('body');
            btn._size(opts, parent);
            var left = btn.find('.l-btn-left');
            left.css('margin-top', parseInt((btn.height()-left.height())/2)+'px');
            btn.insertAfter(spacer);
            spacer.remove();
        }
    }

    erajs.ui.Button = function(options,customOptions) {
		options = options || {};
        customOptions = customOptions || {};
		var target = options.target;

        //如果是以erajs.create的方式创建的，那么先准备html
        if(!target){
            //判断是否在某一组内添加组件
            var parent = options.parent,contentEl = options.contentEl;
            if (parent) {
                target = $("<div></div>");
                target.appendTo($(parent));
            }
            if(contentEl){ target = $(contentEl);}
        }

		if (target) {
			this.target = target;
			$.extend(this,erajs.ui.Button.defaults,customOptions, erajs.ui.Button.parseOptions(target), options);
			$(target).removeAttr('disabled');
		}
        this._render(target);
	};

	erajs.ui.Button.prototype = {

        /**
         * 获取button的id值.
         * @returns {String}
         */
        getId : function(){
            return this.id;
        },

        /**
         * 获取button文本值.
         * @returns {String}
         */
        getText : function() {
            return this.text;
        },

        /**
         * 设置button显示图标样式.
         * @param {String} iconCls
         */
        setIcon : function(iconCls){
            this.iconCls = iconCls;
            this._render();
        },

        /**
         * 设置button文本值.
         * @param {String} text
         */
        setText : function(text) {
            this.text = text;
            this._render();
        },

        /**
         * 启用button.
         */
        enable : function(){
            this._setDisabled(false);
        },

        /**
         * 禁用button.
         */
        disable : function(){
            this._setDisabled(true);
        },

        /**
         * 选中button.
         */
        select : function(){
            this._setSelected(true);
        },

        /**
         * 取消选中button.
         */
        unselect : function(){
            this._setSelected(false);
        },

        /**
         * 销毁组件.
         */
        destroy : function(){
            $(this.target).remove();
            erajs.destroy(this);
        },

		_render : function(target) {

			var opts = this,t = $(this.target).empty();

            t.addClass('l-btn').removeClass('l-btn-plain l-btn-selected l-btn-plain-selected');
            t.removeClass('l-btn-small l-btn-medium l-btn-large').addClass('l-btn-'+opts.size);

            if (opts.plain){t.addClass('l-btn-plain');}

            if (opts.selected){
                t.addClass(opts.plain ? 'l-btn-selected l-btn-plain-selected' : 'l-btn-selected');
            }
            t.attr('group', opts.group || '');
            t.attr('id', opts.id || '');

            var inner = $('<span class="l-btn-left"></span>').appendTo(t);
            if (opts.text){
                $('<span class="l-btn-text"></span>').html(opts.text).appendTo(inner);
            } else {
                $('<span class="l-btn-text l-btn-empty">&nbsp;</span>').appendTo(inner);
            }

            if (opts.iconCls){
                $('<span class="l-btn-icon">&nbsp;</span>').addClass(opts.iconCls).appendTo(inner);

                inner.addClass('l-btn-icon-'+opts.iconAlign);
            }

            t.unbind('.button').bind('focus.linkbutton', function() {
				if (!opts.disabled) {
					$(this).addClass('l-btn-focus');
				}
			}).bind('blur.button', function() {
                $(this).removeClass('l-btn-focus');
			}).bind('click.button',function(){
                if (!opts.disabled){
                    if (opts.toggle){
                        if (opts.selected){
                            opts.unselect();
                        } else {
                            opts.select();
                        }
                    }
                    opts.onClick.call(this);
                }
                return false;
            });

			this._setSelected(opts.selected);
			this._setDisabled(opts.disabled);
		},

        _setSelected : function(selected) {
            var opts = this;
            if (selected) {
                if (opts.group) {

                    $('div.l-btn[group="'+opts.group+'"]').each(function(){
                        var id = this.id;
                        if(id){
                            var o = erajs.getCmp(id);
                            if (o && o.toggle){
                                $(o.target).removeClass('l-btn-selected l-btn-plain-selected');
                                o.selected = false;
                            }
                        }
                    });
                }
                $(opts.target).addClass(opts.plain ? 'l-btn-selected l-btn-plain-selected' : 'l-btn-selected');
                opts.selected = true;
            } else {
                if (!opts.group) {
                    $(opts.target).removeClass('l-btn-selected l-btn-plain-selected');
                    opts.selected = false;
                }
            }
        },

        _setDisabled : function(disabled) {
            var opts = this;
            var target = opts.target;
            $(target).removeClass('l-btn-disabled l-btn-plain-disabled');
            if (disabled) {
                opts.disabled = true;
                if (target.onclick){
                    opts.onClick = target.onclick;
                    target.onclick = null;
                }
                opts.plain ? $(target).addClass('l-btn-disabled l-btn-plain-disabled') : $(target).addClass('l-btn-disabled');
            } else {
                opts.disabled = false;
            }
        }
	};

    erajs.ui.Button.parseOptions = function(target){
        var t = $(target),
            text = $.trim($(target).html()),
            defaultsOpts = {
                disabled: (t.attr('disabled') ? true : undefined),
                iconCls: (t.attr('icon') || t.attr('iconCls'))
            };
        if(text){
            defaultsOpts["text"] = text;
        }

        return $.extend({}, erajs.ui.parser.parseOptions(t,
            ['id','iconCls','iconAlign','group','size',{plain:'boolean',toggle:'boolean',selected:'boolean'}]
        ),defaultsOpts);
    };

    /**
     * @class erajs.ui.Button.defaults
     */
    erajs.ui.Button.defaults = {
        /**
         * @property {Object}
         * 组件唯一标识
         */
        id: null,

        /**
         * @property {Object}
         * 上级Dom元素id.
         */
        parent : null,

        /**
         * @property {Object}
         * 关联元素id.
         */
        contentEl : null,

        /**
         * @property {Boolean}
         * 为true时，禁用按钮.
         */
        disabled: false,

        /**
         * @property {Boolean}
         * true时，能够切换button的状态,selected或者unselected.
         */
        toggle: false,

        /**
         * @property {Boolean}
         * 定义button的状态，如果选中,那么为true.
         */
        selected: false,

        /**
         * @property {Object}
         * 定义button所属组的名称.
         */
        group: null,

        /**
         * @property {Boolean}
         * 为true时,显示简洁效果(透明背景).
         */
        plain: false,

        /**
         * @property {String}
         * button显示的文字.
         */
        text: '',

        /**
         * @property {Object}
         * 用来在左边显示一个16×16大小图标的css类.
         */
        iconCls: null,

        /**
         * @property {String}
         * button图标的位置，可选:
         *
         * - 'left'
         * - 'right'
         * - 'top'
         * - 'bottom'
         */
        iconAlign: 'left',

        /**
         * @property {String}
         * 按钮的规格. 可选:
         * - 'small'
         * - 'large'
         */
        size: 'small',	// small,large

        /**
         * @event
         * 单击button时触发.
         */
        onClick: function(){}
    };
})();

/*
 * Copyright (c) 2014 www.erayt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 **/
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.ui.Textbox
 * @extends erajs.ui.Textbox.defaults
 *
 * 使用{@link erajs.ui.Textbox.defaults}重写默认值对象.
 *
 * Textbox提供文本框的基础封装。
 *
 * {@img erajs.ui.Textbox/textbox.png}
 *
 * 比如登录系统用户名，密码定义：
 *
 *      @example
 *      <div xtype="panel" title="Login to system" style="width:400px;padding:30px 70px 20px 70px">
 *           <div style="margin-bottom:10px">
 *              <input xtype="textbox" style="width:100%;height:40px;padding:12px"
 *                  data-options="prompt:'Username',iconCls:'icon-man',iconWidth:38">
 *           </div>
 *           <div style="margin-bottom:20px">
 *              <input xtype="textbox" style="width:100%;height:40px;padding:12px"
 *                  data-options="type:'password',prompt:'Password',iconCls:'icon-lock',iconWidth:38">
 *           </div>
 *           <div style="margin-bottom:20px">
 *              <input type="checkbox" checked="checked">
 *                  <span>Remember me</span>
 *           </div>
 *          <div>
 *              <a href="#" xtype="button" data-options="iconCls:'icon-ok'" style="padding:5px 0px;width:100%;">
 *                  <span style="font-size:14px;">Login</span>
 *              </a>
 *          </div>
 *      </div>
 *
 */
(function(){

    function init(self){
        var target = self.target;
        $(target).addClass("textbox-f").hide();

        var tb = $("<span class=\"textbox\">"
                + "<input class=\"textbox-text\" autocomplete=\"off\">"
                + "<span class=\"textbox-addon\"><span class=\"textbox-icon\"></span></span>"
                + "<input type=\"hidden\" class=\"textbox-value\">" + "</span>").insertAfter(target);

        var name = $(target).attr("name");
        if (name) {
            tb.find("input.textbox-value").attr("name", name);
            $(target).removeAttr("name").attr("textboxName", name);
        }
        tb.bind("_resize", function (e, _5) {
            if ($(this).hasClass("erajs-fluid") || _5) {
                resize(self);
            }
            return false;
        });
        return tb;
    }

    function resize(self,width){
        var opts = self.options,
            target = self.target,
            tb = self.textbox,
            parent = tb.parent();

        if (width) {
            opts.width = width;
        }
        if (isNaN(parseInt(opts.width))) {
            var c = $(target).clone();
            c.css("visibility", "hidden");
            c.insertAfter(target);
            opts.width = c.outerWidth();
            c.remove();
        }
        tb.appendTo("body");
        var tbText = tb.find(".textbox-text");
        var btn = tb.find(".textbox-button");
        var tbAddon = tb.find(".textbox-addon");
        var tbIcon = tbAddon.find(".textbox-icon");

        tb._size(opts, parent);

        var button = self.btn;
        if(button){
          //  btn.resize({height: tb.height()});
        }

        btn.css({left: (opts.buttonAlign == "left" ? 0 : ""), right: (opts.buttonAlign == "right" ? 0 : "")});
        tbAddon.css({left: (opts.iconAlign == "left" ? (opts.buttonAlign == "left" ? btn._outerWidth() : 0) : ""), right: (opts.iconAlign == "right" ? (opts.buttonAlign == "right" ? btn._outerWidth() : 0) : "")});
        tbIcon.css({width: opts.iconWidth + "px", height: tb.height() + "px"});
        tbText.css({paddingLeft: (target.style.paddingLeft || ""), paddingRight: (target.style.paddingRight || ""), marginLeft: _18("left"), marginRight: _18("right")});
        if (opts.multiline) {
            tbText.css({paddingTop: (target.style.paddingTop || ""), paddingBottom: (target.style.paddingBottom || "")});
            tbText._outerHeight(tb.height());
        } else {
            var _19 = Math.floor((tb.height() - tbText.height()) / 2);
            tbText.css({paddingTop: _19 + "px", paddingBottom: _19 + "px"});
        }
        tbText._outerWidth(tb.width() - tbIcon.length * opts.iconWidth - btn._outerWidth());
        tb.insertAfter(target);
        opts.onResize.call(target, opts.width, opts.height);
        function _18(_1a) {
            return (opts.iconAlign == _1a ? tbAddon._outerWidth() : 0) + (opts.buttonAlign == _1a ? btn._outerWidth() : 0);
        };
    }

    function _7(self) {
        var opts = self.options,
            target = self.target,
            tb = self.textbox;

        tb.find(".textbox-text").remove();
        if (opts.multiline) {
            $("<textarea class=\"textbox-text\" autocomplete=\"off\"></textarea>").prependTo(tb);
        } else {
            $("<input type=\"" + opts.type + "\" class=\"textbox-text\" autocomplete=\"off\">").prependTo(tb);
        }
        tb.find(".textbox-addon").remove();

        var bb = opts.icons ? $.extend(true, [], opts.icons) : [];
        if (opts.iconCls) {
            bb.push({iconCls: opts.iconCls, disabled: true});
        }
        if (bb.length) {
            var bc = $("<span class=\"textbox-addon\"></span>").prependTo(tb);
            bc.addClass("textbox-addon-" + opts.iconAlign);
            for (var i = 0; i < bb.length; i++) {
                bc.append("<a href=\"javascript:void(0)\" class=\"textbox-icon " + bb[i].iconCls + "\" icon-index=\"" + i + "\"></a>");
            }
        }
        tb.find(".textbox-button").remove();

        if (opts.buttonText || opts.buttonIcon) {
            var _b = $("<a href=\"javascript:void(0)\" class=\"textbox-button\"></a>").prependTo(tb);
            _b.addClass("textbox-button-" + opts.buttonAlign);

           self.btn = new erajs.ui.Button({
                    target : _b[0],
                    text: opts.buttonText,
                    iconCls: opts.buttonIcon,
                    onClick: function () {
                        opts.onClickButton.call(self);
                    }
            });
        }
        setDisable(self, opts.disabled);
        setReadonly(self, opts.readonly);
    }

    function reRender(self) {
        var opts = self.options,
            target = self.target,
            tb = self.textbox,
            tbInput = tb.find(".textbox-text");

        tbInput.attr("placeholder", opts.prompt);
        tbInput.unbind(".textbox");

        if (!opts.disabled && !opts.readonly) {
            tbInput.bind("blur.textbox", function (e) {
                if (!tb.hasClass("textbox-focused")) {
                    return;
                }
                opts.value = $(this).val();
                if (opts.value == "") {
                    $(this).val(opts.prompt).addClass("textbox-prompt");
                } else {
                    $(this).removeClass("textbox-prompt");
                }
                tb.removeClass("textbox-focused");
            }).bind("focus.textbox", function (e) {
                if ($(this).val() != opts.value) {
                    $(this).val(opts.value);
                }
                $(this).removeClass("textbox-prompt");
                tb.addClass("textbox-focused");
            });
            for (var prop in opts.inputEvents) {
                //todo target参数是self？
                tbInput.bind(prop + ".textbox", {self: self}, opts.inputEvents[prop]);
            }
        }

        //附加插件
        var addon = tb.find(".textbox-addon");
        addon.unbind().bind("click", {self: self}, function (e) {
            //层次依次往上找，直到匹配.
            var tbIcon = $(e.target).closest("a.textbox-icon:not(.textbox-icon-disabled)");
            if (tbIcon.length) {
                var index = parseInt(tbIcon.attr("icon-index"));
                var icon = opts.icons[index];
                if (icon && icon.handler) {
                    icon.handler.call(tbIcon[0], e);
                    opts.onClickIcon.call(self, index);
                }
            }
        });
        addon.find(".textbox-icon").each(function (index) {
            var _2b = opts.icons[index];
            var _2c = $(this);
            if (!_2b || _2b.disabled || opts.disabled || opts.readonly) {
                _2c.addClass("textbox-icon-disabled");
            } else {
                _2c.removeClass("textbox-icon-disabled");
            }
        });

        var btn = self.btn;
        if(btn){
            var mode = opts.disabled || opts.readonly;
            if(mode){
                btn.disable();
            }else{
                btn.enable();
            }
        }
    }

    function setReadonly(self,mode){
        var opts = self.options;
        opts.readonly = mode == undefined ? true : mode;
        var tbText = self.textbox.find(".textbox-text");
        tbText.removeAttr("readonly").removeClass("textbox-text-readonly");
        if (opts.readonly || !opts.editable) {
            tbText.attr("readonly", "readonly").addClass("textbox-text-readonly");
        }
    }

    function destroy(self){
        var tb = self.textbox,
            target = self.target;

        tb.remove();
        $(target).remove();
    }

    function setDisable(self, model) {
        var opts = self.options,
            target = self.target,
            tb = self.textbox;

        if (model) {
            opts.disabled = true;
            $(target).attr("disabled", "disabled");
            tb.find(".textbox-text,.textbox-value").attr("disabled", "disabled");
        } else {
            opts.disabled = false;
            $(target).removeAttr("disabled");
            tb.find(".textbox-text,.textbox-value").removeAttr("disabled");
        }
    }

    erajs.ui.Textbox = function(options){
        options = options || {};
        var target = options.target;

        if(!target){
            var contentEl = options.contentEl;
            if(contentEl){ target = $(contentEl)[0];}
        }

        if(target){
            this.target = target;
            this.options = $.extend({}, erajs.ui.Textbox.defaults,
                erajs.ui.Textbox.parseOptions(target),options);

            this.id = this.options.id;
            this.options.originalValue = this.options.value;
            this.textbox = init(this);
        }

        this._render(target);
    };

    erajs.ui.Textbox.prototype = {

        /**
         * @method 更新组件配置项.
         * @param {Object} options 配置项，详细可查看:{@link erajs.ui.Textbox.defaults}.
         */
        updateTextbox : function(options){
            var me = this;
            var opts = $.extend({},me.options, options);
            me.options = opts;
            me._render();
        },

        /**
         * 获取文本框dom对象.
         * @return {HtmlElement} dom对象.
         */
        getTextbox : function(){
            var self = this;
            return self.textbox.find('.textbox-text');
        },

        /**
         * 获取按钮对象.
         * @return {erajs.ui.Button} 按钮组件对象.
         */
        button : function(){
            var self = this;
            return self.btn;
        },

        /**
         * 销毁组件.
         */
        destroy : function(){
            destroy(this);
            erajs.destroy(this);
        },

        /**
         * 改变文本框大小.
         * @param {Number} width 新的宽度.
         */
        resize : function(width){
            resize(this,width)
        },

        /**
         * 禁用文本框.
         */
        disable : function(){
            setDisable(this,true);
            reRender(this);
        },

        /**
         * 启用文本框.
         */
        enable : function(){
            setDisable(this,false);
            reRender(this);
        },

        /**
         * 设置文本框的只读模式.
         * @param {Boolean} mode 只读模式.
         */
        readonly : function(mode){
            setReadonly(this,mode);
            reRender(this);
        },

        /**
         * 清空文本框值.
         */
        clear : function(){
            this.setValue("");
        },

        /**
         * @private
         * 设置文本框显示文本.
         * @param text
         */
        setText : function(text){
            var self = this,
                opts = self.options,
                tb = self.getTextbox();

            if (self.getText() != text) {
                opts.value = text;
                tb.val(text);
            }
            if (!tb.is(":focus")) {
                if (text) {
                    tb.removeClass("textbox-prompt");
                } else {
                    tb.val(opts.prompt).addClass("textbox-prompt");
                }
            }
        },

        /**
         * @private
         */
        initValue : function(value){
            var self = this,
                opts = self.options,
                target = self.target;

            opts.value = "";
            self.setText(value);
            self.textbox.find(".textbox-value").val(value);
            $(target).val(value);
        },

        /**
         * 设置文本框的值.
         * @param value
         */
        setValue : function(value){
            var self = this,
                opts = self.options,
                value_ = self.getValue();

            self.initValue(value);

            if (value_ != value) {
                opts.onChange.call(this, value, value_);
            }
        },

        /**
         * @private
         * 获取文本框的文本.
         * @return {String} 文本值.
         */
        getText : function(){
            var self = this,
                target = self.textbox,
                t = target.find('.textbox-text');

            if (t.is(":focus")) {
                return t.val();
            } else {
                return self.options.value;
            }
        },

        /**
         * 获取文本值.
         * @returns {String} 文本值.
         */
        getValue : function(){
            return this.textbox.find(".textbox-value").val();
        },

        /**
         * 重置文本框值.
         */
        reset : function(){
            var self = this,
                opts = self.options;

            self.setValue(opts.originalValue);
        },

        /**
         * 根据图标索引获取图标dom对象.
         * @param {Number} index 索引
         * @returns {HtmlElement} dom元素对象.
         */
        getIcon : function(index){
            var self = this;
            return self.textbox.find(".textbox-icon:eq(" + index + ")");
        },

        getTipX : function(){
            var self = this,
                opts = self.options,
                tb = self.textbox;

            var aWidth = tb.find(".textbox-addon")._outerWidth();
            var bWidth = tb.find(".textbox-button")._outerWidth();
            if (opts.tipPosition == "right") {
                return (opts.iconAlign == "right" ? aWidth : 0) + (opts.buttonAlign == "right" ? bWidth : 0) + 1;
            } else {
                if (opts.tipPosition == "left") {
                    return (opts.iconAlign == "left" ? -aWidth : 0) + (opts.buttonAlign == "left" ? -bWidth : 0) - 1;
                } else {
                    return aWidth / 2 * (opts.iconAlign == "right" ? 1 : -1);
                }
            }
        },

        _render : function(target){
            var opts = this.options;
            _7(this);
            reRender(this);
            resize(this);
            this.initValue(this.options.value);
        }
    };

    /**
     * @class erajs.ui.Textbox.defaults
     */
    erajs.ui.Textbox.defaults = {

        /**
         * @property {String} 组件唯一标识.
         */
        id : null,


        /**
         * @property {String/Number} 文本框宽度.
         */
        width: "auto",

        /**
         * @property {Number} 文本框高度.
         */
        height: 22,

        /**
         * @property {String} 提示信息.
         */
        prompt: "",

        /**
         * @property {String} 值.
         */
        value: "",

        /**
         * @property {String} 类型，比如密码文本框,type为'password'.示例如下：
         *
         *      @example
         *      <input xtype="textbox" style="width:100%;height:40px;"
         *          data-options="type:'password',prompt:'Password',iconCls:'icon-lock',iconWidth:38">
         *
         */
        type: "text",

        /**
         * @property {Boolean} 是否多行，为true时，相当于{@link #type} 为'textarea'.
         */
        multiline: false,

        /**
         * @property {Boolean} 是否可编辑.
         */
        editable: true,

        /**
         * @property {Boolean} 是否禁用.
         */
        disabled: false,

        /**
         * @property {Boolean} 是否只读.
         */
        readonly: false,

        /**
         * @property {Array} 图标组，示例如下：
         *
         *      @example
         *      <input id="tt" xtype="textbox" style="width:400px" data-options="
         *            prompt: 'Input something here!',
         *            iconWidth: 22,
         *            icons: [{
         *                   iconCls:'icon-add',
         *                   handler: function(e){
         *                       e.data.self.setValue('Something added!');
         *                   }
         *               },{
         *                   iconCls:'icon-remove',
         *                   handler: function(e){
         *                       e.data.self.clear();
         *                   }
         *               },{
         *                   iconCls:'icon-search',
         *                   handler: function(e){
         *                       var v = e.data.self.getValue();
         *                       alert('The inputed value is ' + (v ? v : 'empty'));
         *                   }
         *               }]
         *            ">
         */
        icons: [],

        /**
         * @property {String} 图标样式.
         */
        iconCls: null,

        /**
         * @property {String} 图标对齐方式.
         */
        iconAlign: "right",

        /**
         * @property {Number} 图标宽度.
         */
        iconWidth: 18,

        /**
         * @property {String} 按钮文本.
         */
        buttonText: "",

        /**
         * @property {String} 按钮图标样式.
         */
        buttonIcon: null,

        /**
         * @property {String} 按钮对齐方式.
         */
        buttonAlign: "right",

        inputEvents: {
            blur: function (e) {
                var self = e.data.self,
                    opts = self.options;

                self.setValue(opts.value);
            }
        },

        /**
         * @event 值改变时触发.
         * @param {String} newValue 新的值
         * @param {String} oldValue 原来的值
         */
        onChange: function (newValue,oldValue) {},

        /**
         * @event 组件大小改变时触发.
         * @param {Number} width
         * @param {Number} height
         */
        onResize: function (width,height) {},

        /**
         * @event 点击按钮时触发.
         */
        onClickButton: function () {},

        /**
         * @event 点击图标时触发.
         * @param {Number} index 图标索引.
         */
        onClickIcon: function (index) {}

    };

    erajs.ui.Textbox.parseOptions = function(target){
        var t = $(target);
        return $.extend({}, erajs.ui.parser.parseOptions(t, [
            "id","prompt", "iconCls", "iconAlign", "buttonText", "buttonIcon", "buttonAlign",
            {multiline: "boolean", editable: "boolean", iconWidth: "number"}
          ]),{
             value: (t.val() || undefined),
             type: (t.attr("type") ? t.attr("type") : undefined),
             disabled: (t.attr("disabled") ? true : undefined),
             readonly: (t.attr("readonly") ? true : undefined)
            }
        );
    };
})();
/*
 * Copyright (c) 2014 www.erayt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 **/
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.ui.Filebox
 * @extends erajs.ui.Filebox.defaults
 *
 * 使用{@link erajs.ui.Filebox.defaults}重写默认值对象。
 *
 * 该filebox组件形成文件域,由于浏览器的安全问题的一些方法，如“SetValue”无法使用在filebox组件。
 *
 * {@img erajs.ui.Filebox/filebox.png}
 *
 * ## 使用案例
 *
 * 创建文件上传组件。
 *
 *      @example
 *      <input xtype="filebox" name="file1" data-options="prompt:'Choose a file...'" style="width:200px">
 *
 */
(function(){

    erajs.ui.Filebox = function(options){
        options = options || {};
        var target = options.target;

        if(!target){
            var contentEl = options.contentEl;
            if(contentEl){ target = $(contentEl)[0];}
        }

        if(target){
            this.target = target;
            this.options = $.extend({}, erajs.ui.Filebox.defaults,
                erajs.ui.Filebox.parseOptions(target),options);

            this.id = this.options.id;
        }

        this._render(target);
    };

    erajs.ui.Filebox.prototype = {

        updateFilebox : function(options){
            var self = this;
            self.textbox.updateTextbox(options);
        },

        /**
         * 销毁组件.
         */
        destroy : function(){
            var self = this;
            self.textbox.destroy(this);
            erajs.destroy(this);
        },

        /**
         * 改变文本框大小.
         * @param {Number} width 新的宽度.
         */
        resize : function(width){
            var self = this;
            self.textbox.resize(self,width);
        },

        /**
         * 清空文本框值.
         */
        clear : function(){
            var self = this;
            self.textbox.setValue("");
        },

        /**
         * 获取文本值.
         * @returns {String} 文本值.
         */
        getValue : function(){
            var self = this;
            return self.textbox.textbox.find(".textbox-value").val();
        },

        _render : function(target){
            var self = this,
                opts = self.options,
                target = target || self.target;

            $(target).addClass("filebox-f");

            var textbox = new erajs.ui.Textbox($.extend({},opts,{
                target : target[0],
                onClickButton:function(){
                    self.filebox.find(".textbox-value").click();
                    opts.onClickButton.call(self);
                }
            }));

            self.textbox = textbox;

            textbox.getTextbox( ).attr("readonly","readonly");

            self.filebox=$(target).next().addClass("filebox");
            self.filebox.find(".textbox-value").remove();
            opts.oldValue="";
            var tbValue=$("<input type=\"file\" class=\"textbox-value\">").appendTo(self.filebox);
            tbValue.attr("name",$(target).attr("textboxname")||"").change(function(){
                self.textbox.setText(this.value);
                opts.onChange.call(self,this.value,opts.oldValue);
                opts.oldValue=this.value;
            });
        }
    };

    /**
     * @class erajs.ui.Filebox.defaults
     * @extends erajs.ui.Textbox.defaults
     */
    erajs.ui.Filebox.defaults = $.extend({},erajs.ui.Textbox.defaults,{

        /**
         * 按钮文本.
         */
        buttonText:"Choose File"

    });

    erajs.ui.Filebox.parseOptions = function(target){
        var t = $(target);
        return $.extend({},erajs.ui.Textbox.parseOptions(t),{});
    };

})();
/*
 * Copyright (c) 2014 www.erayt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 */
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.ui.Menu
 * @extends erajs.ui.Menu.defaults
 *
 * 使用{@link erajs.ui.Menu.defaults}重写默认值对象.
 *
 * 菜单通常用于上下文菜单。这是基本组件构建其他菜单组件如menubutton。它还可以用于导航.
 *
 * {@img erajs.ui.Menu/menu.png}
 *
 * ## 使用案例
 *
 * ### 创建菜单
 *
 * 1、使用HTML标签创建菜单必须对`<div>`标签引用'menu' xtype，每个菜单项都将使用`<div>`标签创建。
 *  为菜单添加'iconCls'属性可以指定一个显示在菜单项左侧的图标。
 *  对菜单引用'menu-sep'类将生成一条菜单分隔线。
 *
 *      <div id="mm" xtype="menu" style="width:120px;">
 *            <div>New</div>
 *            <div>
 *                  <span>Open</span>
 *                  <div style="width:150px;">
 *                      <div><b>Word</b></div>
 *                      <div>Excel</div>
 *                      <div>PowerPoint</div>
 *                  </div>
 *            </div>
 *            <div data-options="iconCls:'icon-save'">Save</div>
 *            <div class="menu-sep"></div>
 *            <div>Exit</div>
 *       </div>
 *
 * ### 显示菜单
 *
 *  当一个菜单创建完毕，它是隐藏而不可见的，调用'show'方法可以显示菜单。.
 *
 *       erajs.getCmp('mm').show({
 *           left: 200,
 *           top: 100
 *       });
 *
 * ### 菜单项属性
 *
 *  菜单项代表一个单独的项目,是显示在一个菜单。它包含以下属性:
 *
 * - `id` : 菜单项"id".
 * - `text` : 菜单项名称.
 * - `iconCls` : 一个CSS类在菜单项右边显示一个16 x16图标.
 * - `href` :  设置单击菜单项链接.
 * - `disabled` : 定义如果禁用菜单项，默认false.
 * - `onclick` : 单击菜单项函数.
 *
 */
(function(){

    function init(self){
        var target = self.target,
            opts = self.options;

        $(target).appendTo('body');
        $(target).addClass('menu-top');	// the top menu

        $(document).unbind('.menu').bind('mousedown.menu', function(e){
            var m = $(e.target).closest('div.menu,div.combo-p');
            if (m.length){return}
          //  $('body>div.menu-top:visible').menu('hide');
            self.hide();
        });

        var menus = splitMenu($(target));
        for(var i=0; i<menus.length; i++){
            createMenu(menus[i]);
        }


        function splitMenu(menu){
            var menus = [];
            menu.addClass('menu');
            menus.push(menu);
            if (!menu.hasClass('menu-content')){
                menu.children('div').each(function(){
                    var submenu = $(this).children('div');
                    if (submenu.length){
                        submenu.insertAfter(target);
                        this.submenu = submenu;		// point to the sub menu
                        var mm = splitMenu(submenu);
                        menus = menus.concat(mm);
                    }
                });
            }
            return menus;
        }

        function createMenu(menu){
            var wh = erajs.ui.parser.parseOptions(menu, ['width','height']);
            menu[0].originalHeight = wh.height || 0;
            if (menu.hasClass('menu-content')){
                menu[0].originalWidth = wh.width || menu._outerWidth();
            } else {
                menu[0].originalWidth = wh.width || 0;
                menu.children('div').each(function(){
                    var item = $(this);
                    var itemOpts = $.extend({}, erajs.ui.parser.parseOptions(item,['name','iconCls','href',{separator:'boolean'}]), {
                        disabled: (item.attr('disabled') ? true : undefined)
                    });
                    if (itemOpts.separator){
                        item.addClass('menu-sep');
                    }
                    if (!item.hasClass('menu-sep')){
                        item[0].itemName = itemOpts.name || '';
                        item[0].itemHref = itemOpts.href || '';

                        var text = item.addClass('menu-item').html();
                        item.empty().append($('<div class="menu-text"></div>').html(text));
                        if (itemOpts.iconCls){
                            $('<div class="menu-icon"></div>').addClass(itemOpts.iconCls).appendTo(item);
                        }
                        if (itemOpts.disabled){
                            setDisabled(self, item[0], true);
                        }
                        if (item[0].submenu){
                            $('<div class="menu-rightarrow"></div>').appendTo(item);	// has sub menu
                        }

                        bindMenuItemEvent(self, item);
                    }
                });
                $('<div class="menu-line"></div>').prependTo(menu);
            }
            setMenuWidth(self, menu);
            menu.hide();

            bindMenuEvent(self, menu);
        }
    }

    function bindMenuEvent(self, menu){
        menu.unbind('.menu').bind('mouseenter.menu', function(){
            if (self.timer){
                clearTimeout(self.timer);
                self.timer = null;
            }
        }).bind('mouseleave.menu', function(){
            if (self.options.hideOnUnhover){
                self.timer = setTimeout(function(){
                    hideAll(self);
                }, 100);
            }
        });
    }

    function hideAll(self){
        var target = self.target;
        if ($(target).is(':visible')){
            hideMenu($(target));
            self.options.onHide.call(self);
        }
        return false;
    }

    function hideMenu(menu){
        if (!menu) return;
        hideit(menu);
        menu.find('div.menu-item').each(function(){
            if (this.submenu){
                hideMenu(this.submenu);
            }
            $(this).removeClass('menu-active');
        });

        function hideit(m){
            m.stop(true,true);
            if (m[0].shadow){
                m[0].shadow.hide();
            }
            m.hide();
        }
    }

    function bindMenuItemEvent(self, item){
        if (!item.hasClass('menu-item')){return}
        item.unbind('.menu');
        item.bind('click.menu', function(){
            if ($(this).hasClass('menu-item-disabled')){
                return;
            }
            // only the sub menu clicked can hide all menus
            if (!this.submenu){
                hideAll(self);
                var href = $(this).attr('href');
                if (href){
                    location.href = href;
                }
            }
            var item = self.getItem(this);
            self.options.onClick.call(self, item);
        }).bind('mouseenter.menu', function(e){
            // hide other menu
            item.siblings().each(function(){
                if (this.submenu){
                    hideMenu(this.submenu);
                }
                $(this).removeClass('menu-active');
            });
            // show this menu
            item.addClass('menu-active');

            if ($(this).hasClass('menu-item-disabled')){
                item.addClass('menu-active-disabled');
                return;
            }

            var submenu = item[0].submenu;
            if (submenu){
                self.show({
                    menu: submenu,
                    parent: item
                });
            }
        }).bind('mouseleave.menu', function(e){
            item.removeClass('menu-active menu-active-disabled');
            var submenu = item[0].submenu;
            if (submenu){
                if (e.pageX>=parseInt(submenu.css('left'))){
                    item.addClass('menu-active');
                } else {
                    hideMenu(submenu);
                }

            } else {
                item.removeClass('menu-active');
            }
        });
    }

    function setMenuWidth(self, menu){
        var opts = self.options;
        var style = menu.attr('style') || '';
        menu.css({
            display: 'block',
            left:-10000,
            height: 'auto',
            overflow: 'hidden'
        });

        var el = menu[0];
        var width = el.originalWidth || 0;
        if (!width){
            width = 0;
            menu.find('div.menu-text').each(function(){
                if (width < $(this)._outerWidth()){
                    width = $(this)._outerWidth();
                }
                $(this).closest('div.menu-item')._outerHeight($(this)._outerHeight()+2);
            });
            width += 40;
        }

        width = Math.max(width, opts.minWidth);
        var height = el.originalHeight || menu.outerHeight();
        var lineHeight = Math.max(el.originalHeight, menu.outerHeight()) - 2;
        menu._outerWidth(width)._outerHeight(height);
        menu.children('div.menu-line')._outerHeight(lineHeight);

        style += ';width:' + el.style.width + ';height:' + el.style.height;

        menu.attr('style', style);
    }

    function setDisabled(self, itemEl, disabled){
        var t = $(itemEl);
        if (!t.hasClass('menu-item')){return}

        if (disabled){
            t.addClass('menu-item-disabled');
            if (itemEl.onclick){
                itemEl.onclick1 = itemEl.onclick;
                itemEl.onclick = null;
            }
        } else {
            t.removeClass('menu-item-disabled');
            if (itemEl.onclick1){
                itemEl.onclick = itemEl.onclick1;
                itemEl.onclick1 = null;
            }
        }
    }

    function showMenu(self, param){
        var left,top;
        param = param || {};
        var target = self.target;

        var menu = $(param.menu || target);
        if (menu.hasClass('menu-top')){
            var opts = self.options;
            $.extend(opts, param);
            left = opts.left;
            top = opts.top;
            if (opts.alignTo){
                var at = $(opts.alignTo);
                left = at.offset().left;
                top = at.offset().top + at._outerHeight();
                if (opts.align == 'right'){
                    left += at.outerWidth() - menu.outerWidth();
                }
            }
            if (left + menu.outerWidth() > $(window)._outerWidth() + $(document)._scrollLeft()){
                left = $(window)._outerWidth() + $(document).scrollLeft() - menu.outerWidth() - 5;
            }
            if (left < 0){left = 0;}
            if (top + menu.outerHeight() > $(window)._outerHeight() + $(document).scrollTop()){
                top = $(window)._outerHeight() + $(document).scrollTop() - menu.outerHeight() - 5;
            }
        } else {
            var parent = param.parent;	// the parent menu item
            left = parent.offset().left + parent.outerWidth() - 2;
            if (left + menu.outerWidth() + 5 > $(window)._outerWidth() + $(document).scrollLeft()){
                left = parent.offset().left - menu.outerWidth() + 2;
            }
            var top = parent.offset().top - 3;
            if (top + menu.outerHeight() > $(window)._outerHeight() + $(document).scrollTop()){
                top = $(window)._outerHeight() + $(document).scrollTop() - menu.outerHeight() - 5;
            }
        }
        menu.css({left:left,top:top});
        menu.show(0, function(){
            if (!menu[0].shadow){
                menu[0].shadow = $('<div class="menu-shadow"></div>').insertAfter(menu);
            }
            menu[0].shadow.css({
                display:'block',
                zIndex:erajs.ui.Menu.defaults.zIndex++,
                left:menu.css('left'),
                top:menu.css('top'),
                width:menu.outerWidth(),
                height:menu.outerHeight()
            });
            menu.css('z-index', erajs.ui.Menu.defaults.zIndex++);
            if (menu.hasClass('menu-top')){
                self.options.onShow.call(self);
            }
        });
    }

    function removeItem(self, itemEl){
        function removeit(el){
            if (el.submenu){
                el.submenu.children('div.menu-item').each(function(){
                    removeit(this);
                });
                var shadow = el.submenu[0].shadow;
                if (shadow) shadow.remove();
                el.submenu.remove();
            }
            $(el).remove();
        }
        removeit(itemEl);
    }

    function destroyMenu(self){
        var target = self.target;
        $(target).children('div.menu-item').each(function(){
            removeItem(self, this);
        });
        if (target.shadow) target.shadow.remove();
        $(target).remove();
    }

    function findItem(self,text){
        var target = self.target;
        var result = null;
        var tmp = $('<div></div>');
        function find(menu){
            menu.children('div.menu-item').each(function(){
                var item = self.getItem(this);
                var s = tmp.empty().html(item.text).text();
                if (text == $.trim(s)) {
                    result = item;
                } else if (this.submenu && !result){
                    find(this.submenu);
                }
            });
        }
        find($(target));
        tmp.remove();
        return result;
    }

    function appendItem(self, param){
        var target = self.target;
        var menu = $(target);
        if (param.parent){
            if (!param.parent.submenu){
                var submenu = $('<div class="menu"><div class="menu-line"></div></div>').appendTo('body');
                submenu.hide();
                param.parent.submenu = submenu;
                $('<div class="menu-rightarrow"></div>').appendTo(param.parent);
            }
            menu = param.parent.submenu;
        }
        if (param.separator){
            var item = $('<div class="menu-sep"></div>').appendTo(menu);
        } else {
            var item = $('<div class="menu-item"></div>').appendTo(menu);
            $('<div class="menu-text"></div>').html(param.text).appendTo(item);
        }
        if (param.iconCls) $('<div class="menu-icon"></div>').addClass(param.iconCls).appendTo(item);
        if (param.id) item.attr('id', param.id);
        if (param.name){item[0].itemName = param.name}
        if (param.href){item[0].itemHref = param.href}
        if (param.onclick){
            if (typeof param.onclick == 'string'){
                item.attr('onclick', param.onclick);
            } else {
                item[0].onclick = eval(param.onclick);
            }
        }
        if (param.handler){item[0].onclick = eval(param.handler)}
        if (param.disabled){setDisabled(target, item[0], true)}

        bindMenuItemEvent(self, item);
        bindMenuEvent(self, menu);
        setMenuWidth(self, menu);
    }

    erajs.ui.Menu = function(options){
        options = options || {};
        var target = options.target;
        if(!target){
            var contentEl = options.contentEl;
            if(contentEl){
                target = $(contentEl);
            }
        }
        if(target){
            this.target = target;
            this.options = $.extend({}, erajs.ui.Menu.defaults,
                erajs.ui.Menu.parseOptions(target),options);

            this.id = this.options.id;
            init(this);
        }

        this._render(target);
    };

    erajs.ui.Menu.prototype = {

        /**
         * 更新menu参数配置项.
         * @param {erajs.ui.Menu.defaults} options 参数项对象
         */
        updateMenu : function(options){
            var opts = this.options;
            $.extend({},opts,options);
            this._render();
        },

        /**
         * 在一个特定的位置显示菜单.
         * @param {Object} pos
         * @param {Number} [pos.left] 新的左边距.
         * @param {Number} [pos.top] 新的顶边距.
         */
        show : function(pos){
            showMenu(this, pos);
        },

        /**
         * 隐藏菜单.
         */
        hide : function(){
                hideAll(this);
        },

        /**
         * 销毁菜单组件.
         */
        destroy : function(){
            destroyMenu(this);
        },

        /**
         * 设置特定的菜单文本，'param'参数包含2个属性：
         * @param {Object} param
         * @param {HtmlElement} [param.target] DOM对象，将要被设置的菜单项.
         * @param {String} [param.text] 新的文本值.
         */
        setText : function(param){
            $(param.target).children('div.menu-text').html(param.text);
        },

        /**
         * 设置特定的菜单项图标，'param'参数包含2个属性：
         * @param {Object} param
         * @param {HtmlElement} [param.target] DOM对象，将要被设置的菜单项.
         * @param {String} [param.iconCls] 新的图标css类.
         */
        setIcon : function(param){
            $(param.target).children('div.menu-icon').remove();
            if (param.iconCls){
                $('<div class="menu-icon"></div>').addClass(param.iconCls).appendTo(param.target);
            }
        },

        /**
         * 获取菜单项数据并将其返回.
         * 示例代码：
         *
         *      <div id="mm" xtype="menu" style="width:200px">
         *          <div>新增</div>
         *          <div id="m-open">打开</div>
         *          <div>保存</div>
         *      </div>
         *
         *      var itemEl = $('#m-open')[0];  // the menu item element
         *      var menu = erajs.getCmp('mm');
         *      var item = menu.getItem(itemEl);
         *      console.log(item);
         *
         * @param itemEl
         *
         * @return {Object} 数据项数据.
         * @return {HtmlElement} target DOM对象，菜单项目.
         * @return {String} id：分配给元素的ID.
         * @return {String} text 菜单项的文本.
         * @return {String} href 超链接地址.
         * @return {Boolean} disabled 菜单项是启用还是禁用.
         * @return {Function} onclick 当用户点击菜单时将要执行的函数.
         * @return {String} iconCls 图标css类.
         */
        getItem : function(itemEl){
            var t = $(itemEl);
            var item = {
                target: itemEl,
                id: t.attr('id'),
                text: $.trim(t.children('div.menu-text').html()),
                disabled: t.hasClass('menu-item-disabled'),
                name: itemEl.itemName,
                href: itemEl.itemHref,
                onclick: itemEl.onclick
            }
            var icon = t.children('div.menu-icon');
            if (icon.length){
                var cc = [];
                var aa = icon.attr('class').split(' ');
                for(var i=0; i<aa.length; i++){
                    if (aa[i] != 'menu-icon'){
                        cc.push(aa[i]);
                    }
                }
                item.iconCls = cc.join(' ');
            }
            return item;
        },

        /**
         * 查找特定的菜单项，与
         * @localdoc {@link #getItem}
         * getItem方法返回的对象相同.
         *
         * @param {String} text
         * @returns {Object}
         */
        findItem : function(text){
            var self = this;
            return findItem(self, text);
        },

        /**
         * 添加一个新的菜单项,"param"参数表示新条目属性,
         * 默认情况下,添加项目将成为一个顶级菜单项,
         * 附加的子菜单项,父属性应该设置为指定父条目元素,已经有子条目.
         *
         * @param {Object} options
         * @param {String} [options.parent] 待添加新菜单的DOM对象，如果没有被设置，新菜单项将会被作为顶级菜单添加.
         * @param {String} [options.text] 菜单项文本.
         * @param {String} [options.href] 超链接地址.
         * @param {String/Function} [options.onclick] 当用户点击菜单项时将要被执行的脚本代码或者函数.
         * @param {String} [options.iconCls] 图标类.
         */
        appendItem : function(options){
            appendItem(this, options);
        },

        /**
         * 移除特定的菜单项
         * @param {HtmlElement} itemEl
         */
        removeItem : function(itemEl){
            removeItem(this, itemEl);
        },

        /**
         * 启用指定菜单项.
         * @param {HtmlElement} itemEl
         */
        enableItem : function(itemEl){
            setDisabled(this, itemEl, false);
        },

        /**
         * 禁用指定菜单项.
         * @param {HtmlElement} itemEl
         */
        disableItem : function(itemEl){
            setDisabled(this, itemEl, true);
        },

        _render : function(target){
            var self = this;
            $(target).css({
                left: self.options.left,
                top: self.options.top
            });
        }
    };

    /**
     * @class erajs.ui.Menu.defaults
     */
    erajs.ui.Menu.defaults = {
        /**
         * @property {String} 组件唯一标识
         */
        id : null,

        /**
         * @property {String} 关联元素ID
         */
        contentEl : null,

        /**
         * @property {Number} 菜单的z-index样式,从第一个菜单开始递增.
         */
        zIndex:110000,

        /**
         * @property {Number} 菜单的左边距.
         */
        left: 0,

        /**
         * @property {Number} 菜单的顶边距.
         */
        top: 0,

        /**
         * @property {String} 对齐元素ID.
         */
        alignTo: null,

        /**
         * @property {String} 对齐方式,{@link #alignTo} 不为空时有效.
         */
        align: 'left',

        /**
         * @property {Number}
         */
        minWidth: 120,

        /**
         * @property {Boolean}
         * 为true时,鼠标退出时自动隐藏菜单.
         */
        hideOnUnhover: true,

        /**
         * @event 当一个菜单被显示后触发.
         */
        onShow: function(){},

        /**
         * @event
         * 在一个菜单被隐藏后触发.
         */
        onHide: function(){},

        /**
         * @event
         * 当一个菜单被点击时触发.
         * 示例代码：
         *
         *      <div id="menu" xtype="menu" data-options="onClick:menuHandler" style="width:120px;">
         *          <div data-options="name:'new'">New</div>
         *          <div data-options="name:'save',iconCls:'icon-save'">Save</div>
         *          <div data-options="name:'print',iconCls:'icon-print'">Print</div>
         *          <div class="menu-sep"></div>
         *          <div data-options="name:'exit'">Exit</div>
         *      </div>
         *
         *      <script type="text/javascript">
         *          function menuHandler(item){
		 *              alert(item.name)
	     *          }
         *      </script>
         *
         * @param {Object} item
         */
        onClick: function(item){}
    };

    erajs.ui.Menu.parseOptions = function(target){
        var t = $(target);
        return $.extend({}, erajs.ui.parser.parseOptions(t, [
            'id','left','top',{
                minWidth:'number',
                hideOnUnhover:'boolean'
            }
        ]));
    };
})();
/*
 * Copyright (c) 2014 www.erayt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 */
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.ui.Menubutton
 * @extends erajs.ui.Menubutton.defaults
 *
 * 继承{@link erajs.ui.Button.defaults}，使用{@link erajs.ui.Menubutton.defaults}重载默认值。
 *
 * 菜单按钮的是下拉菜单的一部分，由一个链接按钮和菜单组成。这个链接菜单默认将隐藏显示在菜单内。
 * 当用户单击或鼠标移动到链接按钮，菜单将显示允许点击它。
 *
 *  {@img erajs.ui.Menubutton/menubutton.png}
 *
 * ## 依赖关系
 *
 * - {@link erajs.ui.Munu Munu}
 * - {@link erajs.ui.Button Button}
 *
 * ## 使用案例
 *
 * 通常情况下使用标签创建菜单按钮。
 *
 *      @example
 *      <div id="hebtn" xtype="menubutton" data-options="menu:'#mm2',iconCls:'icon-help'"
 *          style="color: #666;">帮助</div>
 *      <div id="mm2" style="width:100px;color: #666;">
*             <div>Help</div>
*             <div>Update</div>
*             <div>About</div>
 *        </div>
 *
 *
 */
(function(){

    function init(self) {
        var opts = self.options,
            target = self.target,
            t = $(target);

        var button = new erajs.ui.Button(opts);
        self.button = button;

        t.removeClass(opts.cls.btn1 + " " + opts.cls.btn2).addClass("m-btn");
        t.removeClass("m-btn-small m-btn-medium m-btn-large").addClass("m-btn-" + opts.size);

        var btnLeft = t.find(".l-btn-left");
        $("<span></span>").addClass(opts.cls.arrow).appendTo(btnLeft);
        $("<span></span>").addClass("m-btn-line").appendTo(btnLeft);
        if (opts.menu) {
            var menuTarget = $(opts.menu);
            var menu = new erajs.ui.Menu($.extend({},opts,{
                id : self.id + '-menu',
                target : menuTarget[0]
            }));
            self.menu = menu;

            var mOpts = menu.options;
            var onShow = mOpts.onShow;
            var onHide = mOpts.onHide;

            //显示隐藏时，触发相应的onShow,onHide事件；
            $.extend(mOpts, {
                onShow : function() {
                    var options = this.options;
                    var alignTo = $(options.alignTo);
                    var options_ = self.options;
                    alignTo.addClass((options_.plain == true) ? options_.cls.btn2 : options_.cls.btn1);
                    onShow.call(this);
                },
                onHide : function() {
                    var options  = this.options;
                    var _d = $(options.alignTo);
                    var _e = self.options;
                    _d.removeClass((_e.plain == true) ? _e.cls.btn2 : _e.cls.btn1);
                    onHide.call(this);
                }
            });
        }
        setDisabled(self, opts.disabled);
    }

    function setDisabled(self, disabled) {
          var button = self.button;
            target = self.target,
            options = self.options;

        options.disabled = disabled;
        var btn = $(target);
        var t = btn.find("." + options.cls.trigger);
        if (!t.length) {
            t = btn;
        }
        t.unbind(".menubutton");
        if (disabled) {
            button.disable();
        } else {
            button.enable();
            var timer = null;
            t.bind("click.menubutton", function() {
                bindEvents(self);
                return false;
            }).bind("mouseenter.menubutton", function() {
                timer = setTimeout(function() {
                    bindEvents(self);
                }, options.duration);
                return false;
            }).bind("mouseleave.menubutton", function() {
                if (timer) {
                    clearTimeout(timer);
                }
            });
        }
    };

    function bindEvents(self) {
        var opts = self.options;
        var target = self.target;

        if (opts.disabled || !self.menu) {
            return;
        }

        //显示menu前，先隐藏所有menu面板，及shadow层，激活状态；
        hideMenuPanel(self);

        var menu = self.menu;
        var btn = $(target);
        if (menu) {
            menu.options.alignTo = btn;
            menu.show({
                alignTo : btn,
                align : opts.menuAlign
            });
        }
        btn.blur();
    }

     // TODO:当鼠标移开menubutton时，目前是通过jquery的方式来做相关处理，
     // 这样有个弊端，不能触发onHide事件
    function hideMenuPanel(self){
        var opts = self.options;
        $("body>div.menu-top").hide();
        $("body>div.menu-shadow").hide();
        $("div[xtype='menubutton']")
            .removeClass(opts.cls.btn1)
            .removeClass(opts.cls.btn2);
    }

    erajs.ui.Menubutton = function(options){
        options = options || {};
        var target = options.target;
        if(!target){
            var contentEl = options.contentEl;
            if(contentEl){
                target = $(contentEl);
            }
        }
        if(target){
            this.target = target;
            this.options = $.extend({}, erajs.ui.Menubutton.defaults,
                erajs.ui.Menubutton.parseOptions(target),options);

            this.id = this.options.id;
            $(target).removeAttr("disabled");
        }

        this._render();
    };

    erajs.ui.Menubutton.prototype = {

        /**
         * 更新参数配置项.
         * @param options
         */
        menubutton : function(options){
            var opts = $.extend(this.options, options);
            this.options = opts;
        },

        /**
         * 获取Menu对象.
         * @returns {erajs.ui.Menu}
         */
        getMenu : function(){
            var menu = this.menu;
            return menu ? menu : null;
        },

        /**
         * 启用组件.
         */
        enable : function() {
            setDisabled(this,false);
        },

        /**
         * 禁用组件.
         */
        disable : function() {
            setDisabled(this,true);
        },

        /**
         * 销毁组件.
         */
        destroy : function() {
            var opts = this.options;
            var target = this.target;
            if (opts.menu) {
                this.menu.destroy();
            }
            $(target).remove();
            erajs.destroy(this);
        },

        _render : function(){
            init(this);
        }
    };

    /**
     * @class erajs.ui.Menubutton.defaults
     * @extends erajs.ui.Button.defaults
     */
    erajs.ui.Menubutton.defaults = $.extend({}, erajs.ui.Button.defaults, {
        /**
         * @property {String}
         */
        plain : true,

        /**
         * @property {String}
         */
        menu : null,

        /**
         * @property {String}
         */
        menuAlign : "left",

        /**
         * @property {Number}
         */
        duration : 100,

        /**
         * @property {Object} cls
         * @property {String} cls.btn1
         * @property {String} cls.btn2
         * @property {String} cls.arrow
         * @property {String} cls.trigger
         */
        cls : {
            btn1 : "m-btn-active",
            btn2 : "m-btn-plain-active",
            arrow : "m-btn-downarrow",
            trigger : "m-btn"
        }
    });

    erajs.ui.Menubutton.parseOptions = function(target){
        var t = $(target);
        return $.extend({}, erajs.ui.Button.parseOptions(target),
            erajs.ui.parser.parseOptions(t, ["menu", {
                plain : "boolean",
                duration : "number"
        }]));
    };

})();
/*
 * Copyright (c) 2014 www.erayt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 **/
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.ui.Tooltip
 *
 * 使用{@link erajs.ui.Tooltip.defaults}重写默认值对象。
 *
 * 当用户将鼠标指针移动到一个元素上,会出现一个提示消息窗口显示额外的信息。
 * 提示的内容可以包含任何html元素来自页面或通过ajax.
 *
 * {@img erajs.ui.Tooltip/tooltip.png}
 *
 * ## 使用案例
 *
 * 创建.
 * 提示框组件可以通过html标签创建。使用html标签创建更容易，只需要对`<a>`标签引用'tooltip'的xtype。
 *
 *      @example
 *       <a href="#" id="ttip" title="这是提示信息." xtype="tooltip" data-options="position: 'top'">悬浮这</a>
 *
 */
(function(){

    "use strict";

    erajs.ui.Tooltip = function(options){

        options = options || {};
        var target = options.target;

        if(!target){
            var contentEl = options.contentEl;
            if(contentEl){
                target = $(contentEl);
            }
        }

        if(target){
           this.target = target;
            $.extend(this, this._parseOptions(), options);
        }
        this._render(target);
    };

    erajs.ui.Tooltip.prototype = {

        /**
         * @property {Object} id
         * 组件唯一标识.
         */
        id : null,

        /**
         * @property {String} position
         * 提示框的位置,可选:
         *
         * - 'right'
         * - 'bottom'
         * - 'left'
         * - 'top'
         */
        position : "bottom",

        /**
         * @property {String} content
         * 提示框内容.
         */
        content : '',

        /**
         *  @property {String} contentEl
         *  关联元素的id
         */
        contentEl : null,

        /**
         *  @property {Boolean} trackMouse
         *  提示框跟随鼠标移动.
         */
        trackMouse : false,

        /**
         *  @property {Number} deltaX
         *  水平距离提示框的位置.
         */
        deltaX : 0,

        /**
         *  @property {Number} deltaY
         *  垂直距离提示框的位置.
         */
        deltaY : 0,

        /**
         *  @property {String} showEvent
         *  触发提示框显示的事件.
         */
        showEvent : "mouseenter",

        /**
         *  @property {String} hideEvent
         *  触发提示框隐藏的事件.
         */
        hideEvent : "mouseleave",

        /**
         *  @property {Number} showDelay
         *  延迟显示提示框的时间.
         */
        showDelay : 200,

        /**
         *  @property {Number} hideDelay
         *  延迟隐藏提示框的时间.
         */
        hideDelay : 100,

        /**
         * @event
         * 显示提示框时触发.
         * @param {Event} e
         */
        onShow : function(e) {},

        /**
         * @event
         * 显示提示框时触发.
         * @param {Event} e
         */
        onHide : function(e) {},

        /**
         * @event
         * 更新提示内容时触发.
         * @param {String} content
         */
        onUpdate : function(content) {},

        /**
         * @event
         * 提示框位置改变时触发.
         * @param {Number} left
         * @param {Number} top
         */
        onPosition : function(left, top) {},

        /**
         * @event
         * 销毁提示框时触发.
         */
        onDestroy : function() {},

        /**
         * 更新组件配置信息
         * @param {Object} options
         */
        tooltip : function(options){
            $.extend(this,options);
            this._render();
        },

        /**
         * 获取提示框tip元素对象.
         * @returns {HTMLElement}
         */
        getTip : function(){
            var me = this;
            return me.tip ? me.tip : undefined;
        },

        /**
         * 获取提示框arrow元素对象.
         * @returns {HTMLElement} (".tooltip-arrow-outer,.tooltip-arrow").
         */
        getArrow : function(){

            var me = this;
            var tip = me.getTip();
            return tip ? tip.children(".tooltip-arrow-outer,.tooltip-arrow") : null;
        },

        /**
         * 更新提示框内容.
         * @param {String} content tip显示的内容
         */
        update : function(content){

            var me = this;

            if (content) {
                me.content = content;
            }
            if (!me.tip) {
                return;
            }

            var cc = typeof me.content == "function" ? me.content.call(me) : me.content;

            me.tip.children(".tooltip-content").html(cc);
            me.onUpdate.call(me, cc);
        },

        /**
         * 显示提示框.
         * @param e
         */
        show : function(e) {

            var me = this,target = target || me.target;

            var tip = me.tip;
            if (!tip) {
                tip = $("<div tabindex=\"-1\" class=\"tooltip\">" + "<div class=\"tooltip-content\"></div>" + "<div class=\"tooltip-arrow-outer\"></div>" + "<div class=\"tooltip-arrow\"></div>" + "</div>").appendTo("body");
                me.tip = tip;
                me.update();
            }
            tip.removeClass("tooltip-top tooltip-bottom tooltip-left tooltip-right").addClass("tooltip-" + me.position);

            me.timer();

            me.showTimer = setTimeout(function() {
                me.reposition();
                tip.show();
                me.onShow.call(me,e);

                var arrowOuter = tip.children(".tooltip-arrow-outer");
                var arrow = tip.children(".tooltip-arrow");
                var bc = "border-" + me.position + "-color";
                arrowOuter.add(arrow).css({
                    borderTopColor : "",
                    borderBottomColor : "",
                    borderLeftColor : "",
                    borderRightColor : ""
                });
                arrowOuter.css(bc, tip.css(bc));
                arrow.css(bc, tip.css("backgroundColor"));
            }, me.showDelay);
        },

        /**
         * 隐藏提示框.
         * @param e
         */
        hide : function(e){

            var me = this,target = target || me.target;

            if (target && me.tip) {
                me.timer();
                me.hideTimer = setTimeout(function() {
                    me.tip.hide();
                    me.onHide.call(me, e);
                }, me.hideDelay);
            }
        },


        timer : function() {

            var me = this;
            if (me.showTimer) {
                clearTimeout(me.showTimer);
                me.showTimer = null;
            }
            if (me.hideTimer) {
                clearTimeout(me.hideTimer);
                me.hideTimer = null;
            }
        },

        /**
         * @private
         * 重新定位显示框位置
         */
        reposition : function() {

            var me = this,target = target || me.target;
            if (!target || !me.tip) {
                return;
            }
            var tip = $(me.tip);
            if (me.trackMouse) {
                t = $();
                var _e = me.trackMouseX + me.deltaX;
                var _f = me.trackMouseY + me.deltaY;
            } else {
                var t = $(target);
                var _e = t.offset().left + me.deltaX;
                var _f = t.offset().top + me.deltaY;
            }
            switch(me.position) {
                case "right":
                    _e += t.outerWidth() + 12 + (me.trackMouse ? 12 : 0);
                    _f -= (tip.outerHeight() - t.outerHeight()) / 2;
                    break;
                case "left":
                    _e -= tip.outerWidth() + 12 + (me.trackMouse ? 12 : 0);
                    _f -= (tip.outerHeight() - t.outerHeight()) / 2;
                    break;
                case "top":
                    _e -= (tip.outerWidth() - t.outerWidth()) / 2;
                    _f -= tip.outerHeight() + 12 + (me.trackMouse ? 12 : 0);
                    break;
                case "bottom":
                    _e -= (tip.outerWidth() - t.outerWidth()) / 2;
                    _f += t.outerHeight() + 12 + (me.trackMouse ? 12 : 0);
                    break;
            }
            if (!$(target).is(":visible")) {
                _e = -100000;
                _f = -100000;
            }
            tip.css({
                left : _e,
                top : _f,
                zIndex : (me.zIndex != undefined ? me.zIndex : erajs.zIndex)
            });
            me.onPosition.call(me, _e, _f);
        },

        /**
         * 销毁提示框.
         */
        destroy : function(unregister){
            var me = this,unregister = (unregister === undefined ? true : unregister);
            me.timer();
            if (me.tip) {
                me.tip.remove();
            }
            if (me.title) {
                $(me.target).attr("title",me.title);
            }
            $(me.target).unbind(".tooltip").removeClass("tooltip-f");
            var id = me.id;
            if(id && unregister){
                erajs.destroy(id);
            }
            me.onDestroy.call(me);
        },

        _parseOptions : function() {

            var t = $(this.target);

            var opts = $.extend({},
                {
                    title : t.attr("title")
                },
                erajs.ui.parser.parseOptions(t, ["id","position", "showEvent", "hideEvent", "content", {
                    deltaX : "number",
                    deltaY : "number",
                    showDelay : "number",
                    hideDelay : "number"
                }])
            );
            t.attr("title","");
            if (!opts.content) {
                opts.content = opts.title;
            }
            return opts;
        },

        _render : function(target) {

            var me = this,target = target || me.target,
                t = $(this.target);

            //绑定事件
            t.unbind(".tooltip").bind(me.showEvent + ".tooltip", function(e) {
                me.show(target, e);
            }).bind(me.hideEvent + ".tooltip", function(e) {
                me.hide(target, e);
            }).bind("mousemove.tooltip", function(e) {
                if (me.trackMouse) {
                    me.trackMouseX = e.pageX;
                    me.trackMouseY = e.pageY;
                    me.reposition(target);
                }
            });

           me.update();
        }
    };
})();
/*
 * Copyright (c) 2014 www.erayt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 */
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.ui.Progressbar
 *
 * 使用{@link erajs.ui.Progressbar.defaults}重写默认值对象。
 *
 * 进度条可以提供反馈的一个长时间运行的操作的显示进展。这个进程可更新,让用户知道当前执行一些操作。
 *
 * {@img erajs.ui.Progressbar/progressbar.png}
 *
 * ## 使用案例
 *
 * 创建进度条.
 * 进度条组件可以通过html标签创建。使用html标签创建更容易，只需要对`<div>`标签引用'progressbar'的xtype。
 *
 *      @example
 *       <div id="p" xtype="progressbar" style="width:400px;"></div>
 *
 */
(function(){

    erajs.ui.Progressbar = function(options){

        options = options || {};
        var target = options.target;

        if(!target){
            var contentEl = options.contentEl;
            if(contentEl){
                target = $(contentEl);
            }
        }
        if(target){
            this.target = target;
            $.extend(this,this._parseOptions(), options);
        }

        this._render(target);

    };

    erajs.ui.Progressbar.prototype = {
        /**
         * @property {String} 组件唯一标识
         */
        id : null,

        /**
         * @property {String} 关联元素ID
         */
        contentEl : null,

        /**
         * @property {String/Number} 进度条的宽度.
         */
        width: 'auto',

        /**
         * @property {String/Number} 进度条的高度.
         */
        height: 22,

        /**
         * @property {Number} 当前进度，百分比数值.
         */
        value: 0,	// percentage value

        /**
         * @property {String} 显示在组件中的文本模板.
         */
        text: '{value}%',

        /**
         * @event 当进度发生改变时触发.
         * @param {Number} newValue
         * @param {Number} oldValue
         */
        onChange:function(newValue,oldValue){},

        /**
         * 改变进度条的宽度.
         * @param {Number} width
         */
        setSize : function(width){

            var me = this,bar = me.bar;

            if (width) me.width = width;
            bar._outerWidth(me.width)._outerHeight(me.height);

            bar.find('div.progressbar-text').width(bar.width());
            bar.find('div.progressbar-text,div.progressbar-value').css({
                height: bar.height()+'px',
                lineHeight: bar.height()+'px'
            });
        },

        /**
         *  获取当前进度值.
         * @returns {Number}
         */
        getValue : function(){
            return this.value;
        },

        /**
         * 设置一个新的进度值.
         * @param {Number} value
         */
        setValue : function(value){

            var me = this,target = me.target;

            var t = $(target);

            if (value < 0) value = 0;
            if (value > 100) value = 100;

            var text = me.text.replace(/{value}/, value);
            var oldValue = me.value;
            me.value = value;
            t.find('div.progressbar-value').width(value+'%');
            t.find('div.progressbar-text').html(text);
            if (oldValue != value){
                me.onChange.call(this, value, oldValue);
            }
        },

        destroy: function(){
            this.spinner.remove();
            erajs.destroy(this);
        },

        _init : function(target){

            var me = this,target = target || me.target;

            var t = $(target);
            t.addClass('progressbar');
            t.html('<div class="progressbar-text"></div><div class="progressbar-value"><div class="progressbar-text"></div></div>');
            return t;

        },

        _parseOptions : function(){

            var me = this;
            var t = $(this.target);

            var opts = $.extend({},
                erajs.ui.parser.parseOptions(t,
                    ['id','width','height','text',{value:'number'}]
                ),{
                    bar : me._init()
                });
            return opts;
        },

        _render : function(){

            var me = this,target = target || me.target,
                t = $(this.target);

            me.setValue(me.value);
            me.setSize();
        }
    };

})();
/*
 * Copyright (c) 2014 www.erayt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 **/
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.ui.Panel
 * @extends erajs.ui.Panel.defaults
 *
 * 使用{@link erajs.ui.Panel.defaults}重载默认值。
 *
 * 版用作其他内容的容器。这是基本组件构建其他组件(如布局、标签、折叠等。
 * 它还提供了内置的可折叠、可闭,maximizable和minimizable行为和其他定制的行为。
 * 面板可以很容易地嵌入到web页面的任何位置。
 *
 * {@img erajs.ui.Panel/panel.png}
 *
 * ## 使用案例
 *
 * 1、使用标签创建控制面板
 *
 *      @example
 *      <div id="p" xtype="panel" title="面板工具" style="width:600px;height:200px;padding:10px;"
 *          data-options="iconCls:'icon-save',collapsible:true,minimizable:true,maximizable:true,closable:true">
 *          <p style="font-size:14px"></p>
 *          <ul>
 *              <li>时代银通创建于2002年.</li>
 *              <li>时代银通秉承专业专注原则，以金融软件产品的研发和金融项目的开发为主.</li>
 *              <li>公司坚持以客户为中心,以客户需求为导向,以技术求生存,以服务求信誉,以信誉求发展，谋求企业长久、稳定和健康发展的发展理念.</li>
 *              <li>时代银通正在向国内一流、最卓越和最成功的公司迈进.</li>
 *          </ul>
 *      </div>
 *
 *  2、使用ajax载入控制面板内容并且在载入成功时显示信息。
 *
 *      <div id="p" xtype="panel" title="加载面板内容" style="width:700px;height:200px;padding:10px;"
 *             data-options="
 *               href : '_content.html',
 *               onLoad:function(){
                    alert('loaded successfully');
                 }
 *      "></div>
 *
 */
(function () {

    "use strict";

    $.fn._remove = function () {
        return this.each(function () {
            $(this).remove();
            try {
                this.outerHTML = "";
            } catch (err) {
            }
        });
    };

    var TO = false;
    var _5b = true;
    $(window).unbind(".panel").bind("resize.panel", function () {
        if (!_5b) {
            return;
        }
        if (TO !== false) {
            clearTimeout(TO);
        }
        TO = setTimeout(function () {
            _5b = false;
            var _5c = $("body.layout");
            if (_5c.length) {
                var bodyLayout = _5c[0];
                var bodyId = bodyLayout.id;
                if (bodyId)
                    erajs.getCmp(bodyId).resize();
            } else {
                $("body").children("div.panel:visible,div.accordion:visible,div.tabs-container:visible,div.layout:visible").triggerHandler("_resize");
            }
            _5b = true;
            TO = false;
        }, 200);
    });

    function refresh(self,parms){
        var target = self.target,panel = self.getPanel();

        if (self.href) {
            if (!self.isLoaded || !self.cache) {
                var prams = $.extend({}, self.queryParams);
                if (self.onBeforeLoad.call(self, prams) == false) {
                    return;
                }
                self.isLoaded = false;
                clearAndFit(target);
                if (self.loadingMessage) {
                    $(target).html($("<div class=\"panel-loading\"></div>").html(self.loadingMessage));
                }
                self.loader.call(self, prams, function(pms) {
                    loadContent(self.extractor.call(self, pms));
                    self.onLoad.apply(self, arguments);
                    self.isLoaded = true;
                }, function() {
                    self.onLoadError.apply(self, arguments);
                });
            }
        } else {
            if (self.content) {
                if (!self.isLoaded) {
                    clearAndFit(target);
                    loadContent(self.content);
                    self.isLoaded = true;
                }
            }
        }
        //加载上下文内容
        function loadContent(content) {
            $(target).html(content);
            erajs.ui.parser.parse($(target));
        };
    }

    //销毁组件并自适应
    function clearAndFit(target){
        var t = $(target);
        t.find("[xtype][id]").each(function(){
            var id = this.id;
            if(erajs.isInstantiate(id)){
                var component = erajs.getCmp(id);
                erajs.destroy(id);
                try{
                    component.destroy();
                }catch(e){
                }
            }
        });
        t.find("div").each(function () {
            $(this)._fit(false);
        });
    }

    erajs.ui.Panel = function (options) {

        options = options || {};
        var target = options.target;
        if (!target) {
            var contentEl = options.contentEl;
            if (contentEl) {
                target = $(contentEl)[0];
            }
        }
        if (target) {
            this.target = target;

            $.extend(this, erajs.ui.Panel.defaults, this._parseOptions(), options);

            $(target).attr("title", "");
        }
        this._render(target);
    };

    erajs.ui.Panel.prototype = {

        /**
         * 更新panel配置项.
         * @param {Object} options
         */
        updatePanel : function(options){
            var me = this;
            $.extend(me, options);
            me._render();
        },

        /**
         * 返回面板Dom对象.
         * @returns {HTMLElement}
         */
        getPanel: function () {
            var me = this;
            return me.panel;
        },

        /**
         * 返回面板头部Dom对象.
         * @return {HTMLElement}
         */
        getHeader: function () {
            var me = this;
            return me.getPanel().find(">div.panel-header");
        },

        /**
         * 返回面板主体Dom对象.
         * @return {HTMLElement}
         */
        getBody: function () {
            var me = this;
            return me.getPanel().find('>div.panel-body');
        },

        _doLayout: function (target) {

            var me = this, target = target || me.target;
            $(target).find("div.panel:visible,div.accordion:visible,div.tabs-container:visible,div.layout:visible").each(function () {
                $(this).triggerHandler("_resize", [true]);
            });
        },

        /**
         * 展开面板主体.
         * @param {Boolean} animate 是否有动画.
         */
        expand: function (animate) {
            var me = this, target = me.target,
                panel = me.getPanel(),
                pBody = me.getBody(),
                pTool = me.getHeader().find("a.panel-tool-collapse");

            if (me.collapsed == false) {
                return;
            }
            pBody.stop(true, true);
            if (me.onBeforeExpand.call(me) == false) {
                return;
            }
            pTool.removeClass("panel-tool-expand");

            if (animate == true) {
                pBody.slideDown("normal", function () {
                    me.collapsed = false;
                    me.onExpand.call(me);
                    refresh(me);
                    me._doLayout();
                });
            } else {
                pBody.show();
                me.collapsed = false;
                me.onExpand.call(me);
                refresh(me);
                me._doLayout();
            }
        },

        /**
         * 折叠面板主题
         * @param {Boolean} animate 是否有动画.
         */
        collapse: function (animate) {
            var me = this, target = me.target,
                panel = me.getPanel(),
                pBody = me.getBody(),
                pTool = me.getHeader().find("a.panel-tool-collapse");

            if (me.collapsed == true) {
                return;
            }
            pBody.stop(true, true);
            if (me.onBeforeCollapse.call(me) == false) {
                return;
            }
            pTool.addClass("panel-tool-expand");
            if (animate == true) {
                pBody.slideUp("normal", function () {
                    me.collapsed = true;
                    me.onCollapse.call(me);
                });
            } else {
                pBody.hide();
                me.collapsed = true;
                me.onCollapse.call(me);
            }
        },

        /**
         * 恢复最大化面板回到原来的大小和位置.
         */
        restore: function () {

            var me = this, target = me.target,
                panel = me.getPanel(),
                ptoolMax = me.getHeader().find("a.panel-tool-max");

            if (me.maximized == false) {
                return;
            }
            panel.show();
            ptoolMax.removeClass("panel-tool-restore");
            if (me.original)
                $.extend(me, me.original);

            me.resize();
            me.minimized = false;
            me.maximized = false;
            me.original = null;
            me.onRestore.call(me);
        },

        /**
         * 最小化面板.
         */
        minimize: function () {

            var me = this, target = me.target,
                panel = me.getPanel();

            panel._fit(false);
            panel.hide();
            me.minimized = true;
            me.maximized = false;
            me.onMinimize.call(me);
        },

        /**
         * 最大化面板到容器大小.
         */
        maximize: function () {
            var me = this, target = me.target,
                panel = me.getPanel(),
                ptoolMax = me.getHeader().find("a.panel-tool-max");

            if (me.maximized == true) {
                return;
            }
            ptoolMax.addClass("panel-tool-restore");

            if (!me.original) {
                me.original = {
                    width: me.width,
                    height: me.height,
                    left: me.left,
                    top: me.top,
                    fit: me.fit
                };
            }
            me.left = 0;
            me.top = 0;
            me.fit = true;
            me.resize();
            me.minimized = false;
            me.maximized = true;
            me.onMaximize.call(me);
        },

        move: function (options) {
            var me = this,
                panel = me.getPanel();

            if (options) {
                if (options.left != null) {
                    me.left = options.left;
                }
                if (options.top != null) {
                    me.top = options.top;
                }
            }
            panel.css({
                left: me.left,
                top: me.top
            });
            me.onMove.apply(me, [me.left, me.top]);
        },

        /**
         * 设置面板大小和布局.
         * @param {Object} options
         * {Number} [options.width] 新的面板宽度.
         * {Number} [options.height] 新的面板高度.
         * {Number} [options.left] 新的面板左边距位置.
         * {Number} [options.top] 新的面板上边距位置.
         */
        resize: function (options) {
            var me = this, target = me.target,
                panel = me.getPanel();

            var pHeader = me.getHeader();
            var pBody = me.getBody();

            if (options) {
                $.extend(this, {
                    width: options.width,
                    height: options.height,
                    left: options.left,
                    top: options.top
                });
            }
            me.fit ? $.extend(this, panel._fit()) : panel._fit(false);
            panel.css({
                left: me.left,
                top: me.top
            });
            if (!isNaN(me.width)) {
                panel._outerWidth(me.width);
            } else {
                panel.width("auto");
            }
            pHeader.add(pBody)._outerWidth(panel.width());
            if (!isNaN(me.height)) {
                panel._outerHeight(me.height);
                var pHeaderH = pHeader.length ? pHeader._outerHeight() : 0;
                pBody._outerHeight(panel.height() - pHeaderH);
            } else {
                pBody.height("auto");
            }
            panel.css("height", "");
            me.onResize.apply(me, [me.width, me.height]);
            $(target).find(">div:visible,>form>div:visible").triggerHandler("_resize");
        },

        /**
         * 刷新面板来装载远程数据。如果'{@link #href}属性有了新配置，它将重写旧的'href'属性.
         * @param {String} href 新的请求地址
         */
        refresh: function (href) {
            var me = this, target = me.target;
            me.isLoaded = false;

            if (href) {
                if (typeof href == "string") {
                    me.href = href;
                } else {
                    me.queryParams = href;
                }
            }
            refresh(me);
        },

        /**
         * 在'forceDestroy'为true的时，
         * 销毁面板时将跳过{@link #onBeforeDestory}回调函数.
         * @param {Boolean} forceDestroy 是否强行销毁.
         */
        destroy: function (forceDestroy) {

            var me = this,panel = me.getPanel();

            if (forceDestroy != true) {
                if (me.onBeforeDestroy.call(me) == false) {
                    return;
                }
            }
            clearAndFit(panel);
            me._remove(panel);
            erajs.destroy(me.id);
            me.onDestroy.call(me);
        },

        /**
         * 在'forceClose'为true的时，
         * 关闭面板时将跳过{@link #onBeforeClose}回调函数.
         * @param {Boolean} forceClose 是否强行关闭.
         */
        close: function (forceClose) {

            var me = this, target = me.target,
                panel = me.getPanel();

            if (forceClose != true) {
                if (me.onBeforeClose.call(me) == false) {
                    return;
                }
            }
            panel._fit(false);
            panel.hide();
            me.closed = true;
            me.onClose.call(me);
        },

        /**
         * 在'forceOpen'为true的时，
         * 打开面板时将跳过 {@link #onBeforeOpen}回调函数.
         * @param {Boolean} forceOpen
         */
        open: function (forceOpen) {

            var me = this, target = me.target,
                panel = me.getPanel();

            if (forceOpen != true) {
                if (me.onBeforeOpen.call(me) == false) {
                    return;
                }
            }
            panel.show();
            me.closed = false;
            me.minimized = false;
            var pTrestore = me.getHeader().find("a.panel-tool-restore");
            if (pTrestore.length) {
                me.maximized = true;
            }
            me.onOpen.call(me);
            if (me.maximized == true) {
                me.maximized = false;
                me.maximize();
            }
            if (me.collapsed == true) {
                me.collapsed = false;
                me.collapse();
            }
            if (!me.collapsed) {
                refresh(me);
                me._doLayout();
            }
        },

        /**
         * 设置面板头的标题文本.
         * @param {String} title 新的标题
         */
        setTitle: function (title) {

            var me = this;
            me.title = title;
            me.getHeader().find("div.panel-title").html(title);
        },

        preparePanel: function (target) {

            var me = this, target = target || me.target;

            $(target).addClass("panel-body");
            var panel = $("<div class=\"panel\"></div>").insertBefore(target);

            panel[0].appendChild(target);

            panel.bind("_resize", function () {
                if (me.fit == true) {
                    me.resize();
                }
                return false;
            });
            return panel;
        },

        _parseOptions: function () {

            var me = this;
            var t = $(this.target);

            var lmessage = t.attr("loadingMessage");
            var opts = $.extend({},
                {
                    loadingMessage: (lmessage != undefined ? lmessage : undefined),
                    isLoaded: false,
                    panel: me.preparePanel()
                },
                erajs.ui.parser.parseOptions(t, ["id", "width", "height",
                    "left", "top", "title", "iconCls", "cls", "headerCls",
                    "bodyCls", "tools", "href", "method", {
                        cache: "boolean",
                        fit: "boolean",
                        border: "boolean",
                        noheader: "boolean"
                    }, {
                        collapsible: "boolean",
                        minimizable: "boolean",
                        maximizable: "boolean"
                    }, {
                        closable: "boolean",
                        collapsed: "boolean",
                        minimized: "boolean",
                        maximized: "boolean",
                        closed: "boolean"
                    }])
            );

            return opts;
        },

        _render: function (target) {
            var me = this, target = target || me.target,
                t = $(this.target);

            me._createHeadDom(target);
            me._addHeaderClass(target);

            if (me.doSize == true) {
                me.panel.css("display", "block");
                me.resize();
            }
            if (me.closed == true || me.minimized == true) {
                me.panel.hide();
            } else {
                me.open();
            }
        },

        _remove: function (target) {
            target._remove();
        },

        _addHeaderClass: function () {
            var me = this,
                panel = me.panel,
                target = target || me.target;

            var header = me.getHeader();
            var body = me.getBody();
            panel.css(me.style);
            panel.addClass(me.cls);

            if (me.border) {
                header.removeClass("panel-header-noborder");
                body.removeClass("panel-body-noborder");
            } else {
                header.addClass("panel-header-noborder");
                body.addClass("panel-body-noborder");
            }
            header.addClass(me.headerCls);
            body.addClass(me.bodyCls);
            if (me.id) {
                $(target).attr("id", me.id);
            } else {
                $(target).attr("id", "");
            }
        },

        _createHeadDom: function (target) {

            var me = this,
                panel = me.panel,
                target = target || me.target;

            //if have tools option and relate to other dom element.
            if (me.tools && typeof me.tools == "string") {
                panel.find(">div.panel-header>div.panel-tool .panel-tool-a").appendTo(me.tools);
            }

            if (panel) {
                panel.children("div.panel-header").each(function () {
                    $(this).remove();
                    try {
                        this.outerHTML = "";
                    } catch (err) {
                    }
                });
            }

            if (me.title && !me.noheader) {

                var pheader = $("<div class=\"panel-header\"><div class=\"panel-title\">"
                    + me.title + "</div></div>").prependTo(panel);
                if (me.iconCls) {
                    pheader.find(".panel-title").addClass("panel-with-icon");
                    $("<div class=\"panel-icon\"></div>").addClass(me.iconCls).appendTo(pheader);
                }
                var ptools = $("<div class=\"panel-tool\"></div>").appendTo(pheader);
                ptools.bind("click", function (e) {
                    e.stopPropagation();
                });

                if (me.tools) {
                    if ($.isArray(me.tools)) {
                        var length = me.tools.length;
                        for (var i = 0; i < length; i++) {
                            var tool = $("<a href=\"javascript:void(0)\"></a>").addClass(me.tools[i].iconCls).appendTo(ptools);
                            if (me.tools[i].handler) {
                                tool.bind("click", eval(me.tools[i].handler));
                            }
                        }
                    } else {
                        var tchildren = $(me.tools).children();
                        tchildren.each(function () {
                            $(this).addClass($(this).attr("iconCls"))
                                .addClass("panel-tool-a").appendTo(ptools);
                        });
                    }
                }
                if (me.collapsible) {
                    $("<a class=\"panel-tool-collapse\" href=\"javascript:void(0)\"></a>")
                        .appendTo(ptools).bind("click", function () {
                            if (me.collapsed == true) {
                                me.expand(true);
                            } else {
                                me.collapse(true);
                            }
                            return false;
                        });
                }
                if (me.minimizable) {
                    $("<a class=\"panel-tool-min\" href=\"javascript:void(0)\"></a>")
                        .appendTo(ptools).bind("click", function () {
                            me.minimize();
                            return false;
                        });
                }
                if (me.maximizable) {
                    $("<a class=\"panel-tool-max\" href=\"javascript:void(0)\"></a>")
                        .appendTo(ptools).bind("click", function () {

                            if (me.maximized == true) {
                                me.restore();
                            } else {
                                me.maximize();
                            }
                            return false;
                        });
                }
                if (me.closable) {
                    $("<a class=\"panel-tool-close\" href=\"javascript:void(0)\"></a>")
                        .appendTo(ptools).bind("click", function () {
                            if(me.closeAction =='destroy'){
                                me.destroy();
                            }else
                                me.close();
                            return false;
                        });
                }
                panel.children("div.panel-body").removeClass("panel-body-noheader");
            } else {
                panel.children("div.panel-body").addClass("panel-body-noheader");
            }
        }
    };

    erajs.ui.Panel.parseOptions = function (target) {

        var t = $(target);
        var lmessage = t.attr("loadingMessage");

        return $.extend({}, erajs.ui.parser.parseOptions(t,
            ["id", "width", "height",
                "left", "top", "title", "iconCls", "cls", "headerCls",
                "bodyCls", "tools", "href", "method", {
                cache: "boolean",
                fit: "boolean",
                border: "boolean",
                noheader: "boolean"
            }, {
                collapsible: "boolean",
                minimizable: "boolean",
                maximizable: "boolean"
            }, {
                closable: "boolean",
                collapsed: "boolean",
                minimized: "boolean",
                maximized: "boolean",
                closed: "boolean"
            }]), {
            loadingMessage: (lmessage != undefined ? lmessage : undefined)
        });
    };

    /**
     * @class erajs.ui.Panel.defaults
     */
    erajs.ui.Panel.defaults = {

        /**
         * @property {Object}
         * 组件唯一标识.
         */
        id: null,

        /**
         * @property {Object}
         * 关联HTMLElement对象id.
         */
        contentEl: null,

        /**
         * @property {Object}
         * 在面板头部显示的标题文本.
         *
         */
        title: null,

        /**
         * @property {Object}
         * 设置一个16×16图标的CSS类ID显示在面板左上角.
         */
        iconCls: null,

        /**
         * @property {String}
         * 面板宽度.
         */
        width: "auto",

        /**
         * @property {String}
         * 面板高度.
         */
        height: "auto",

        /**
         * @property {Number}
         * 面板距离左边的位置（即X轴位置).
         */
        left: null,

        /**
         * @property {Number}
         * 面板距离顶部的位置（即Y轴位置).
         */
        top: null,

        /**
         * @property {Object}
         * 面板添加一个CSS类.
         */
        cls: null,

        /**
         * @private
         * @property {Object}
         * 面板头部添加一个CSS类。
         */
        headerCls: null,

        /**
         * @property {Object}
         * 到面板正文部分添加一个CSS类.
         */
        bodyCls: null,

        /**
         * @property {Object}
         * 添加一个当前指定样式到面板。
         * 如下代码示例更改面板边框宽度：
         *
         * 		<div xtype="panel" style="width:200px;height:100px"
         *      	    data-options="style:{borderWidth:2}">
         * 		</div>
         */
        style: {},

        /**
         * @property {Boolean}
         * 如果为true，在超链接载入时缓存面板内容.
         */
        cache: true,

        /**
         * @property {Boolean}
         * 当设置为true的时候面板大小将自适应父容器.
         */
        fit: false,

        /**
         * @property {Boolean}
         * 定义是否显示面板边框.
         */
        border: true,

        /**
         * @property {Boolean}
         * 如果设置为true，在面板被创建的时候将重置大小和重新布局.
         */
        doSize: true,

        /**
         * @property {Boolean}
         * 如果设置为true，那么将不会创建面板标题.
         */
        noheader: false,

        /**
         * @property {Object}
         * 面板主体内容.
         */
        content: null,

        /**
         * @property {Boolean}
         * 定义是否显示可折叠按钮.
         */
        collapsible: false,

        /**
         * @property {Boolean}
         * 定义是否显示最小化按钮.
         */
        minimizable: false,

        /**
         * @property {Boolean}
         * 定义是否显示最大化按钮.
         */
        maximizable: false,

        /**
         * @property {Boolean}
         * 定义是否显示关闭按钮.
         */
        closable: false,

        /**
         * @private
         * @property {Boolean}
         * 定义是否在初始化的时候折叠面板.
         */
        collapsed: false,

        /**
         * @property {String} 关闭页眉工具时的操作.
         * 可用值有：
         *
         * - destroy : 把窗口从DOM和销毁它及所有子组件。通过显示方法将不能得到可用的窗口.
         * - hide : 隐藏窗口的可见性设置为隐藏,窗口可以通过显示的方法显示.
         */
        closeAction : 'destroy',

        /**
         * @property {Boolean}
         * 定义是否在初始化的时候最小化面板.
         */
        minimized: false,

        /**
         * @property {Boolean}
         * 定义是否在初始化的时候最大化面板.
         */
        maximized: false,

        /**
         * @private
         * @property {Boolean}
         * 定义是否在初始化的时候关闭面板.
         */
        closed: false,

        /**
         * @property {Array/String}
         * 自定义工具菜单，可用值：
         *
         * - '数组:每个元素都包含"iconCls"和"handler"属性'
         * - '字符串:指向工具菜单的选择器'
         */
        tools: null,

        /**
         * @property {Object}
         * 在加载内容页的时候添加的请求参数.
         */
        queryParams: {},

        /**
         * @property {String}
         * 使用HTTP的哪一种方法读取内容页。可用值：
         *
         * - 'get'
         * - 'post'
         */
        method: "get",

        /**
         * @property {Object}
         * 从URL读取远程数据并且显示到面板。
         * 注意：内容将不会被载入，直到面板打开或扩大，
         * 在创建延迟加载面板时是非常有用的
         */
        href: null,

        /**
         * @property {String}
         * 在加载远程数据的时候在面板内显示一条消息.
         */
        loadingMessage: "Loading...",

        /**
         * @private
         * @property {Function}
         * 定义了如何从远程服务器加载内容页.
         * @param {Object} param 参数对象发送给远程服务器.
         * @param {Function} success 在检索数据成功的时候调用的回调函数.
         * @param {Function} error 在检索数据失败的时候调用的回调函数.
         * @returns {Boolean}
         */
        loader: function (param, success, error) {
            var me = this;
            if (!me.href) {
                return false;
            }
            $.ajax({
                type: me.method,
                url: me.href,
                cache: false,
                data: param,
                dataType: "html",
                success: function (result) {
                    success(result);
                },
                error: function () {
                    error.apply(this, arguments);
                }
            });
        },

        /**
         * @private
         * @property {Function}
         * 定义如何从ajax应答数据中提取内容，返回提取数据.
         * @param {String} data 内容
         * @returns {String}
         */
        extractor: function (data) {

            var pattern = /<body[^>]*>((.|[\n\r])*)<\/body>/im;
            var matches = pattern.exec(data);
            if (matches) {
                return matches[1];
            } else {
                return data;
            }
        },

        /**
         * @event
         * 在加载内容页之前触发，返回false将忽略该动作.
         * @param {Object} param 请求参数
         */
        onBeforeLoad: function (param) {
        },

        /**
         * @event
         * 在加载远程数据时触发.
         */
        onLoad: function () {
        },

        /**
         * @event
         * 在加载内容页发生错误时触发.
         */
        onLoadError: function () {
        },

        /**
         * @event
         * 在打开面板之前触发，返回false可以取消打开操作.
         */
        onBeforeOpen: function () {
        },

        /**
         * @event
         * 在打开面板之后触发.
         */
        onOpen: function () {
        },

        /**
         * @event
         * 在关闭面板之前触发，返回false可以取消关闭操作.
         * 下列的面板将不能关闭:
         *
         *      <div id="pp" xtype="panel" style="width:300px;height:200px;"
         *          title="My Panel" data-options="
         *              onBeforeClose:function(){
         *                  return false;
         *              }">
         *        面板将不能关闭
         *      </div>
         *
         */
        onBeforeClose: function () {
        },

        /**
         * @event
         * 在面板关闭之后触发.
         */
        onClose: function () {
        },

        /**
         * @event
         * 在面板销毁之前触发，返回false可以取消销毁操作.
         */
        onBeforeDestroy: function () {
        },

        /**
         * @event
         * 在面板销毁之后触发.
         */
        onDestroy: function () {
        },

        /**
         * @event
         * 在面板改变大小之后触发.
         * @param {Number} width 新的宽度.
         * @param {Number} height 新的高度.
         */
        onResize: function (width, height) {
        },


         //@event
         // 在面板移动之后触发.
         // @param {Number} left 新的左边距位置.
         // @param {Number} top 新的上边距位置.
        onMove: function (left, top) {
        },

        /**
         * @event
         * 在窗口最大化之后触发.
         */
        onMaximize: function () {
        },

        /**
         * @event
         * 在窗口恢复到原始大小以后触发.
         */
        onRestore: function () {
        },

        /**
         * @event
         * 在窗口最小化之后触发.
         */
        onMinimize: function () {
        },

        /**
         * @event
         * 在面板折叠之前触发，返回false可以终止折叠操作.
         */
        onBeforeCollapse: function () {
        },

        /**
         * @event
         * 在面板展开之前触发，返回false可以终止展开操作.
         */
        onBeforeExpand: function () {
        },

        /**
         * @event
         * 在面板折叠之后触发.
         */
        onCollapse: function () {
        },

        /**
         * @event
         * 在面板展开之后触发.
         */
        onExpand: function () {
        }
    };
})();
/*
 * Copyright (c) 2014 www.erayt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 **/
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.ui.Window
 * @extends erajs.ui.Window.defaults
 *
 * 扩展自{@link erajs.ui.Panel.defaults}.使用{@link erajs.ui.Window.defaults}重写默认值对象.
 *
 * 窗口控件是一个浮动和可拖拽的面板可以用作应用程序窗口.
 * 默认情况下,窗口可以移动,关闭.它的内容也可以被定义为静态html或要么通过ajax动态加载.
 *
 * {@img erajs.ui.Window/window.png}
 *
 * ##创建窗口
 *
 * 1、用标签创建窗口。
 *
 *      @example
 *      <div id="win" xtype="window" title="My Window" style="width:600px;height:400px"
 *          data-options="iconCls:'icon-save',modal:true">
 *          Window Content
 *      </div>
 *
 * 2、通过Javascript创建窗口.
 *
 *      <div id="win"></div>
 *      erajs.create('window',{
 *          contentEl : '#win',
 *          width:600,
 *          height:400,
 *           modal:true
 *      });
 *
 * 3、创建复合布局窗口.
 *
 * 像往常一样定义窗口布局.
 * 下面的例子显示了如何将窗体分为两部分：北部和中间.
 *
 *      <div id="win" xtype="window" title="My Window" style="width:600px;height:400px"
 *          data-options="iconCls:'icon-save',modal:true">
 *          <div xtype="layout" data-options="fit:true">
 *              <div data-options="region:'north'" style="height:100px"></div>
 *              <div data-options="region:'center'">
 *                  The Content.
 *              </div>
 *          </div>
 *      </div>
 *
 * ##窗口动作
 *
 * 打开和关闭窗口.
 *
 *      var win = erajs.getCmp('win');
 *      win.open();  //打开窗口
 *      win.close(); //关闭窗口
 */
(function(){

    function getPageArea() {
        if (document.compatMode == 'BackCompat') {
            return {
                width: Math.max(document.body.scrollWidth, document.body.clientWidth),
                height: Math.max(document.body.scrollHeight, document.body.clientHeight)
            }
        } else {
            return {
                width: Math.max(document.documentElement.scrollWidth, document.documentElement.clientWidth),
                height: Math.max(document.documentElement.scrollHeight, document.documentElement.clientHeight)
            }
        }
    }

    // when window resize, reset the width and height of the window's mask
    $(window).resize(function(){
        $('body>div.window-mask').css({
            width: $(window)._outerWidth(),
            height: $(window)._outerHeight()
        });
        setTimeout(function(){
            $('body>div.window-mask').css({
                width: getPageArea().width,
                height: getPageArea().height
            });
        }, 50);
    });

    function vcenter(obj,tomove){
        var me = obj;
        var options = me.options;
        var height = options.height;

        if (isNaN(height)){
            height = me.window._outerHeight();
        }
        if (options.inline){
            var parent = me.window.parent();
            options.top = (parent.height() - height) / 2 + parent.scrollTop();
        } else {
            options.top = ($(window)._outerHeight() - height) / 2 + $(document).scrollTop();
        }
        if (tomove){me.moveWindow();}
    }

    function hcenter(obj,tomove){

        var me = obj;
        var options = me.options;
        var width = options.width;

        if (isNaN(width)){
            width = me.window._outerWidth();
        }
        if (options.inline){
            var parent = me.window.parent();
            options.left = (parent.width() - width) / 2 + parent.scrollLeft();
        } else {
            options.left = ($(window)._outerWidth() - width) / 2 + $(document).scrollLeft();
        }
        if (tomove){me.moveWindow();}
    }

    erajs.ui.Window = function(options){
        options = options || {};
        var target = options.target;
        if (!target) {
            var contentEl = options.contentEl;
            if (contentEl) {
                target = $(contentEl)[0];
            }
        }
        if(target){
            this.target = target;
            this.options = $.extend({},erajs.ui.Window.defaults,erajs.ui.Window.parseOptions(target), options);
            this.id = this.options.id;

            if (!this.options.inline){
                document.body.appendChild(target);
            }
        }
        this._render();
    };

    erajs.ui.Window.prototype = {

        updateWindow : function(options){
            var opts = $.extend(this.options, options);
            this.options = opts;
            this._render();
        },

        moveWindow : function(param){
            var me = this;
            var options = me.options;
            if (param){
                if (param.left != null) options.left = param.left;
                if (param.top != null) options.top = param.top;
            }
            this.panel.move(options);
            if (me.shadow){
                me.shadow.css({
                    left: options.left,
                    top: options.top
                });
            }
        },

        /**
         * 仅垂直居中窗口.
         */
        vcenter : function(){
            vcenter(this,true);
        },

        /**
         * 仅水平居中窗口.
         */
        hcenter : function(){
            hcenter(this,true);
        },

        /**
         * 将窗口绝对居中.
         */
        center : function(){
            hcenter(this);
            vcenter(this);
            this.moveWindow();
        },

        /**
         * 在forceOpen参数为true时，打开面板时将跳过'onBeforeOpen'回调函数.
         * @param {Boolean} forceClose 是否强行打开.
         */
        open : function(forceOpen){
            this.panel.open(forceOpen);
        },

        /**
         * 在forceClose参数为true时，关闭面板时将跳过'onBeforeClose'回调函数.
         * @param {Boolean} forceClose 是否强行关闭.
         */
        close : function(forceClose){
            this.panel.close(forceClose);
        },

        /**
         * 设置窗口头的标题文本.
         * @param {String} title 标题文本.
         */
        setTile : function(title){
            this.panel.setTitle(title);
        },

        /**
         * 设置面板大小和布局。参数对象包含下列属性：
         * @param {Object} options
         * @param {Number} [options.width] 新的面板宽度.
         * @param {Number} [options.height] 新的面板高度.
         * @param {Number} [options.left] 新的面板左边距位置.
         * @param {Number} [options.top] 新的面板上边距位置.
         */
        resize : function(options){
            this.panel.resize(options);
        },

        /**
         * 最大化面板到容器大小.
         */
        maximize : function(){
            this.panel.maximize();
        },

        /**
         * 更新窗口主体内容.
         * @param {String} href 远程请求地址路径
         */
        refresh : function(href){
            this.panel.refresh(href);
        },

        /**
         * 最小化面板.
         */
        minimize : function(){
            this.panel.minimize();
        },

        /**
         * 折叠窗口主题.
         * @param {Boolean} animate 是否有动画.
         */
        collapse : function(animate){
            this.panel.collapse(animate);
        },

        /**
         * 展开窗口主体.
         * @param {Boolean} animate 是否有动画.
         */
        expand : function(animate){
            this.panel.expand(animate);
        },

        /**
         * 在{@link #forceDestroy}参数为true时，销毁面板时将跳过'onBeforeDestory'回调函数.
         * @param {Boolean} forceDestroy 是否强行销毁.
         */
        destroy : function(forceDestroy){
            this.panel.destroy(forceDestroy);
            erajs.destroy(this);
        },

        /**
         * 移动窗口.
         * @param {Object} param
         * @param {Number} [param.left] 新的左边距位置.
         * @param {Number} [param.top] 新的上边距位置.
         */
        move : function(param){
            this.moveWindow(param);
        },

        _create : function(){

            var me = this,target = me.target;
            var options = me.options;
            var winClosed = options.closed;

            var bodyCls = 'window-body ' + (options.noheader ? 'window-body-noheader' : '');
            if(options.bodyCls){
                bodyCls += ' ' + options.bodyCls;
            }

            var win = new erajs.ui.Panel($.extend({},options,{
                target : target,
                contentEl : '#' + options.id,
                border: false,
                doSize: true,	// size the panel, the property undefined in window component
                closed: true,	// close the panel
                minimized : false,
                cls: 'window',
                headerCls: 'window-header',
                bodyCls: bodyCls,

                onBeforeDestroy: function(){
                    if (options.onBeforeDestroy.call(options) == false) return false;
                    if (me.shadow) me.shadow.remove();
                    if (me.mask) me.mask.remove();
                },
                onClose: function(){
                    if (me.shadow) me.shadow.hide();
                    if (me.mask) me.mask.hide();

                    options.onClose.call(me);
                },
                onOpen: function(){

                    if (me.mask){
                        me.mask.css({
                            display:'block',
                            zIndex: erajs.zIndex++
                        });
                    }
                    if (me.shadow){
                        me.shadow.css({
                            display:'block',
                            zIndex: erajs.zIndex++,
                            left: options.left,
                            top: options.top,
                            width: me.window._outerWidth(),
                            height: me.window._outerHeight()
                        });
                    }
                    me.window.css('z-index', erajs.zIndex++);

                    options.onOpen.call(me);
                },

                onResize: function(width, height){
                    $.extend(me.options, {
                        width: options.width,
                        height: options.height,
                        left: options.left,
                        top: options.top
                    });

                    if (me.shadow){
                        me.shadow.css({
                            left: options.left,
                            top: options.top
                          //  width: me.window._outerWidth(),
                          //  height: me.window._outerHeight()
                        });
                    }

                    options.onResize.call(me, width, height);
                },
                onMinimize: function(){
                    if (me.shadow) me.shadow.hide();
                    if (me.mask) me.mask.hide();

                    options.onMinimize.call(me);
                },
                onBeforeCollapse: function(){
                    if (options.onBeforeCollapse.call(options) == false) return false;
                    if (me.shadow) me.shadow.hide();
                },
                onExpand: function(){
                    if (me.shadow) me.shadow.show();
                    options.onExpand.call(options);
                }
            }));

            me.panel = win;
            me.window = win.panel;

            // create mask
            if (me.mask) me.mask.remove();
            if (options.modal == true){
                me.mask = $('<div class="window-mask"></div>').insertAfter(me.window);
                me.mask.css({
                    width: (options.inline ? options.mask.parent().width() : getPageArea().width),
                    height: (options.inline ? options.mask.parent().height() : getPageArea().height),
                    display: 'none'
                });
            }

            // create shadow
           if (me.shadow) {
               me.shadow.remove();
           }
            if (options.shadow == true){
                me.shadow = $('<div class="window-shadow"></div>').insertAfter(me.window);
                me.shadow.css({
                    display: 'none'
                });
            }

            // if require center the window
            if (options.left == null){hcenter(me);}
            if (options.top == null){vcenter(me);}
            me.moveWindow();
            if (!winClosed){
                win.open();	// open the window
            }
        },

        _setProperties : function(){

            var me = this;
            var options = me.options;

            me.window.draggable({
                conentEl : '#' + options.id,
                handle: '>div.panel-header>div.panel-title',
                disabled: options.draggable == false,
                onStartDrag: function(e){

//                    if (me.mask) me.mask.css('z-index', erajs.zIndex++);
//
//                    if (me.shadow) me.shadow.css('z-index', erajs.zIndex++);
//                    me.window.css('z-index', erajs.zIndex++);

                    if (!me.proxy){
                        me.proxy = $('<div class="window-proxy"></div>').insertAfter(me.window);
                    }
                    me.proxy.css({
                        display:'none',
                        zIndex: erajs.zIndex++,
                        left: e.data.left,
                        top: e.data.top
                    });
                    me.proxy._outerWidth(me.window._outerWidth());
                    me.proxy._outerHeight(me.window._outerHeight());
                    setTimeout(function(){
                        if (me.proxy) me.proxy.show();
                    }, 500);
                },
                onDrag: function(e){
                    me.proxy.css({
                        display:'block',
                        left: e.data.left,
                        top: e.data.top
                    });
                    return false;
                },
                onStopDrag: function(e){
                    options.left = e.data.left;
                    options.top = e.data.top;
                    me.moveWindow(options);
                    me.proxy.remove();
                    me.proxy = null;
                }
            });
        },

        _render : function(){

            var me = this,
                target = me.target,
                t = $(target);

            me._create();
            me._setProperties();
        }
    };

    erajs.ui.Window.parseOptions = function(target){
        return $.extend({}, erajs.ui.Panel.parseOptions(target), erajs.ui.parser.parseOptions($(target), [
            {draggable:'boolean',resizable:'boolean',shadow:'boolean',modal:'boolean',inline:'boolean'}
        ]));
    };

    /**
     * @class erajs.ui.Window.defaults
     * @extends erajs.ui.Panel.defaults
     */
    erajs.ui.Window.defaults = $.extend({},erajs.ui.Panel.defaults,{

        /**
         * @readonly
         * @property {String} [headerCls='window-header'] 窗口头部添加一个CSS类.
         *
         */

        /**
         * @readonly
         * @property {Boolean} [border=false] 定义是否显示面板边框.
         */

        /**
         * @readonly
         * @property {String} [cls='window'] 窗口的Css类.
         */

        /**
         * @readonly
         * @property {String} [bodyCls='window-body'] 窗口的正文部分Css类.
         */

        /**
         * @property {String} 组件唯一标识.
         */
        id : '',

        /**
         * @property {String} 关联元素ID.
         */
        contentEl : null,

        /**
         * @property {Number} 窗口Z轴坐标.
         */
        zIndex: 9000,

        /**
         * @property {Boolean} 定义是否能够拖拽窗口.
         */
        draggable: true,

        resizable: true,

        /**
         * @property {Boolean} 如果设置为true，在窗体显示的时候显示阴影.
         */
        shadow: true,

        /**
         * @property {Boolean} 定义是否将窗体显示为模式化窗口.
         */
        modal: false,

        /**
         * @property {Boolean}
         * 定义如何布局窗口，如果设置为true，窗口将显示在它的父容器中，否则将显示在所有元素的上面.
         */
        inline: false,

        /**
         * @property {String} 窗口的标题文本.
         */
        title: 'New Window',

        /**
         * @property {Boolean} 定义是否显示可折叠按钮.
         *
         */
        collapsible: true,

        /**
         * @property {Boolean} 定义是否显示最小化按钮.
         */
        minimizable: true,

        /**
         * @property {Boolean} 定义是否显示最大化按钮.
         */
        maximizable: true,

        /**
         * @property {Boolean} 定义是否显示关闭按钮.
         */
        closable: true,

        /**
         * @property {Boolean} 定义是否默认关闭窗口.
         */
        closed: false
    });
})();
/*
 * Copyright (c) 2014 www.erayt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 **/
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.ui.Accordion
 * @extends erajs.ui.Accordion.defaults
 *
 * 使用{@link erajs.ui.Accordion.defaults}重写默认值对象.
 *
 * Accordion允许用户使用多面板,但在同一时间只会显示一个,
 * 每个面板都内建支持展开和折叠功能。点击一个面板的标题将会展开或折叠面板主体.
 * 面板内容可以通过指定的'href'属性使用ajax方式读取面板内容.
 * 用户可以定义一个被默认选中的面板，如果未指定，那么第一个面板就是默认的.
 *
 * {@img erajs.ui.Accordion/accordion.png}
 *
 * ##创建可伸缩面板
 *
 * 1、通过标签创建分类，给div标签添加一个名为'accordion'的xtype.
 *
 *      @example
 *      <div id="aa" xtype="accordion" style="width:300px;height:200px;">
 *          <div title="Title1" data-options="iconCls:'icon-save'" style="overflow:auto;padding:10px;">
 *              <h3 style="color:#0099FF;">Accordion for erajs</h3>
 *              <p>Accordion is a part of erajs framework.
 *                  It lets you define your accordion component on web page more easily.</p>
 *          </div>
 *          <div title="Title2" data-options="iconCls:'icon-reload',selected:true" style="padding:10px;">
 *              content2
 *          </div>
 *          <div title="Title3">
 *              content3
 *          </div>
 *      </div>
 *
 * 2、我们可以更改或修改面板的一些功能以后再重新创建它.
 *
 *      @example
 *      var accordion = erajs.getCmp('aa');
 *      accordion.accordion({
 *          animate:false
 *      });
 */
(function(){

    "use strict";

    function init(container){

        var me = container;
        var target = me.target,
            cc = $(target);

        cc.addClass('accordion');

        me.panels = [];
        cc.children('div').each(function(){
            var pp = $(this);
            var opts = $.extend({}, erajs.ui.parser.parseOptions(pp), {
                selected: (pp.attr('selected') ? true : undefined)
            });
          //  me.panels.push(pp);
            var panel = createPanel(container, this, opts);
            me.panels.push(panel);
        });

        cc.bind('_resize', function(e,force){
            var opts = me.options;
            if (opts.fit == true || force){
                setSize(me);
            }
            return false;
        });
    }

    function createPanel(container, pp, options){
        var me = container;
        var opts = me.options;

        var panel = new erajs.ui.Panel($.extend({}, {
            target : pp,
            conentEl : pp.id,
            collapsible: true,
            minimizable: false,
            maximizable: false,
            closable: false,
            doSize: false,
            collapsed: true,
            headerCls: 'accordion-header',
            bodyCls: 'accordion-body'
        }, options, {
            onBeforeExpand: function(){
                if (options.onBeforeExpand){
                    if (options.onBeforeExpand.call(this) == false){return false}
                }
                if (!opts.multiple){
                    // get all selected panel
                    var all = $.grep(me.getSelections(), function(p){
                        return p.collapsible;
                    });
                    for(var i=0; i<all.length; i++){
                        me.unselect(me.getPanelIndex(all[i]));
                    }
                }
                var header = this.getHeader();
                header.addClass('accordion-header-selected');
                header.find('.accordion-collapse').removeClass('accordion-expand');

            },
            onExpand: function(){
                if (options.onExpand){options.onExpand.call(this)}
                opts.onSelect.call(me,
                    this.title, me.getPanelIndex(this));
            },
            onBeforeCollapse: function(){
                if (options.onBeforeCollapse){
                    if (options.onBeforeCollapse.call(this) == false){return false}
                }
                var header = this.getHeader();
                header.removeClass('accordion-header-selected');
                header.find('.accordion-collapse').addClass('accordion-expand');

            },
            onCollapse: function(){
                if (options.onCollapse){options.onCollapse.call(this)}
                opts.onUnselect.call(container,
                    this.title, me.getPanelIndex(this));
            }
        }));

        var header = panel.getHeader();
        var tool = header.children('div.panel-tool');
        tool.children('a.panel-tool-collapse').hide();	// hide the old collapse button
        var t = $('<a href="javascript:void(0)"></a>').addClass('accordion-collapse accordion-expand').appendTo(tool);
        t.bind('click', function(){
            var index = me.getPanelIndex(panel);
            if (panel.collapsed){
                me.select(index);
            } else {
                me.unselect(index);
            }
            return false;
        });
        panel.collapsible ? t.show() : t.hide();

        header.click(function(){
            $(this).find('a.accordion-collapse:visible').triggerHandler('click');
            return false;
        });

        return panel;
    }

    function setProperties(container){
       var me = container,
           opts = me.options,
           target = me.target;

        var cc = $(target);
        if (opts.border){
            cc.removeClass('accordion-noborder');
        } else {
            cc.addClass('accordion-noborder');
        }

    }

    function setSize(container){
        var me = container,
            opts = me.options,
            panels = me.panels,
            target = me.target;

        var cc = $(target);
        opts.fit ? $.extend(opts, cc._fit()) : cc._fit(false);

        if (!isNaN(opts.width)){
            cc._outerWidth(opts.width);
        } else {
            cc.css('width', '');
        }

        var headerHeight = 0;
        var bodyHeight = 'auto';
        var headers = cc.find('>div.panel>div.accordion-header');
        if (headers.length){
            headerHeight = $(headers[0]).css('height', '')._outerHeight();
        }
        if (!isNaN(opts.height)){
            cc._outerHeight(opts.height);
            bodyHeight = cc.height() - headerHeight*headers.length;
        } else {
            cc.css('height', '');
        }

        _resize(true, bodyHeight - _resize(false) + 1);

        function _resize(collapsible, height){
            var totalHeight = 0;
            for(var i=0; i<panels.length; i++){
                var p = panels[i];
                var header = p.getHeader();
                var h = header._outerHeight(headerHeight);
                if (p.collapsible == collapsible){
                    var pheight = isNaN(height) ? undefined : (height+headerHeight*h.length);
                    p.resize({
                        width: cc.width(),
                        height: (collapsible ? pheight : undefined)
                    });
                    totalHeight += $(p.target).outerHeight()-headerHeight;
                }
            }
            return totalHeight;
        }
    }

    function doFirstSelect(container){
        var me = container;
        var opts = me.options;

        var p = findBy(me, 'selected', true);
        if (p){
            _select(me.getPanelIndex(p));
        } else {
            _select(opts.selected);
        }

        function _select(index){
            var animate = opts.animate;
            opts.animate = false;
            me.select(index);
            opts.animate = animate;
        }
    }

    // stop the animation of all panels
    function stopAnimate(container){
        var panels = container.panels;
        for(var i=0; i<panels.length; i++){
            var panel = panels[i];
            $(panel.target).stop(true,true);
        }
    }

    // find a panel by specified property, return the panel object or panel index.
    function findBy(container, property, value, all){

        var me = container;
        var panels = me.panels;
        var pp = [];
        for(var i=0; i<panels.length; i++){
            var p = panels[i];
            if (property){
                if (p[property] == value){
                    pp.push(p);
                }
            } else {
                if (p['id'] == value['id'] || p['title'] == value['title']){
                    return i;
                }
            }
        }
        if (property){
            return all ? pp : (pp.length ? pp[0] : null);
        } else {
            return -1;
        }
    }

    erajs.ui.Accordion = function(options){

        options = options || {};
        var target = options.target;
        if(!target){
            var contentEl = options.contentEl;
            if(contentEl){
                target = $(contentEl);
            }
        }
        if(target){
            this.target = target;

            this.options = $.extend({},erajs.ui.Accordion.defaults,
                    erajs.ui.Accordion.parseOptions(target), options);

            this.panels = [];
            this.id = this.options.id;
            this.accordion = $(target).addClass('accordion');

            init(this);
        }

        this._render(target);
    };

    erajs.ui.Accordion.prototype = {

        /**
         * 更新组件配置.
         * @param {Object} options
         */
        updateAccordion : function(options){
            var me = this;
            var opts = $.extend(me.options, options);
            me.options = opts;
            me._render();
        },

        /**
         * 获取选中的面板.
         * @returns {erajs.ui.Panel}
         */
        getSelected : function(){
            var me = this;
            var pp = me.getSelections();
            return pp.length ? pp[0] : null;
        },

        /**
         * 获取所有选中的面板,如果没有，那么返回 -1.
         * @returns {Array}
         */
        getSelections : function(){
            var me = this;
            return findBy(me, 'collapsed', false, true);
        },

        /**
         * 获取所有面板.
         * @returns {Array}
         */
        getPanels : function(){
            return this.panels;
        },

        /**
         * 获取指定的面板，'which'参数可以是面板的标题或者索引.
         * @param {String/Number} which
         * @returns {erajs.ui.Panel}
         */
        getPanel : function(which){
            var me = this;
            var panels = me.panels;
            if (typeof which == 'number'){
                if (which < 0 || which >= panels.length){
                    return null;
                } else {
                    return panels[which];
                }
            }
            return findBy(me, 'title', which);

        },

        /**
         * 获取指定面板的索引.
         * @param {erajs.ui.Panel} panel
         * @returns {Number}
         */
        getPanelIndex : function(panel){
            return findBy(this, null, panel);
        },

        /**
         * 选择指定面板.
         * @param {String/Number} which
         */
        select : function(which){
            var me = this;
            var p = me.getPanel(which);
            if (!p){return}
            stopAnimate(me);
            var opts = me.options;
            p.expand(opts.animate);

        },

        /**
         * 取消选择指定面板.
         * @param {String/Number} which
         */
        unselect : function(which){
            var me = this;
            var p = me.getPanel(which);
            if (!p){return}

            stopAnimate(me);
            var opts = me.options;
            p.collapse(opts.animate);
        },

        /**
         * 添加一个新面板。在默认情况下，新增的面板会变成当前面板。
         * 如果要添加一个非选中面板,将{@link #selected}属性设置为false。
         * @param {Object} options
         * @param {Boolean} [options.selected] 为true将展开面板.
         * @param {Boolean} [options.collapsible] 为true将显示折叠按钮.
         */
        add : function(options){
            var me = this;
            var opts = me.options;
            var panels = me.panels;

            if (options.selected == undefined) options.selected = true;

            stopAnimate(me);

            var pp = $('<div class=""></div>').appendTo(me.target);
            var pdom = $('div.accordion>div[class=""]')[0];
            var panel = createPanel(me, pdom, options);
            panels.push(panel);
            setSize(me);

            opts.onAdd.call(me, options.title, panels.length-1);
            if (options.selected){
               me.select(panels.length-1);
            }
        },

        /**
         * 移除指定面板.
         * @param {String/Number} which
         */
        remove : function(which){
            var me = this;

            var opts = me.options;
            var panels = me.panels;

            stopAnimate(me);

            var panel = me.getPanel(which);
            var title = panel.title;
            var index = me.getPanelIndex(panel);

            if (!panel){return;}
            if (opts.onBeforeRemove.call(me, title, index) == false){return;}

//          splice()方法向/从数组添加/删除项目，然后返回被删除项目
//          arrayObject.splice(index,howmany,item1,item2...)
//          index : 必须，整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。
//          howmany：必须，要删除项目的数量，如果设置为0，则不会删除项目
//          items1,...,itemX 可选，向数组添加新项目
            panels.splice(index, 1);
            panel.destroy();
            if (panels.length){
                setSize(me);
                var curr = me.getSelected();
                if (!curr){
                    me.select(0);
                }
            }

            opts.onRemove.call(me, title, index);
        },

        _render : function(target){
            var me = this;
            var options = me.options;

            setProperties(me);
            setSize(me);
            doFirstSelect(me);
        }
    };

    erajs.ui.Accordion.parseOptions = function(target){
        var t = $(target);
        return $.extend({}, erajs.ui.parser.parseOptions(t, [
            'id','width','height',
            {fit:'boolean',border:'boolean',animate:'boolean',multiple:'boolean',selected:'number'}
        ]));
    };

    /**
     * @class erajs.ui.Accordion.defaults
     */
    erajs.ui.Accordion.defaults = {

        /**
         * @property {Object}
         * 组件唯一标识.
         */
        id : null,

        /**
         * @property {String/Number}
         * 容器的宽度.
         */
        width: 'auto',

        /**
         * @property {String/Number}
         * 容器的高度.
         */
        height: 'auto',

        /**
         * @property {Boolean}
         * 为true，容器大小将自适应父容器.
         */
        fit: false,

        /**
         * @property {Boolean}
         * 是否显示边框.
         */
        border: true,

        /**
         * @property {Boolean}
         * 定义在展开和折叠的时候是否显示动画效果.
         */
        animate: true,

        /**
         * @property {Boolean}
         * 为true时，同时展开多个面板.
         */
        multiple: false,

        /**
         * @property {Number}
         * 初始化时默认选中的面板索引号.
         */
        selected: 0,

        /**
         * @event
         * 在面板被选中的时候触发.
         * @param title
         * @param index
         */
        onSelect: function(title, index){},

        /**
         * @event
         * 在面板被取消选中的时候触发.
         * @param title
         * @param index
         */
        onUnselect: function(title, index){},

        /**
         * @event
         * 在添加新面板的时候触发.
         * @param title
         * @param index
         */
        onAdd: function(title, index){},

        /**
         * @event
         * 在移除面板之前触发，返回false可以取消移除操作.
         * @param title
         * @param index
         */
        onBeforeRemove: function(title, index){},

        /**
         * @event
         * 在面板被移除的时候触发.
         * @param title
         * @param index
         */
        onRemove: function(title, index){}
    };
})();
/*
 * Copyright (c) 2014 www.erayt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 **/
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.ui.Tabs
 * @extends erajs.ui.Tabs.defaults
 *
 * 使用{@link erajs.ui.Tabs.defaults}重写默认值对象.
 * 选项卡显示一批面板,但在同一个时间只会显示一个面板.
 * 每个选项卡面板都有头标题和一些小的按钮工具菜单,包括关闭按钮和其他自定义按钮.
 *
 * {@img erajs.ui.Tabs/tabs.png}
 *
 * ##创建面板
 *
 * 1. 通过标签创建选项卡
 *
 *  通过标签可以更容易的创建选项卡,我们不需要写任何Javascript代码.
 *  只需要给div标签添加一个xtype='tabs'.每个选项卡面板都通过子div标签进行创建,用法和panel(面板)相同.
 *
 *      @example
 *      <div id="tt" xtype="tabs" style="width:500px;height:250px;">
 *          <div title="Tab1" style="padding:20px;display:none;">
 *              tab1
 *           </div>
 *           <div title="Tab2" data-options="closable:true" style="overflow:auto;padding:20px;display:none;">
 *              tab2
 *           </div>
 *           <div title="Tab3" data-options="iconCls:'icon-reload',closable:true" style="padding:20px;display:none;">
 *              tab3
 *           </div>
 *      </div>
 *
 * 2. 通过Javascript创建选项卡
 *
 *下面的代码演示如何使用Javascript创建选项卡,当该选项卡被选择时将会触发{@link #onSelect}事件.
 *
 *      erajs.create('tabs',{
 *	        contentEl : '#tt',
 *          border:false,
 *          onSelect:function(title){
 *              alert(title+' is selected');
 *          }
 *      });
 */
(function () {
    "use strict";

    function setScrollers(container) {
        var me = container;
        var target = me.target;
        var opts = me.options;
        if (opts.tabPosition == 'left' || opts.tabPosition == 'right' || !opts.showHeader) {
            return
        }

        var header = $(target).children('div.tabs-header');
        var tool = header.children('div.tabs-tool');
        var sLeft = header.children('div.tabs-scroller-left');
        var sRight = header.children('div.tabs-scroller-right');
        var wrap = header.children('div.tabs-wrap');

        // set the tool height
        var tHeight = header.outerHeight();
        if (opts.plain) {
            tHeight -= tHeight - header.height();
        }
        tool._outerHeight(tHeight);

        var tabsWidth = 0;
        $('ul.tabs li', header).each(function () {
            tabsWidth += $(this).outerWidth(true);
        });
        var cWidth = header.width() - tool._outerWidth();

        if (tabsWidth > cWidth) {
            sLeft.add(sRight).show()._outerHeight(tHeight);
            if (opts.toolPosition == 'left') {
                tool.css({
                    left: sLeft.outerWidth(),
                    right: ''
                });
                wrap.css({
                    marginLeft: sLeft.outerWidth() + tool._outerWidth(),
                    marginRight: sRight._outerWidth(),
                    width: cWidth - sLeft.outerWidth() - sRight.outerWidth()
                });
            } else {
                tool.css({
                    left: '',
                    right: sRight.outerWidth()
                });
                wrap.css({
                    marginLeft: sLeft.outerWidth(),
                    marginRight: sRight.outerWidth() + tool._outerWidth(),
                    width: cWidth - sLeft.outerWidth() - sRight.outerWidth()
                });
            }
        } else {
            sLeft.add(sRight).hide();
            if (opts.toolPosition == 'left') {
                tool.css({
                    left: 0,
                    right: ''
                });
                wrap.css({
                    marginLeft: tool._outerWidth(),
                    marginRight: 0,
                    width: cWidth
                });
            } else {
                tool.css({
                    left: '',
                    right: 0
                });
                wrap.css({
                    marginLeft: 0,
                    marginRight: tool._outerWidth(),
                    width: cWidth
                });
            }
        }
    }

     //包装tabs的头部和主体
    function wrapTabs(container) {
        var me = container,
            target = me.target,
            opts = me.options,
            tabs = me.tabs;

        var cc = $(target);
        cc.addClass('tabs-container');
        var pp = $('<div class="tabs-panels"></div>').insertBefore(cc);
        cc.children('div').each(function () {
            pp[0].appendChild(this);
        });
        cc[0].appendChild(pp[0]);
        $('<div class="tabs-header">'
            + '<div class="tabs-scroller-left"></div>'
            + '<div class="tabs-scroller-right"></div>'
            + '<div class="tabs-wrap">'
            + '<ul class="tabs"></ul>'
            + '</div>'
            + '</div>').prependTo(target);

        cc.children('div.tabs-panels').children('div').each(function (i) {
            var t = $(this);
            var opts = $.extend({}, erajs.ui.parser.parseOptions(t), {
                selected: (t.attr('selected') ? true : undefined)
            });
            var tab = createTab(container, this, opts);
            tabs.push(tab);
        });

        cc.children('div.tabs-header').find('.tabs-scroller-left, .tabs-scroller-right').hover(
            function () {
                $(this).addClass('tabs-scroller-over');
            },
            function () {
                $(this).removeClass('tabs-scroller-over');
            }
        );
        cc.bind('_resize', function (e, force) {
            if (opts.fit == true || force) {
                setSize(container);
                setSelectedSize(container);
            }
            return false;
        });
    }

    function createTab(container, pp, options) {

        options = options || {};
        var me = container;
        var target = me.target;

        var opts = $.extend({}, options, {
            target: pp,
            conentEl: pp.id,
            border: false,
            noheader: true,
            closed: true,
            doSize: false,
            iconCls: (options.icon ? options.icon : undefined),
            onLoad: function () {
                if (options.onLoad) {
                    options.onLoad.call(this, arguments);
                }
                me.options.onLoad.call(me, this);
            }
        });

        // create panel
        var panel = new erajs.ui.Panel(opts);

        var tabs = $(target).children('div.tabs-header').find('ul.tabs');

        panel.tab = $('<li></li>').appendTo(tabs);	// set the tab object in panel options
        panel.tab.append(
                '<a href="javascript:void(0)" class="tabs-inner">' +
                '<span class="tabs-title"></span>' +
                '<span class="tabs-icon"></span>' +
                '</a>'
        );

        me.update({
            tab: pp,
            options: panel
        });

        return panel;
    }

    function addTools(container) {
        var me = container;
        var opts = me.options;
        var target = me.target;

        var header = $(target).children('div.tabs-header');

        if (opts.tools) {
            if (typeof opts.tools == 'string') {
                $(opts.tools).addClass('tabs-tool').appendTo(header);
                $(opts.tools).show();
            } else {
                header.children('div.tabs-tool').remove();
                var tools = $('<div class="tabs-tool"><table cellspacing="0" cellpadding="0" style="height:100%"><tr></tr></table></div>').appendTo(header);
                var tr = tools.find('tr');
                for (var i = 0; i < opts.tools.length; i++) {
                    var td = $('<td></td>').appendTo(tr);
                    var tool = $('<a href="javascript:void(0);"></a>').appendTo(td);
                    tool[0].onclick = eval(opts.tools[i].handler || function () {
                    });
//                    tool.linkbutton($.extend({}, opts.tools[i], {
//                        plain: true
//                    }));
                }
            }
        } else {
            header.children('div.tabs-tool').remove();
        }
    }

    function setProperties(container) {
        var me = container;
        var opts = me.options;
        var target = me.target;
        var t = $(target);

        var header = t.children('div.tabs-header');
        var panels = t.children('div.tabs-panels');

        header.removeClass('tabs-header-top tabs-header-bottom tabs-header-left tabs-header-right');
        panels.removeClass('tabs-panels-top tabs-panels-bottom tabs-panels-left tabs-panels-right');
        if (opts.tabPosition == 'top') {
            header.insertBefore(panels);
        } else if (opts.tabPosition == 'bottom') {
            header.insertAfter(panels);
            header.addClass('tabs-header-bottom');
            panels.addClass('tabs-panels-top');
        } else if (opts.tabPosition == 'left') {
            header.addClass('tabs-header-left');
            panels.addClass('tabs-panels-right');
        } else if (opts.tabPosition == 'right') {
            header.addClass('tabs-header-right');
            panels.addClass('tabs-panels-left');
        }

        if (opts.plain == true) {
            header.addClass('tabs-header-plain');
        } else {
            header.removeClass('tabs-header-plain');
        }
        if (opts.border == true) {
            header.removeClass('tabs-header-noborder');
            panels.removeClass('tabs-panels-noborder');
        } else {
            header.addClass('tabs-header-noborder');
            panels.addClass('tabs-panels-noborder');
        }
    }

    function setSize(container) {
        var me = container;
        var opts = me.options;
        var target = me.target;

        var cc = $(target);

        opts.fit ? $.extend(opts, cc._fit()) : cc._fit(false);
        cc.width(opts.width).height(opts.height);

        var header = cc.children('div.tabs-header');
        var panels = cc.children('div.tabs-panels');
        var wrap = header.find('div.tabs-wrap');
        var ul = wrap.find('.tabs');

        for (var i = 0; i < me.tabs.length; i++) {
            var p_opts = me.tabs[i];
            var p_t = p_opts.tab.find('a.tabs-inner');
            var width = parseInt(p_opts.tabWidth || opts.tabWidth) || undefined;
            if (width) {
                p_t._outerWidth(width);
            } else {
                p_t.css('width', '');
            }
            p_t._outerHeight(opts.tabHeight);
            p_t.css('lineHeight', p_t.height() + 'px');
        }

        if (opts.tabPosition == 'left' || opts.tabPosition == 'right') {
            header._outerWidth(opts.showHeader ? opts.headerWidth : 0);
            panels._outerWidth(cc.width() - header.outerWidth());
            header.add(panels)._outerHeight(opts.height);
            wrap._outerWidth(header.width());
            ul._outerWidth(wrap.width()).css('height', '');
        } else {
            var lrt = header.children('div.tabs-scroller-left,div.tabs-scroller-right,div.tabs-tool');
            header._outerWidth(opts.width).css('height', '');
            if (opts.showHeader) {
                header.css('background-color', '');
                wrap.css('height', '');
                lrt.show();
            } else {
                header.css('background-color', 'transparent');
                header._outerHeight(0);
                wrap._outerHeight(0);
                lrt.hide();
            }
            ul._outerHeight(opts.tabHeight).css('width', '');

            setScrollers(container);

            var height = opts.height;
            if (!isNaN(height)) {
                panels._outerHeight(height - header.outerHeight());
            } else {
                panels.height('auto');
            }
            var width = opts.width;
            if (!isNaN(width)) {
                panels._outerWidth(width);
            } else {
                panels.width('auto');
            }
        }

    }

    // get the specified tab panel
    function getTab(container, which, removeit) {
        var me = container;
        var tabs = me.tabs;
        if (typeof which == 'number') {
            if (which < 0 || which >= tabs.length) {
                return null;
            } else {
                var tab = tabs[which];
                if (removeit) {
                    tabs.splice(which, 1);
                }
                return tab;
            }
        }
        for (var i = 0; i < tabs.length; i++) {
            var tab = tabs[i];
            if (tab.title == which) {
                if (removeit) {
                    tabs.splice(i, 1);
                }
                return tab;
            }
        }
        return null;
    }

    function exists(container, which) {
        return getTab(container, which) != null;
    }

    function selectTab(container, which) {
        var me = container;
        var target = me.target;
        var opts = me.options;
        var tabs = me.tabs;
        var selectHis = me.selectHis;

        if (tabs.length == 0) {
            return;
        }

        var panel = getTab(container, which); // get the panel to be activated
        if (!panel) {
            return
        }

        var selected = getSelectedTab(container);
        if (selected) {
            //如果点击的header,是当前选中tab，那么不需做处理；
            if (panel['title'] == selected['title']) {
                setSelectedSize(container);
                return;
            }
            unselectTab(container, me.getTabIndex(selected));
            //
            if (!selected.closed) {
                return
            }
        }

        panel.open();
        var title = panel.title;	// the panel title
        selectHis.push(title);	// push select history
        var tab = panel.tab;	// get the tab object
        tab.addClass('tabs-selected');

        var cc = $(target);
        // scroll the tab to center position if required.
        var wrap = cc.find('>div.tabs-header>div.tabs-wrap');
        var left = tab.position().left;
        var right = left + tab.outerWidth();
        if (left < 0 || right > wrap.width()) {
            var deltaX = left - (wrap.width() - tab.width()) / 2;
            me.scrollBy(deltaX);
        } else {
            me.scrollBy(0);
        }

        setSelectedSize(container);

        opts.onSelect.call(me, title, me.getTabIndex(panel));
    }

    function unselectTab(container, which) {
        var me = container;
        var p = getTab(container, which);
        if (p) {
            if (!p.closed) {
                p.close();
                if (p.closed) {
                    p.tab.removeClass('tabs-selected');
                    me.options.onUnselect.call(container, p.title, me.getTabIndex(p));
                }
            }
        }
    }

    function getSelectedTab(container) {
        var me = container;
        var tabs = me.tabs;
        for (var i = 0; i < tabs.length; i++) {
            var tab = tabs[i];
            if (tab.closed == false) {
                return tab;
            }
        }
        return null;
    }

     // set selected tab panel size
    function setSelectedSize(container) {
        var me = container;
        var target = me.target;
        var opts = me.options;
        var tab = getSelectedTab(container);
        if (tab) {
            var panels = $(target).children('div.tabs-panels');
            var width = opts.width == 'auto' ? 'auto' : panels.width();
            var height = opts.height == 'auto' ? 'auto' : panels.height();
            tab.resize({
                width: width,
                height: height
            });
        }
    }

    // close a tab with specified index or title
    function closeTab(container, which) {

        var me = container;
        var opts = me.options;
        var tabs = me.tabs;
        var selectHis = me.selectHis;

        var exist = exists(container, which);

        if (!exist) return;

        var tab = getTab(container, which);

        var title = tab.title;
        var index = me.getTabIndex(tab);

        if (opts.onBeforeClose.call(me, title, index) == false) return;

        var tab = getTab(container, which, true);
        tab.tab.remove();
        tab.destroy();

        opts.onClose.call(me, title, index);

        setSize(container);

        // remove the select history item
        for (var i = 0; i < selectHis.length; i++) {
            if (selectHis[i] == title) {
                selectHis.splice(i, 1);
                i--;
            }
        }

        // select the nearest tab panel
        var hisTitle = selectHis.pop();

        if (hisTitle) {
            selectTab(container, hisTitle);
        } else if (tabs.length) {
            selectTab(container, 0);
        }
    }

    function showHeader(container, visible) {
        var me = container;
        var opts = me.options;
        opts.showHeader = visible;
        me.resize();
    }

    function bindEvents(container) {
        var me = container;
        var opts = me.options;
        var target = me.target;

        $(target).children('div.tabs-header').unbind().bind('click', function (e) {

            if ($(e.target).hasClass('tabs-scroller-left')) {
                me.scrollBy(-opts.scrollIncrement);
            } else if ($(e.target).hasClass('tabs-scroller-right')) {
                me.scrollBy(opts.scrollIncrement);
            } else {
                var li = $(e.target).closest('li');
                if (li.hasClass('tabs-disabled')) {
                    return;
                }
                var a = $(e.target).closest('a.tabs-close');
                if (a.length) {
                    closeTab(me, getLiIndex(li));
                } else if (li.length) {
                    var index = getLiIndex(li);
                    var popts = me.tabs[index];
                    if (popts.collapsible) {
                        popts.closed ? selectTab(me, index) : unselectTab(me, index);
                    } else {
                        selectTab(me, index);
                    }
                }
            }
        });

        function getLiIndex(li) {
            var index = 0;
            li.parent().children('li').each(function (i) {
                if (li[0] == this) {
                    index = i;
                    return false;
                }
            });
            return index;
        }
    }

    //do first select action, if no tab is setted the first tab will be selected.
    function doFirstSelect(container) {
        var me = container;
        var tabs = me.tabs;
        for (var i = 0; i < tabs.length; i++) {
            if (tabs[i].selected) {
                selectTab(container, i);
                return;
            }
        }
        selectTab(container, me.options.selected);
    }

    function addTab(container, options) {
        var me = container;
        var target = me.target;
        var opts = me.options;
        var tabs = me.tabs;
        if (options.selected == undefined) options.selected = true;

        var pp = $('<div></div>').appendTo($(target).children('div.tabs-panels'));
        var tab = createTab(container, pp[0], options);
        tabs.push(tab);

        opts.onAdd.call(me, options.title, tabs.length - 1);

        setSize(me);
        if (options.selected) {
            selectTab(container, tabs.length - 1);	// select the added tab panel
        }
    }

    erajs.ui.Tabs = function (options) {

        options = options || {};
        var target = options.target;
        if (!target) {
            var contentEl = options.contentEl;
            if (contentEl) {
                target = $(contentEl);
            }
        }
        if (target) {
            this.target = target;

            this.options = $.extend({}, erajs.ui.Tabs.defaults,
                erajs.ui.Tabs.parseOptions(target), options);

            this.tabs = [];
            this.id = this.options.id;
            this.selectHis = [];

            wrapTabs(this);
        }

        this._render(target);
    };

    erajs.ui.Tabs.prototype = {

        /**
         * 更新选项卡参数配置.
         * @param {Object} options
         */
        updateTabs: function (options) {
            var me = this;
            var opts = $.extend(me.options, options);
            me.options = opts;
            me._render();
        },

        /**
         * @param options
         * @param {Number} [options.width]
         * @param {Number} [options.height]
         * 调整选项卡容器大小和布局.
         */
        resize: function (options) {
            var me = this;
            var opts = me.options;
            $.extend(opts,options);
            setSize(me);
            setSelectedSize(me);
        },

        /**
         * 添加一个新选项卡面板，选项参数是一个配置对象，
         * 查看选项卡面板属性的更多细节。在添加一个新选项卡面板的时候它将变成可选的.
         * @param {Object} options
         * @param {Boolean} [options.closable] 为true的时，选项卡面板将显示一个关闭按钮，在点击的时候会关闭选项卡面板.
         * @param {Boolean} [options.selected] 为true的时候，选项卡面板会被选中.
         */
        add: function (options) {
            addTab(this, options);
        },

        /**
         * 关闭一个选项卡面板，'which'参数可以是选项卡面板的标题或者索引，以指定要关闭的面板.
         * @param {String/Number} which
         */
        close: function (which) {
            var me = this;
            closeTab(me, which);
        },

        /**
         * 获取指定选项卡面板，'which'参数可以是选项卡面板的标题或者索引.
         * @param {String/Number} which
         * @return {erajs.ui.Panel}
         */
        getTab: function (which) {
            var me = this;
            return getTab(me, which);
        },

        /**
         * 获取指定选项卡面板的索引.
         * @param {erajs.ui.Panel} tab
         * @return {Number}
         */
        getTabIndex: function (tab) {
            var me = this;
            var tabs = me.tabs;
            for (var i = 0; i < tabs.length; i++) {
                if (tabs[i]['id'] == tab['id']) {
                    return i;
                }
            }
            return -1;
        },

        /**
         * 获取选择的选项卡面板.
         * @return {erajs.ui.Panel}
         */
        getSelected: function () {
            return getSelectedTab(this);
        },

        /**
         * 选择一个选项卡面板，'which'参数可以是选项卡面板的标题或者索引.
         * @param {String/Number} which
         */
        select: function (which) {
            var me = this;
            selectTab(me, which);
        },

        /**
         * 取消选择一个选项卡面板，'which'参数可以是选项卡面板的标题或者索引.
         * @param {String/Number} which
         */
        unselect: function (which) {
            unselectTab(this, which);
        },

        /**
         * 判断指定的面板是否存在.
         * @param {String/Number} which
         * @returns {Boolean}
         */
        exists: function (which) {
            var me = this;
            return exists(me, which);
        },

        /**
         * 更新指定的选项卡面板，'param'参数包含2个属性：
         * @param {Object} param
         * @param {String/Number} [param.which] 要更新的选项卡面板索引.
         * @param {Object} [param.options] 选项卡面板的属性.
         */
        updateTab : function(param){
            var me = this;
            var which = param.which;
            var options = param.options;
            var tab = me.getTab(which);
            if(tab){
                var opts = $.extend(tab, param.options, {
                    iconCls: (param.options.icon ? param.options.icon : undefined)
                });
                tab.updatePanel(opts);
                me.update({
                    tab : tab.tab,
                    options : opts
                });
            }
        },

        update: function (param) {
            var me = this;
            var selectHis = me.selectHis;
            var pp = param.tab;	// the tab panel
            var opts = param.options;
            var oldTitle = opts.title;
            var tab = opts.tab;

            var s_title = tab.find('span.tabs-title');
            var s_icon = tab.find('span.tabs-icon');

            s_title.html(opts.title);
            s_icon.attr('class', 'tabs-icon');

            tab.find('a.tabs-close').remove();
            if (opts.closable) {
                s_title.addClass('tabs-closable');
                $('<a href="javascript:void(0)" class="tabs-close"></a>').appendTo(tab);
            } else {
                s_title.removeClass('tabs-closable');
            }
            if (opts.iconCls) {
                s_title.addClass('tabs-with-icon');
                s_icon.addClass(opts.iconCls);
            } else {
                s_title.removeClass('tabs-with-icon');
            }

            /*if (oldTitle != opts.title){
             for(var i=0; i<selectHis.length; i++){
             if (selectHis[i] == oldTitle){
             selectHis[i] = opts.title;
             }
             }
             }*/

            tab.find('span.tabs-p-tool').remove();
            if (opts.tools) {
                var p_tool = $('<span class="tabs-p-tool"></span>').insertAfter(tab.find('a.tabs-inner'));
                if ($.isArray(opts.tools)) {
                    for (var i = 0; i < opts.tools.length; i++) {
                        var t = $('<a href="javascript:void(0)"></a>').appendTo(p_tool);
                        t.addClass(opts.tools[i].iconCls);
                        if (opts.tools[i].handler) {
                            t.bind('click', {handler: opts.tools[i].handler}, function (e) {
                                if ($(this).parents('li').hasClass('tabs-disabled')) {
                                    return;
                                }
                                e.data.handler.call(this);
                            });
                        }
                    }
                } else {
                    $(opts.tools).children().appendTo(p_tool);
                }
                var pr = p_tool.children().length * 12;
                if (opts.closable) {
                    pr += 8;
                } else {
                    pr -= 3;
                    p_tool.css('right', '5px');
                }
                s_title.css('padding-right', pr + 'px');
            }
            setSize(me);

            me.options.onUpdate.call(me, opts.title, me.getTabIndex(pp));

        },

        /**
         * 启用指定的选项卡面板.
         * @param {String/Number} which
         */
        enableTab: function (which) {
            var me = this;
            var tab = me.getTab(which);
            if (tab)
                tab.tab.removeClass('tabs-disabled');
        },

        /**
         * 禁用指定的选项卡面板.
         * @param {String/Number} which
         */
        disableTab: function (which) {
            var me = this;
            var tab = me.getTab(which);
            if (tab)
                tab.tab.addClass('tabs-disabled');
        },

        /**
         * 显示选项卡的标签头部.
         */
        showHeader: function () {
            showHeader(this, true);
        },

        /**
         * 隐藏选项卡的标签头部.
         */
        hideHeader: function () {
            showHeader(this, false);
        },

        /**
         * 滚动选项卡标题指定的像素数量，负值则向右滚动，正值则向左滚动.
         * @param {Number} deltaX
         */
        scrollBy: function (deltaX) {
            var me = this;
            var target = me.target;
            var opts = me.options;

            var wrap = $(target).find('>div.tabs-header>div.tabs-wrap');
            var pos = Math.min(wrap._scrollLeft() + deltaX, getMaxScrollWidth());
            wrap.animate({scrollLeft: pos}, opts.scrollDuration);

            function getMaxScrollWidth() {
                var w = 0;
                var ul = wrap.children('ul');
                ul.children('li').each(function () {
                    w += $(this).outerWidth(true);
                });
                return w - wrap.width() + (ul.outerWidth() - ul.width());
            }
        },

        _render: function (target) {
            addTools(this);
            setProperties(this);
            setSize(this);
            bindEvents(this);
            doFirstSelect(this);
        }
    };

    /**
     * @class erajs.ui.Tabs.defaults
     */
    erajs.ui.Tabs.defaults = {

        /**
         * @property {Object}
         * 组件唯一标识.
         */
        id : null,

        /**
         * @property {String/Number}
         * 选项卡容器宽度.
         */
        width: 'auto',

        /**
         * @property {String/Number}
         * 选项卡容器高度.
         */
        height: 'auto',

        /**
         * @property {Number}
         * 选项卡标题宽度，在{@link #tabPosition}属性设置为'left'或'right'的时候才有效。
         */
        headerWidth: 150,

        /**
         * @property {String/Number}
         * 标签条的宽度.
         */
        tabWidth: 'auto',

        /**
         * @property {Number}
         * 标签条的高度.
         */
        tabHeight: 27,

        /**
         * @property {Number}
         * 初始化选中tab页的索引.
         */
        selected: 0,

        /**
         * @property {Boolean}
         * 设置为true时，显示tab页标题.
         */
        showHeader: true,

        /**
         * @property {Boolean}
         * 为true时，将不显示控制面板背景.
         */
        plain: false,

        /**
         * @property {Boolean}
         * 为true时，选项卡的大小将铺满它所在的容器.
         */
        fit: false,

        /**
         * @property {Boolean}
         * 为true时，显示选项卡容器边框.
         */
        border: true,

        /**
         * @property {Array/String}
         * 工具栏添加在选项卡面板头的左侧或右侧。可用的值有：
         *
         * - '一个工具菜单数组，每个工具选项都和button相同'
         * - '一个指向<div/>容器工具菜单的选择器'
         */
        tools: null,

        /**
         * @property {String}
         * 工具栏位置.可用值：
         *
         * - 'left'
         * - 'right'
         */
        toolPosition: 'right',

        /**
         * @property {String}
         * 选项卡位置。可用值：
         *
         * - 'top'
         * - 'bottom'
         * - 'left'
         * - 'right'
         */
        tabPosition: 'top',

        /**
         * @property {Number}
         * 选项卡滚动条每次滚动的像素值.
         */
        scrollIncrement: 100,

        /**
         * @property {Number}
         * 每次滚动动画持续的时间，单位：毫秒.
         */
        scrollDuration: 400,

        /**
         * @event
         * 在ajax选项卡面板加载完远程数据的时候触发.
         * @param {erajs.ui.Panel} panel
         */
        onLoad: function (panel) {
        },

        /**
         * @event
         * 用户在选择一个选项卡面板的时候触发.
         * @param {String} title
         * @param {Number} index
         */
        onSelect: function (title, index) {
        },

        /**
         * @event
         * 用户在取消选择一个选项卡面板的时候触发.
         * @param {String} title
         * @param {Number} index
         */
        onUnselect: function (title, index) {
        },

        /**
         * @event
         * 在选项卡面板关闭的时候触发，返回false取消关闭操作.
         * @param {String} title
         * @param {Number} index
         */
        onBeforeClose: function (title, index) {
        },

        /**
         * @event
         * 在用户关闭一个选项卡面板的时候触发.
         * @param {String} title
         * @param {Number} index
         */
        onClose: function (title, index) {
        },

        /**
         * @event
         * 在添加一个新选项卡面板的时候触发.
         * @param {String} title
         * @param {Number} index
         */
        onAdd: function (title, index) {
        },

        /**
         * @event
         * 在更新一个选项卡面板的时候触发.
         * @param {String} title
         * @param {Number} index
         */
        onUpdate: function (title, index) {
        },

        onContextMenu: function (e, title, index) {
        }
    };

    erajs.ui.Tabs.parseOptions = function (target) {
        var t = $(target);
        return $.extend({}, erajs.ui.parser.parseOptions(t, [
            'id', 'width', 'height', 'tools', 'toolPosition', 'tabPosition',
            {fit: 'boolean', border: 'boolean', plain: 'boolean', headerWidth: 'number', tabWidth: 'number', tabHeight: 'number', selected: 'number', showHeader: 'boolean'}
        ]));
    };

})();
/*
 * Copyright (c) 2014 www.erayt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 **/
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.ui.Layout
 *
 * 布局的容器，有多达五个区域：北部，南部，东部，西部和中心。
 * center是必需的，但中心区域面板边缘区域面板是可选的。点击折叠的收缩面板。
 * 可以嵌套布局，以便用户可以建立复杂的布局。
 *
 * {@img erajs.ui.Layout/layout.png}
 *
 * ## 依赖关系
 *
 * - {@link erajs.ui.Panel Panel}
 *
 * ## 使用案例
 *
 * 1. 创建布局面板
 *
 *  使用HTML标签创建布局面板，只须要对`<div>`标签引用 'layout' xtype。
 *
 *      @example
 *      <div id="cc" xtype="layout" style="width:700px;height:400px;color: #666;">
 *          <div id="np" data-options="region:'north',title:'北'" style="height:50px;"></div>
 *          <div id="sp" data-options="region:'south',title:'南'" style="height:100px;"></div>
 *          <div id="ep" data-options="region:'east'" title="东" style="width:100px;"></div>
 *          <div id="wp" data-options="region:'west'" title="西" style="width:100px;"></div>
 *          <div id="cp" data-options="region:'center',title:'中'"></div>
 *      </div>
 *
 * 2、创建整个页面的布局，只需在`body`定义xtype为'layout'.
 *
 *      <body id="body" xtype="layout">
 *          <div data-options="region:'north',border:true" style="height:60px;background:#B3DFDA;padding:10px;color: #666;">北区</div>
 *          <div data-options="region:'west',title:'西'" style="width:150px;padding:10px;color: #666;">西区内容</div>
 *          <div data-options="region:'east',collapsed:true,title:'东'" style="width:100px;padding:10px;color: #666;">东区内容</div>
 *          <div data-options="region:'south',border:false" style="height:50px;background:#A9FACD;padding:10px;color: #666;">南区</div>
 *          <div data-options="region:'center',title:'中'"></div>
 *      </body>
 *
 *  3、创建嵌套的布局.
 *
 *      @example
 *      <div xtype="layout" style="width:700px;height:400px;">
 *          <div data-options="region:'north'" style="height:100px"></div>
 *          <div data-options="region:'center'">
 *              <div xtype="layout" data-options="fit:true">
 *                  <div data-options="region:'west',collapsed:true" style="width:180px"></div>
 *                  <div data-options="region:'center'"></div>
 *              </div>
 *          </div>
 *      </div>
 *
 * 4、用ajax加载内容。
 *
 * 根据面板的布局。每一个区域的面板提供了内置的支持异步加载URL的内容，用户可以使用异步加载技术，其布局，页面显示速度更快。
 *
 *      <div xtype="layout" style="width:700px;height:400px;">
 *          <div data-options="region:'west',href:'*.html'" style="width:180px" />
 *          <div data-options="region:'center',href:'*.html'" />
 *      </div>
 *
 * ## 区域面板选项
 *
 * 区域的控制面板选项中定义的面板组件，具体可查看{@link erajs.ui.Layout.paneldefaults},下面是一些常见的添加属性：
 *
 *  - `title` : 布局面板的标题.
 *  - `region` : 定义布局面板的位置（方向），可以取下列值的其中之一：north, south, east, west, center.
 *  - `border` : 设置为true将显示布局面板的边框.
 *  - `iconCls` : 一个用来显示布局面板头部图标的css类.
 * - `href` : 一个用来从远程站点载入数据的超链接.
 *
 */
(function(){

    "use strict";

    var _1 = false;

    function resize(container){
        var me = container,
            target = me.target,
            opts = me.options,
            panels = me.panels;

        var cc = $(target);
        if (target.tagName == "BODY") {
            cc._fit();
        } else {
            opts.fit ? cc.css(cc._fit()) : cc._fit(false);
        }
        var position = {
            top : 0,
            left : 0,
            width : cc.width(),
            height : cc.height()
        };
        setTopHeight(isVisibled(panels.expandNorth) ? panels.expandNorth : panels.north, "n");
        setTopHeight(isVisibled(panels.expandSouth) ? panels.expandSouth : panels.south, "s");
        setLeftWidth(isVisibled(panels.expandEast) ? panels.expandEast : panels.east, "e");
        setLeftWidth(isVisibled(panels.expandWest) ? panels.expandWest : panels.west, "w");
        panels.center.resize(position);

        function getHeight(pp) {
            return Math.min(Math.max(pp.height, pp.minHeight), pp.maxHeight);
        };
        function getWidth(pp) {
            return Math.min(Math.max(pp.width, pp.minWidth), pp.maxWidth);
        };
        function setTopHeight(pp, alias) {
            if (!pp || !isVisibled(pp)) {
                return;
            }
            var height = getHeight(pp);
            pp.resize({
                width : cc.width(),
                height : height,
                left : 0,
                top : (alias == "n" ? 0 : cc.height() - height)
            });
            position.height -= height;
            if (alias == "n") {
                position.top += height;
                if (!pp.split && pp.border) {
                    position.top--;
                }
            }
            if (!pp.split && pp.border) {
                position.height++;
            }
        };
        function setLeftWidth(pp, alias) {
            if (!pp || !isVisibled(pp)) {
                return;
            }
            var width = getWidth(pp);
            pp.resize({
                width : width,
                height : position.height,
                left : (alias == "e" ? cc.width() - width : 0),
                top : position.top
            });
            position.width -= width;
            if (alias == "w") {
                position.left += width;
                if (!pp.split && pp.border) {
                    position.left--;
                }
            }
            if (!pp.split && pp.border) {
                position.width++;
            }
        };
    }

    function isVisibled(pp){
        if (pp) {
            return pp.getPanel().is(":visible");
        } else {
            return false;
        }
    }

    function add(container,options,el){
        var me = container,
            target = me.target;

        options.region = options.region || "center";
        var panels = me.panels;
        var cc = $(target);
        var dir = options.region;

        if (panels[dir]) {
            return;
        }

        var pp = $(el);
        if (!pp.length) {
            pp = $("<div></div>").appendTo(cc);
        }
        var opts = $.extend({}, erajs.ui.Layout.paneldefaults, {
            target : pp[0],
            conentEl : pp.id,
            width : (pp.length ? parseInt(pp[0].style.width) || pp.outerWidth() : "auto"),
            height : (pp.length ? parseInt(pp[0].style.height) || pp.outerHeight() : "auto"),
            doSize : false,

            /**
             * @property 定义是否显示折叠按钮
             * @member erajs.ui.Layout.paneldefaults
             */
            collapsible : true,
            cls : ("layout-panel layout-panel-" + dir),
            bodyCls : "layout-body",
            onOpen : function() {
                var me = this;
                var target = me.target;
                var ptool = me.getHeader().children("div.panel-tool");
                ptool.children("a.panel-tool-collapse").hide();

                var regions = {
                    north : "up",
                    south : "down",
                    east : "right",
                    west : "left"
                };
                if (!regions[dir]) {
                    return;
                }
                var lclass = "layout-button-" + regions[dir];

                var t = ptool.children("a." + lclass);
                if (!t.length) {
                    t = $("<a href=\"javascript:void(0)\"></a>").addClass(lclass).appendTo(ptool);
                    t.bind("click", {
                        dir : dir
                    }, function(e) {
                        collapse(container, e.data.dir);
                        return false;
                    });
                }
                me.collapsible ? t.show() : t.hide();
            }
        }, options);

        var panel = new erajs.ui.Panel(opts);
        panels[dir] = panel;

        if (panel.split) {
            var target = panel.target;
            $(target).addClass("layout-split-" + dir);
            var region = "";
            if (dir == "north") {
                region = "s";
            }
            if (dir == "south") {
                region = "n";
            }
            if (dir == "east") {
                region = "w";
            }
            if (dir == "west") {
                region = "e";
            }
           //改变大小拖动

        }
    }

    function remove(container,region){
        var me = container,
            panels = me.panels;

        if (panels[region]) {
            panels[region].destroy();
            panels[region] = null;
            var _2e = "expand" + region.substring(0, 1).toUpperCase() + region.substring(1);
            if (panels[_2e]) {
                panels[_2e].destroy();
                panels[_2e] = undefined;
            }
        }
    }

    function collapse(container,region,flag){
        if (flag == undefined) {
            flag = "normal";
        }
        var me = container,
            panels = me.panels,
            target = me.target;

        var p = panels[region];
        if (p.onBeforeCollapse.call(p) == false) {
            return;
        }
        var _region = "expand" + region.substring(0, 1).toUpperCase() + region.substring(1);
        //判断是否存在收缩的面板，如果没有，那么先创建,并绑定事件
        if (!panels[_region]) {
            var _p = getPanel(region);
            panels[_region] = _p;
            var _p_target = _p.target;
            $(_p_target).bind("click", function() {
                var _37 = getEvents();
                p.expand(false);
                p.open();
                p.resize(_37.collapse);
                $(p.target).animate(_37.expand, function() {
                    $(this).unbind(".layout").bind("mouseleave.layout", {
                        region : region
                    }, function(e) {
                        if (_1 == true) {
                            return;
                        }
                        collapse(container, e.data.region);
                    });
                });
                return false;
            });
        }
        var event = getEvents();
        if (!isVisibled(panels[_region])) {
            panels.center.resize(event.resizeC);
        }
        var p_target = p.target;
        $(p_target).animate(event.collapse, flag, function() {
            p.collapse(false);
            p.close();
            panels[_region].open();
            panels[_region].resize(event.expandP);
            $(this).unbind(".layout");
        });

        function getPanel(dir) {
            var _3a;
            if (dir == "east") {
                _3a = "layout-button-left";
            } else {
                if (dir == "west") {
                    _3a = "layout-button-right";
                } else {
                    if (dir == "north") {
                        _3a = "layout-button-down";
                    } else {
                        if (dir == "south") {
                            _3a = "layout-button-up";
                        }
                    }
                }
            }
            var p = $("<div></div>").appendTo(target);

            var opts = $.extend({}, erajs.ui.Layout.paneldefaults, {
                target : p[0],
                cls : ("layout-expand layout-expand-" + dir),
                title : "&nbsp;",
                closed : true,
                minWidth : 0,
                minHeight : 0,
                doSize : false,
                tools : [{
                    iconCls : _3a,
                    handler : function() {
                        expand(container, region);
                        return false;
                    }
                }]
            });

            var panel_ = new erajs.ui.Panel(opts);

            var target_ = panel_.target;

            panel_.getPanel().hover(function() {
                $(this).addClass("layout-expand-over");
            }, function() {
                $(this).removeClass("layout-expand-over");
            });
            return panel_;
        };

        function getEvents() {
            var cc = $(target);
            var cpanel = panels.center;
            var _3c = p.collapsedSize;
            if (region == "east") {
                var ww = cpanel.width + p.width - _3c;
                if (p.split || !p.border) {
                    ww++;
                }
                return {
                    resizeC : {
                        width : ww
                    },
                    expand : {
                        left : cc.width() - p.width
                    },
                    expandP : {
                        top : cpanel.top,
                        left : cc.width() - _3c,
                        width : _3c,
                        height : cpanel.height
                    },
                    collapse : {
                        left : cc.width(),
                        top : cpanel.top,
                        height : cpanel.height
                    }
                };
            } else {
                if (region == "west") {
                    var ww = cpanel.width + p.width - _3c;
                    if (p.split || !p.border) {
                        ww++;
                    }
                    return {
                        resizeC : {
                            width : ww,
                            left : _3c - 1
                        },
                        expand : {
                            left : 0
                        },
                        expandP : {
                            left : 0,
                            top : cpanel.top,
                            width : _3c,
                            height : cpanel.height
                        },
                        collapse : {
                            left : -p.width,
                            top : cpanel.top,
                            height : cpanel.height
                        }
                    };
                } else {
                    if (region == "north") {
                        var hh = cpanel.height;
                        if (!isVisibled(panels.expandNorth)) {
                            hh += p.height - _3c + ((p.split || !p.border) ? 1 : 0);
                        }
                        var east = panels.east;
                        var west = panels.west;
                        var expandEast = panels.expandEast;
                        var expandWest = panels.expandWest;

                        if(east)
                            east.resize({top : _3c - 1,height : hh});

                        if(west)
                            west.resize({top : _3c - 1,height : hh});

                        if(expandEast)
                            expandEast.resize({top : _3c - 1,height : hh});

                        if(expandWest)
                            expandWest.resize({top : _3c - 1,height : hh});

                        return {
                            resizeC : {
                                top : _3c - 1,
                                height : hh
                            },
                            expand : {
                                top : 0
                            },
                            expandP : {
                                top : 0,
                                left : 0,
                                width : cc.width(),
                                height : _3c
                            },
                            collapse : {
                                top : -p.height,
                                width : cc.width()
                            }
                        };
                    } else {
                        if (region == "south") {
                            var hh = cpanel.height;
                            if (!isVisibled(panels.expandSouth)) {
                                hh += p.height - _3c + ((p.split || !p.border) ? 1 : 0);
                            }

                            var east = panels.east;
                            var west = panels.west;
                            var expandEast = panels.expandEast;
                            var expandWest = panels.expandWest;

                            if(east)
                                east.resize({height : hh});

                            if(west)
                                west.resize({height : hh});

                            if(expandEast)
                                expandEast.resize({height : hh});

                            if(expandWest)
                                expandWest.resize({height : hh});

                            return {
                                resizeC : {
                                    height : hh
                                },
                                expand : {
                                    top : cc.height() - p.height
                                },
                                expandP : {
                                    top : cc.height() - _3c,
                                    left : 0,
                                    width : cc.width(),
                                    height : _3c
                                },
                                collapse : {
                                    top : cc.height(),
                                    width : cc.width()
                                }
                            };
                        }
                    }
                }
            }
        };
    }

    function expand(container,region){

        var me = container;
        var panels = me.panels;
        var target = me.target;
        var p = panels[region];

        if (p.onBeforeExpand.call(p) == false) {
            return;
        }
        var _42 = _43();
        var _region = "expand" + region.substring(0, 1).toUpperCase() + region.substring(1);
        if (panels[_region]) {
            panels[_region].close();
            var panel_ = p.getPanel();
            panel_.stop(true, true);
            p.expand(false);
            p.open();
            p.resize(_42.collapse);
            panel_.animate(_42.expand, function() {
                resize(container);
            });
        }
        function _43() {
            var cc = $(target);
            var pcenter = panels.center;
            if (region == "east" && panels.expandEast) {
                return {
                    collapse : {
                        left : cc.width(),
                        top : pcenter.top,
                        height : pcenter.height
                    },
                    expand : {
                        left : cc.width() - panels["east"].width
                    }
                };
            } else {
                if (region == "west" && panels.expandWest) {
                    return {
                        collapse : {
                            left : -panels["west"].width,
                            top : pcenter.top,
                            height : pcenter.height
                        },
                        expand : {
                            left : 0
                        }
                    };
                } else {
                    if (region == "north" && panels.expandNorth) {
                        return {
                            collapse : {
                                top : -panels["north"].height,
                                width : cc.width()
                            },
                            expand : {
                                top : 0
                            }
                        };
                    } else {
                        if (region == "south" && panels.expandSouth) {
                            return {
                                collapse : {
                                    top : cc.height(),
                                    width : cc.width()
                                },
                                expand : {
                                    top : cc.height() - panels["south"].height
                                }
                            };
                        }
                    }
                }
            }
        };
    }

    function addPanels(container){
        var me = container;
        var target = me.target;
        var cc = $(target);

        cc.addClass("layout");

        function createPanel(cc) {
            cc.children("div").each(function() {
                var options = erajs.ui.Layout.parsePanelOptions(this);
                if ("north,south,east,west,center".indexOf(options.region) >= 0) {
                    add(me, options, this);
                }
            });
        };

        //创建面板
        cc.children("form").length ? createPanel(cc.children("form")) : createPanel(cc);

        cc.append("<div class=\"layout-split-proxy-h\"></div><div class=\"layout-split-proxy-v\"></div>");
        //改变大小时触发
        cc.bind("_resize", function(e, force) {
            var opts = me.options;
            if (opts.fit == true || force) {
                resize(me);
            }
            return false;
        });
    }

    function initStatus(container){
        var me = container,
            panels = me.panels;

        if (panels.east && panels.east.collapsed) {
            collapse(me, "east", 0);
        }
        if (panels.west && panels.west.collapsed) {
            collapse(me, "west", 0);
        }
        if (panels.north && panels.north.collapsed) {
            collapse(me, "north", 0);
        }
        if (panels.south && panels.south.collapsed) {
            collapse(me, "south", 0);
        }
    }

    erajs.ui.Layout = function(options){
        options = options || {};
        var target = options.target;
        if(!target){
            var contentEl = options.contentEl;
            if(contentEl){
                target = $(contentEl);
            }
        }
        if(target){
            this.target = target;
            this.options = $.extend({}, erajs.ui.Layout.defaults,
                erajs.ui.Layout.parseOptions(target),options);

            this.id = this.options.id;
            this.panels = {
                center : null,
                north : null,
                south : null,
                east : null,
                west : null
            };
            addPanels(this);
        }
        this._render(target);
    };

    erajs.ui.Layout.prototype = {

        /**
         * 设置布局大小.
         */
        resize : function() {
            resize(this);
        },

        /**
         * 返回指定面板.
         * @param {String} region 可用值:
         *
         * - 'north'
         * - 'south'
         * - 'east'
         * - 'west'
         * - 'center'
         * @returns {erajs.ui.Panel}
         */
        panel : function(region) {
            var panels = this.panels;
            return panels[region];
        },

        /**
         * 折叠指定面板.
         * @param {String} region
         */
        collapse : function(region) {
            collapse(this,region);
        },

        /**
         * 展开指定面板.
         * @param {String} region
         */
        expand : function(region) {
            expand(this,region);
        },

        /**
         * 添加指定面板.
         * @param {Object} options 区域面板属性与{@link erajs.ui.Panel}组件类似.可配置项如下：
         * @param {String} [options.title] 布局面板标题文本.
         * @param {String} [options.region]  定义布局面板位置,可用的值有：'north','south','east','west','center'.
         * @param {String} [options.border] 为true时显示布局面板边框.
         * @param {String} [options.iconCls] 一个包含图标的CSS类ID，该图标将会显示到面板标题上.
         * @param {String} [options.href] 用于读取远程站点数据的URL链接.
         * @param {String} [options.collapsible] 定义是否显示折叠按钮.
         * @param {String} [options.minWidth] 最小面板宽度.
         * @param {String} [options.minHeight] 最小面板高度.
         * @param {String} [options.maxWidth] 最大面板宽度.
         * @param {String} [options.maxHeight] 最大面板高度.
         */
        add : function(options) {
            add(this, options);
            resize(this);
            var region = options.region;
            var panel = this.panel(region);
            if (panel.collapsed) {
                collapse(this,region, 0);
            }
        },

        /**
         * 移除指定面板.
         * @param {String} region
         */
        remove : function(region) {
            remove(this, region);
            resize(this);
        },

        _render : function(target){
            resize(this);
            initStatus(this);
        }
    };

    erajs.ui.Layout.defaults = {

        /**
         * @property {Boolean}
         * 为true，布局组件将自适应父容器。当使用'body'标签创建布局的时候，整个页面会自动最大.
         */
        fit : false
    };

    /**
     * @class erajs.ui.Layout.paneldefaults
     * @extends erajs.ui.Panel.defaults
     *
     * 区域面板属性定义与panel组件类似.
     */
    erajs.ui.Layout.paneldefaults = $.extend({}, erajs.ui.Panel.defaults, {

        /**
         * @property {String}
         * 定义布局面板位置，可用值有：
         *
         * - north
         * - south
         * - east
         * - west
         * - center
         */
        region : null,

        split : false,

        collapsedSize : 28,

        /**
         * @property {Number}
         * 最小面板宽度.
         */
        minWidth : 10,

        /**
         * @property {Number}
         * 最小面板高度.
         */
        minHeight : 10,

        /**
         * @property {Number}
         * 最大面板宽度.
         */
        maxWidth : 10000,

        /**
         * @property {Number}
         * 最大面板高度.
         */
        maxHeight : 10000
    });

    erajs.ui.Layout.parseOptions = function(target){
        var t = $(target);
        return $.extend({}, erajs.ui.parser.parseOptions(t, ["id",{
            fit : "boolean"
        }]));
    };

    erajs.ui.Layout.parsePanelOptions = function(target) {
        var t = $(target);
        return $.extend({}, erajs.ui.Panel.parseOptions(target), erajs.ui.parser.parseOptions(t, ["id","region", {
            split : "boolean",
            collpasedSize : "number",
            minWidth : "number",
            minHeight : "number",
            maxWidth : "number",
            maxHeight : "number"
        }]));
    };
})();
/*
 * Copyright (c) 2014 www.erayt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 **/
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.ui.Combo
 * @extends erajs.ui.Combo.defaults
 *
 * 使用{@link erajs.ui.Combo.defaults}重写默认值对象.
 *
 * 自定义下拉框显示一个可编辑的文本框和下拉面板在html页面.
 * 这是构建其他复杂的组合部件（如：{@link erajs.ui.Combobox combobox docs}等）之前需要构建的最基本的组件.
 */
(function(){

    function setValues(self,values){

        if (!$.isArray(values)) {
            values = [values];
        }

        var opts = self.options,
            target = self.target,
            combo = self.combo,
            oldValues = getValues(self);

        combo.find(".textbox-value").remove();
        var tbName = $(target).attr("textboxName") || "";

        //创建隐藏输入框,用来存储值
        for (var i = 0; i < values.length; i++) {
            var hiddenDom = $("<input type=\"hidden\" class=\"textbox-value\">").appendTo(combo);
            hiddenDom.attr("name", tbName);
            if (opts.disabled) {
                hiddenDom.attr("disabled", "disabled");
            }
            hiddenDom.val(values[i]);
        }

        //判断值是否有改变?
        var isNotEqual = (function () {
            //判断新值与旧值长度是否相等?
            if (oldValues.length != values.length) {
                return true;
            }
            var a1 = $.extend(true, [], oldValues);
            var a2 = $.extend(true, [], values);
            a1.sort();
            a2.sort();
            for (var i = 0; i < a1.length; i++) {
                if (a1[i] != a2[i]) {
                    return true;
                }
            }
            return false;
        })();

        if (isNotEqual) {
            if (opts.multiple) {
                opts.onChange.call(self, values, oldValues);
            } else {
                opts.onChange.call(self, values[0], oldValues[0]);
            }
        }
    }

    function setValue(self,value){
        setValues(self, [value]);
    }

    function getValues(self){
        var values = [];
        var combo = self.combo;
        combo.find(".textbox-value").each(function() {
            values.push($(this).val());
        });
        return values;
    }

    function getValue(self) {
        var values = getValues(self);
        return values[0];
    }

    function setText(self,text){
        var textBox = self.textbox,
            ctext = textBox.getText();

        if (ctext != text) {
            textBox.setText(text);
            self.previousText = text;
        }
    }

    function showPanel(self){
        var options = self.options,
            combo = self.combo,
            panel = self.panel,
            ptarget = panel.target,
            pcc = $(ptarget);

        panel.move({
            left : getLeft(),
            top : getTop()
        });
        if (panel.closed) {
            panel.open();
            panel.resize({
                width: (options.panelWidth ? options.panelWidth : combo._outerWidth()),
                height: options.panelHeight
            });
            options.onShowPanel.call(self);
        }
        (function() {
            if (pcc.is(":visible")) {
                panel.move({
                    left : getLeft(),
                    top : getTop()
                });
                setTimeout(arguments.callee, 200);
            }
        })();
        function getLeft() {
            var left = combo.offset().left;
            if (options.panelAlign == "right") {
                left += combo._outerWidth() - pcc._outerWidth();
            }
            if (left + pcc._outerWidth() > $(window)._outerWidth() + $(document).scrollLeft()) {
                left = $(window)._outerWidth() + $(document).scrollLeft() - pcc._outerWidth();
            }
            if (left < 0) {
                left = 0;
            }
            return left;
        };
        function getTop(){
            var top = combo.offset().top + combo._outerHeight();
            if (top + pcc._outerHeight() > $(window)._outerHeight() + $(document).scrollTop()) {
                top = combo.offset().top - pcc._outerHeight();
            }
            if (top < $(document).scrollTop()) {
                top = combo.offset().top + combo._outerHeight();
            }
            return top;
        };
    }

    function _e(target) {
        $(target).find(".combo-f").each(function () {
            var id = this.id;
            if(id){
                var combo = erajs.getCmp(id);
                if(combo){
                    var panel = combo.panel;
                    if(panel.panel.is(":visible")){
                        panel.close();
                    }
                }
            }
        });
    }

    //值改变时触发事件
    function changeEvent(self) {
        var opts = self.options,
            target = self.target;

        var onChange = opts.onChange;
        opts.onChange = function () {};
        if (opts.multiple) {
            setValues(self, opts.value ? opts.value : []);
        } else {
            setValue(self, opts.value);
        }
        opts.onChange = onChange;
    }

    function mousedownEvent(self) {
        $(document).unbind(".combo").bind("mousedown.combo", function (e) {
            var p = $(e.target).closest("span.combo,div.combo-p");
            if (p.length) {
                _e(p);
                return;
            }
            $("body>div.combo-p>div.combo-panel:visible").each(function(){
                hideSpecialPanel(this);
            });
        });
    }

    function clickEvent(self){
        var opts = self.options,
            target = self.target,
            panel = self.panel;

        if (!opts.editable) {
            handleArrow(self);
        } else {
            var p = $(target).closest("div.combo-panel");
            $("div.combo-panel:visible").not(panel.target).not(p).each(function(){
                hideSpecialPanel(this);
            });
        }
    }

    function hideSpecialPanel(target){
        var combpanelid = $(target).attr('combpanelid');
        if(combpanelid){
            erajs.getCmp(combpanelid).hidePanel();
        }
    }

    //隐藏面板
    function hidePanel(self){
        var panel = self.panel;
        panel.close();
    }

    function initUI(self){
        var opts = self.options,
            target = self.target;

        //创建下拉面板.
        if (!self.panel) {
            var panelTarget = null;
            var pElId = opts.panelEl;
            if(pElId){
                panelTarget = $(pElId).addClass('combo-panel');
            }else{
                panelTarget = $("<div class=\"combo-panel\"></div>").appendTo("body");
            }

            panelTarget.attr('combPanelId',self.id);
            self.panel = new erajs.ui.Panel({
                target : panelTarget[0],
                minWidth: opts.panelMinWidth,
                maxWidth: opts.panelMaxWidth,
                minHeight: opts.panelMinHeight,
                maxHeight: opts.panelMaxHeight,
                doSize: false,
                closed: true,
                cls: "combo-p",
                style: {
                    position: "absolute",
                    zIndex: erajs.zIndex++
                },
                onOpen: function () {
                    var p = self.panel;
                    var pcc = $(p.target);
                    if (erajs.ui.Menu) {
                        pcc.css("z-index", erajs.ui.Menu.defaults.zIndex++);
                    } else {
                        if (erajs.ui.Window) {
                            pcc.css("z-index",erajs.ui.Window.defaults);
                        }
                    }
                    p.resize();
                },
                onBeforeClose: function () {
                    _e(this.panel);
                },
                onClose: function () {
                    self.options.onHidePanel.call(self);
                }
            });

        }

        var icons = $.extend(true, [], opts.icons);
        if (opts.hasDownArrow) {
            icons.push({
                iconCls: "combo-arrow",
                handler: function (e) {
                    handleArrow(self);
                }
            });
        }

        $(target).addClass("combo-f");

        self.textbox = new erajs.ui.Textbox($.extend({}, opts, {
                target : $(target)[0],
                icons: icons,
                onChange: function () {},
                inputEvents: {
                    click: function(e){
                        clickEvent(self);
                    },
                    keydown: function(e){
                        keyHandlers(self,e);
                    },
                    paste: function(e){
                        keyHandlers(self,e);
                    },
                    drop: function(e){
                        keyHandlers(self,e);
                    }
                 }
            })
        );

        $(target).attr("comboName", $(target).attr("textboxName"));
        self.combo = $(target).next();
        self.combo.addClass("combo");
    }

    function keyHandlers(self,e) {
        var opts = self.options;
        switch (e.keyCode) {
            case 38:
                opts.keyHandler.up.call(self, e);
                break;
            case 40:
                opts.keyHandler.down.call(self, e);
                break;
            case 37:
                opts.keyHandler.left.call(self, e);
                break;
            case 39:
                opts.keyHandler.right.call(self, e);
                break;
            case 13:
                e.preventDefault();
                opts.keyHandler.enter.call(self, e);
                return false;
            case 9:
            case 27:
                hidePanel(self);
                break;
            default:
                if (opts.editable) {
                    if (self.timer) {
                        clearTimeout(self.timer);
                    }
                    self.timer = setTimeout(function () {
                        var q = self.textbox.textbox.find('.textbox-text').val();
                        if (self.previousText != q) {
                            self.previousText = q;
                            self.showPanel();
                            opts.keyHandler.query.call(self, q, e);
                        }
                    }, opts.delay);
                }
        }
    }

    //点击下拉箭头事件
    function handleArrow(self){
        var target = self.target,
            opts = self.options,
            panel = self.panel;

        var _c = panel.panel;
        if(_c.is(':visible')){
            hidePanel(self);
        }else{
            //向上找匹配
            var p = $(target).closest("div.combo-panel");
            $("div.combo-panel:visible").not(panel.target).not(p).each(function(){
                hideSpecialPanel(this);
            });

            self.showPanel();
        }
        self.textbox.textbox.find('.textbox-text').focus();
    }

    erajs.ui.Combo = function(options){
        options = options || {};
        var target = options.target;
        if (!target) {
            var contentEl = options.contentEl;
            if (contentEl) {
                target = $(contentEl)[0];
            }
        }
        if(target){
            this.target = target;
            this.options = $.extend({}, erajs.ui.Combo.defaults,
                erajs.ui.Combo.parseOptions(target),options);

            this.id = this.options.id;
            this.previousText = '';
            this.options.originalValue = this.options.value;
        }
        this._render(target);
    };

    erajs.ui.Combo.prototype = {

        updateCombo : function(options){
            var me = this;
            var opts = $.extend({},me.options, options);
            me.options = opts;
            me._render();
        },

        /**
         * 返回文本框ui对象.
         * @returns {erajs.ui.Textbox}
         */
        getTextbox : function() {
            return this.textbox;
        },

        /**
         * 销毁组件.
         */
        destroy : function() {
            var self = this;

            self.panel.destroy();
            self.textbox.destroy();
        },

        /**
         * 调整组件宽度.
         * @param {Number} width 新的宽度.
         */
        resize : function(width) {
            var textBox = this.getTextbox();
            textBox.resize(width);
        },

        /**
         * 显示下拉面板.
         */
        showPanel : function() {
            showPanel(this);
        },

        /**
         * 隐藏下拉面板.
         */
        hidePanel : function() {
            hidePanel(this);
        },

        /**
         * 禁用组件.
         */
        disable : function() {
            var textBox = this.getTextbox();
            textBox.disable();
        },

        /**
         * 启用组件.
         */
        enable : function() {
            var textBox = this.getTextbox();
            textBox.enable();
        },

        /**
         * 启用/禁用只读模式。
         * @param {Boolean} mode  模式,默认true.
         * 可选：
         *
         * - true
         * - false
         */
        readonly : function(mode) {
            var textBox = this.getTextbox();
            textBox.readonly(mode);
        },

        /**
         * 清除控件的值.
         */
        clear : function() {
            var self = this,
                options = self.options,
                combo = self.combo;
                textBox = self.getTextbox();

            textBox.clear();

            if (options.multiple) {
                combo.find("textbox-value").remove();
            } else {
                combo.find("textbox-value").val("");
            }

        },

        /**
         * 重置控件的值.
         */
        reset : function() {
            var self = this,
                options = self.options;

            if (options.multiple) {
                self.setValues(options.originalValue);
            } else {
                self.setValue(options.originalValue);
            }
        },

        /**
         * 获取输入的文本.
         * @returns {String}
         */
        getText : function() {
            return this.getTextbox().getText();
        },

        /**
         * 设置输入的文本.
         * @param {String} text 文本值
         */
        setText : function(text) {
            setText(this,text);
        },

        /**
         * 获取组件值的数组.
         * @returns {Array}
         */
        getValues : function() {
           return getValues(this);
        },

        /**
         * 设置组件值的数组.
         * @param {Array} values
         */
        setValues : function(values) {
            setValues(this,values);
        },

        /**
         * 获取组件的值.
         * @returns {String}
         */
        getValue : function() {
            return getValue(this);
        },

        /**
         * 设置组件的值.
         * @param {String} value
         */
        setValue : function(value) {
            setValue(this,value);
        },

        _render : function(target){
            initUI(this);
            mousedownEvent(this);
            changeEvent(this);
        }
    };

    /**
     * @class erajs.ui.Combo.defaults
     * @extend erajs.ui.Textbox.defaults
     */
    erajs.ui.Combo.defaults = $.extend({},erajs.ui.Textbox.defaults, {

        /**
         * @property {Object} 关联Dom对象jq选择器表达式.
         */
        contentEl : null,

        /**
         * @property {Object}
         * 下拉面板关联的元素.
         */
        panelEl : null,

        /**
         * @property {Object}
         * 下拉面板宽度.
         */
        panelWidth : null,

        /**
         * @property {Number}
         * 下拉面板高度.
         */
        panelHeight : 200,

        /**
         * @property {String}
         * 面板对齐方式。可用值有：
         *
         * - 'left'
         * - 'right'
         */
        panelAlign : "left",

        /**
         * @private
         * @property {Boolean}
         * 定义是否支持多选.
         */
        multiple : false,

        /**
         * @property {Boolean} 导航同时选中行.
         */
        selectOnNavigation : true,

        /**
         * @property {String}
         * 在多选的时候使用何种分隔符进行分割.
         */
        separator : ",",

        /**
         * @property {Boolean}
         * 定义是否显示向下箭头按钮.
         */
        hasDownArrow : true,

        /**
         * @property {Number}
         * 最后一次输入事件与执行搜索之间的延迟间隔.
         */
        delay : 200,

        // 在用户按下键的时候调用一个函数.
        keyHandler : {
            up : function(e) {},
            down : function(e) {},
            left : function(e) {},
            right : function(e) {},
            enter : function(e) {},
            query : function(q, e) {}
        },

        /**
         * @event
         * 当下拉面板显示的时候触发.
         */
        onShowPanel : function() {
        },

        /**
         * @event
         * 当下拉面板隐藏的时候触发.
         */
        onHidePanel : function() {
        },

        /**
         * @event
         * 当字段值改变的时候触发.
         * @param {String} newValue 新的值.
         * @param {String} oldValue 旧的值.
         */
        onChange : function(newValue, oldValue) {
        }
    });

    erajs.ui.Combo.parseOptions = function(target){
        var t = $(target);
        return $.extend({}, erajs.ui.Textbox.parseOptions(target), erajs.ui.parser.parseOptions(t,
            ["id","separator", "panelAlign", {
                panelWidth : "number",
                hasDownArrow : "boolean",
                delay : "number",
                selectOnNavigation : "boolean"
            },{
                panelMinWidth: "number",
                panelMaxWidth: "number",
                panelMinHeight: "number",
                panelMaxHeight: "number"
            }
            ]), {
            panelHeight : (t.attr("panelHeight") == "auto" ? "auto" : parseInt(t.attr("panelHeight")) || undefined),
            multiple : (t.attr("multiple") ? true : undefined)
        });
    };
})();
/*
 * Copyright (c) 2014 www.erayt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 **/
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.ui.Combobox
 * @extends erajs.ui.Combobox.defaults
 *
 * 扩展自{@link erajs.ui.Combo.defaults},使用{@link erajs.ui.Combobox.defaults}重写默认值对象.
 *
 * 下拉列表框显示一个可编辑文本框和下拉式列表，用户可以选择一个值或多个值.
 * 用户可以直接输入文本到列表顶部或选择一个或多个当前列表中的值.
 *
 * {@img erajs.ui.Combobox/combobox.png}
 *
 * ##创建下拉框
 *
 * 1、通过'select'元素创建一个预定义结构的下拉列表框.
 *
 *      @example
 *      <select id="cc" xtype="combobox" name="dept" style="width:200px;">
 *          <option value="aa">aitem1</option>
 *          <option>bitem2</option>
 *          <option>bitem3</option>
 *          <option>ditem4</option>
 *          <option>eitem5</option>
 *      </select>
 *
 * 2、通过'input'标签创建下拉列表框.
 *
 *      <input id="remote" xtype="combobox" name="language"
 *          data-options="
 *              url:'combobox_data1.json',
 *              method:'get',
 *              valueField:'id',
 *              textField:'text',
 *              panelHeight:'auto'
 *      ">
 *
 *  3、使用Javascript创建下拉列表框.
 *
 *      <input id="cc" name="dept" value="aa">
 *      erajs.create('combobox',{
 *	        contentEl : '#cc',
 *          url:'combobox_data.json',
 *          valueField:'id',
 *          textField:'text'
 *      });
 *
 * 4、创建2个依赖关系的下拉列表框.
 *
 *      <input id="cc1" xtype="combobox" data-options="
 *          valueField: 'id',
 *          textField: 'text',
 *          url: 'get_data1.jsp',
 *          onSelect: function(rec){
 *              var url = 'get_data2.jsp?id='+rec.id;
 *              erajs.getCmp('cc2').reload(url);
 *          }
 *       ">
 *
 *      <input id="cc2" xtype="combobox" data-options="
 *          valueField:'id',
 *          textField:'text'
 *      ">
 *
 *  JSON数据格式化例子：
 *
 *      [{
 *          "id":1,
 *          "text":"text1"
 *      },{
 *          "id":2,
 *          "text":"text2"
 *      },{
 *          "id":3,
 *          "text":"text3",
 *          "selected":true
 *      },{
 *          "id":4,
 *          "text":"text4"
 *      },{
 *          "id":5,
 *          "text":"text5"
 *      }]
 */
(function(){
    "use strict";

    var COMBOBOX_SERNO = 0;

    function getRowIndex(self, value){
        var opts = self.options;
        var data = self.data;
        for(var i=0; i<data.length; i++){
            if (data[i][opts.valueField] == value){
                return i;
            }
        }
        return -1;
    }

    function scrollTo(self, value){
        var opts = self.options;
        var combo = self.combo;
        var ptarget = combo.panel.target;
        var panel = $(ptarget);
        var item = opts.finder.getEl(self, value);
        if (item.length){
            var top = item.position().top;
            var oheight = item.outerHeight();
            var pheight = panel.height();
            if (top <= 0){
                var h = panel.scrollTop() + top;
                panel.scrollTop(h);
            } else if (top + oheight > pheight){
                var h = panel.scrollTop() + top + oheight - pheight;
                panel.scrollTop(h);
            }
        }
    }

    // load data, the old list items will be removed.
    function loadData(self, data, remainText){
        var opts = self.options;
        self.data = opts.loadFilter.call(self, data);
        self.groups = [];
        data = self.data;

        var selected = self.getValues();
        var dd = [];
        var group = undefined;
        for(var i=0; i<data.length; i++){
            var row = data[i];
            var v = row[opts.valueField]+'';
            var s = row[opts.textField];
            var g = row[opts.groupField];

            if (g){
                if (group != g){
                    group = g;
                    self.groups.push(g);
                    dd.push('<div id="' + (self.groupIdPrefix+'_'+(self.groups.length-1)) + '" class="combobox-group">');
                    dd.push(opts.groupFormatter ? opts.groupFormatter.call(self, g) : g);
                    dd.push('</div>');
                }
            } else {
                group = undefined;
            }

            var cls = 'combobox-item' + (row.disabled ? ' combobox-item-disabled' : '') + (g ? ' combobox-gitem' : '');
            dd.push('<div id="' + (self.itemIdPrefix+'_'+i) + '" class="' + cls + '">');
            dd.push(opts.formatter ? opts.formatter.call(self, row) : s);
            dd.push('</div>');

            if (row['selected'] && $.inArray(v, selected) == -1){
                selected.push(v);
            }
        }

        var pBody = self.combo.panel.getBody();
        $(pBody).html(dd.join(''));

        if (opts.multiple){
            setValues(self, selected, remainText);
        } else {
            setValues(self, selected.length ? [selected[selected.length-1]] : [], remainText);
        }

        opts.onLoadSuccess.call(self, data);
    }

    // request remote data if the url property is setted.
    function request(self, url, param, remainText){
        var opts = self.options;
        if (url){
            opts.url = url;
        }
        param = param || {};
        if (opts.onBeforeLoad.call(self, param) == false) return;

        opts.loader.call(self, param, function(data){
            loadData(self, data, remainText);
        }, function(){
            opts.onLoadError.apply(this, arguments);
        });
    }

    // create the component
    function create(self){
        var opts = self.options;
        var target = self.target;

        COMBOBOX_SERNO++;
        self.itemIdPrefix = '_erajs_combobox_i' + COMBOBOX_SERNO;
        self.groupIdPrefix = '_erajs_combobox_g' + COMBOBOX_SERNO;

        var cc = $(target);
        cc.addClass('combobox-f');

        var options = $.extend({}, opts, {
            onShowPanel: function(){
                var comboP = this.panel.panel;
                //将所有下拉面板数据显示
                comboP.find('div.combobox-item,div.combobox-group').show();
                //当打开下拉面板时，默认定位到选中的值
                var value = self.getValue();
                if(value)
                    scrollTo(self,value);

                opts.onShowPanel.call(self);
            },
            keyHandler: {
                up: function(e){nav(self,'prev');e.preventDefault()},
                down: function(e){nav(self,'next');e.preventDefault()},
                left: function(e){},
                right: function(e){},
                enter: function(e){doEnter(self)},
                query: function(q,e){doQuery(self, q)}
            }
        });

        var combo = new erajs.ui.Combo(options);
        self.combo = combo;
        var panel = combo.panel.panel;

        $(panel).unbind().bind('mouseover', function(e){
            $(this).children('div.combobox-item-hover').removeClass('combobox-item-hover');
            var item = $(e.target).closest('div.combobox-item');
            if (!item.hasClass('combobox-item-disabled')){
                item.addClass('combobox-item-hover');
            }
            e.stopPropagation();
        }).bind('mouseout', function(e){
            $(e.target).closest('div.combobox-item').removeClass('combobox-item-hover');
            e.stopPropagation();
        }).bind('click', function(e){
            var item = $(e.target).closest('div.combobox-item');
            if (!item.length || item.hasClass('combobox-item-disabled')){return}
            var row = opts.finder.getRow(self, item);
            if (!row){return}
            var value = row[opts.valueField];
            if (opts.multiple){
                if (item.hasClass('combobox-item-selected')){
                    unselect(self, value);
                } else {
                    select(self, value);
                }
            } else {
                select(self, value);
                combo.hidePanel();
            }
            e.stopPropagation();
        });
    }

    //select the specified value
    function select(self, value){
        var opts = self.options;
        var combo = self.combo;
        var values = combo.getValues();
        if ($.inArray(value+'', values) == -1){
            if (opts.multiple){
                values.push(value);
            } else {
                values = [value];
            }
            setValues(self, values);
            opts.onSelect.call(self, opts.finder.getRow(self, value));
        }
    }

    //unselect the specified value
    function unselect(self, value){
        var opts = self.options;
        var combo = self.combo;
        var values = combo.getValues();
        var index = $.inArray(value+'', values);
        if (index >= 0){
            values.splice(index, 1);
            setValues(self, values);
            opts.onUnselect.call(self, opts.finder.getRow(self, value));
        }
    }

    //set values
    function setValues(self, values, remainText){
        var opts = self.options;
        var combo = self.combo;

        var panel = combo.panel;
        var pBody = panel.getPanel();
        pBody.find('div.combobox-item-selected').removeClass('combobox-item-selected');
        var vv = [], ss = [];
        for(var i=0; i<values.length; i++){
            var v = values[i];
            var s = v;
            opts.finder.getEl(self, v).addClass('combobox-item-selected');
            var row = opts.finder.getRow(self, v);
            if (row){
                s = row[opts.textField];
            }
            vv.push(v);
            ss.push(s);
        }

        combo.setValues(vv);
        if (!remainText){
           combo.setText(ss.join(opts.separator));
        }
    }

    function doQuery(self,q){
        var opts = self.options,
            combo = self.combo;

        if (opts.multiple && !q){
            setValues(self, [], true);
        } else {
            setValues(self, [q], true);
        }

        if (opts.mode == 'remote'){
            request(self, null, {q:q}, true);
        } else {
            var panel = combo.panel,
                ptarget = panel.panel;

            ptarget.find('div.combobox-item-selected,div.combobox-item-hover').removeClass('combobox-item-selected combobox-item-hover');
            ptarget.find('div.combobox-item,div.combobox-group').hide();
            var data = self.data;
            var vv = [];
            var qq = opts.multiple ? q.split(opts.separator) : [q];
            $.map(qq, function(q){
                q = $.trim(q);
                var group = undefined;
                for(var i=0; i<data.length; i++){
                    var row = data[i];
                    if (opts.filter.call(self, q, row)){
                        var v = row[opts.valueField];
                        var s = row[opts.textField];
                        var g = row[opts.groupField];
                        var item = opts.finder.getEl(self, v).show();
                        if (s.toLowerCase() == q.toLowerCase()){
                            vv.push(v);
                            item.addClass('combobox-item-selected');
                        }
                        if (opts.groupField && group != g){
                            $('#'+self.groupIdPrefix+'_'+$.inArray(g, self.groups)).show();
                            group = g;
                        }
                    }
                }
            });
            setValues(self, vv, true);
        }
    }

    function nav(self,dir){
        var opts = self.options,
            combo = self.combo,
            panel = combo.panel,
            ptarget = $(panel.target);

        var item = ptarget.children('div.combobox-item-hover');
        if (!item.length){
            item = ptarget.children('div.combobox-item-selected');
        }
        item.removeClass('combobox-item-hover');
        var firstSelector = 'div.combobox-item:visible:not(.combobox-item-disabled):first';
        var lastSelector = 'div.combobox-item:visible:not(.combobox-item-disabled):last';
        if (!item.length){
            item = ptarget.children(dir=='next' ? firstSelector : lastSelector);
        } else {
            if (dir == 'next'){
                item = item.nextAll(firstSelector);
                if (!item.length){
                    item = ptarget.children(firstSelector);
                }
            } else {
                item = item.prevAll(firstSelector);
                if (!item.length){
                    item = ptarget.children(lastSelector);
                }
            }
        }
        if (item.length){
            item.addClass('combobox-item-hover');
            var row = opts.finder.getRow(self, item);
            if (row){
                scrollTo(self, row[opts.valueField]);
                if (opts.selectOnNavigation){
                    select(self, row[opts.valueField]);
                }
            }
        }
    }

    function doEnter(self){
        var opts = self.options,
            combo = self.combo,
            panel = combo.panel,
            ptarget = $(panel.target);

        var item = ptarget.children('div.combobox-item-hover');

        if (item.length){
            var row = opts.finder.getRow(self, item);
            var value = row[opts.valueField];
            if (opts.multiple){
                if (item.hasClass('combobox-item-selected')){
                    self.unselect(value);
                } else {
                    self.select(value);
                }
            } else {
                self.select(value);
            }
        }
        var vv = [];
        $.map(self.getValues(), function(v){
            if (getRowIndex(self, v) >= 0){
                vv.push(v);
            }
        });
        setValues(self, vv, false);

        if (!opts.multiple){
            self.hidePanel();
        }
    }

    erajs.ui.Combobox = function(options,customOptions){
        options = options || {};
        customOptions = customOptions || {};
        var target = options.target;
        if (!target) {
            var contentEl = options.contentEl;
            if (contentEl) {
                target = $(contentEl)[0];
            }
        }
        if(target){
            this.target = target;
            this.options = $.extend({}, erajs.ui.Combobox.defaults,customOptions,
                erajs.ui.Combobox.parseOptions(target),options);

            this.data = [];
            this.id = this.options.id;

            create(this);
            var data = erajs.ui.Combobox.parseData(this);
            if (data.length){
                loadData(this, data);
            }
        }

        if (this.options.data){
            loadData(this, this.options.data);
        }
        request(this);
    };

    erajs.ui.Combobox.prototype = {

        /**
         * 获取加载的数据.
         * @returns {Array}
         */
        getData : function(){
            return this.data;
        },

        /**
         * 设置下拉列表框值数组.
         * @param {Array} values 设置的值(s).
         */
        setValues : function(values){
            setValues(this,values);
        },

        /**
         * 设置下拉列表框的值.
         * @param {String} value
         */
        setValue : function(value){
            setValues(this,[value]);
        },

        /**
         * 清除下拉列表框的值.
         */
        clear : function(){
            var combo = this.combo;
            combo.clear();

            var panel = combo.panel;
            $(panel.getPanel()).find('div.combobox-item-selected').removeClass('combobox-item-selected');
        },

        /**
         * 重置下拉列表框的值.
         */
        reset : function(){
            var opts = this.options;
            var originalValue = this.combo.options.originalValue;
            if (opts.multiple){
                this.setValues(originalValue);
            } else {
                this.setValue(originalValue);
            }
        },

        /**
         * 读取本地列表数据.
         * @param {Array} data
         */
        loadData : function(data){
            loadData(this,data);
        },

        /**
         * 请求远程列表数据。通过{@link #url}参数重写原始URL值.
         * @param {String} url
         */
        reload : function(url){
            request(this, url);
        },

        /**
         * 选择指定项.
         * @param {String} value 指定项的值.
         */
        select : function(value){
            select(this,value);
        },

        /**
         * 取消选择指定项.
         * @param {String} value 指定项的值.
         */
        unselect : function(value){
            unselect(this,value);
        },

        /**
         * 获取多个值.当{@link #multiple}为true时，可调用.
         * @returns {Array}
         */
        getValues : function(){
            var combo = this.combo;
            var values =  combo.getValues();
            return values;
        },

        /**
         * 获取第一个值.
         * @returns {String}
         */
        getValue : function(){
           var values = this.getValues();
           return values[0];
        },

        /**
         * 获取文本框的文本值.
         * @returns {String}
         */
        getText : function(){
            return this.combo.getText();
        },

        hidePanel : function(){
            this.combo.hidePanel();
        },

        /**
         * 禁用组件.
         */
        disable : function(){
           this.combo.disable();
        },

        /**
         * 启用组件.
         */
        enable : function(){
            this.combo.enable();
        },

        /**
         * 销毁组件.
         */
        destroy : function(){
            this.combo.destroy();
            erajs.destroy(this);
        },

        /**
         * 改变宽度.
         * @param {Number} width
         */
        resize : function(width){
            this.combo.resize(width);
        }
    };


    /**
     * TODO - keyHandler事件定义
     * @class erajs.ui.Combobox.defaults
     * @extends erajs.ui.Combo.defaults
     */
    erajs.ui.Combobox.defaults = $.extend({}, erajs.ui.Combo.defaults, {

        /**
         * @property id
         * 组件唯一标识.
         */
        id : null,

        /**
         * @property {String} valueField
         * 基础数据值名称绑定到该下拉列表框.
         */
        valueField: 'value',

        /**
         * @property {String}
         * 基础数据字段名称绑定到该下拉列表框.
         */
        textField: 'text',

        /**
         * @property {Object/String}
         * 指定分组的字段名称.
         *
         */
        groupField: null,

        /**
         * @property {Function}
         * 返回格式化后的分组标题文本，以显示分组项.
         * 示例代码：
         *
         *      erajs.create('combobox',{
         *          contentEl : '#cc',
         *          groupFormatter: function(group){
         *              return '<span style="color:red">' + group + '</span>';
         *          }
         *      });
         *
         * @param {String} group
         * @returns {String}
         */
        groupFormatter: function(group){return group;},

        /**
         * @property {String}
         * 定义了当文本改变时如何读取列表数据;
         * 设置为'remote'时，下拉列表框将会从服务器加载数据;
         * 当设置为"remote"模式时，用户输入将被发送到名为'q'的HTTP请求参数到服务器检索新数据.
         * 可选值：
         *
         * - 'local'
         * - 'remote'
         */
        mode: 'local',

        /**
         * @property {String}
         * HTTP方法检索数据.
         * 可选值：
         *
         * - 'post'
         * - 'get'
         */
        method: 'post',

        /**
         * @property {String}
         * 通过URL加载远程列表数据.
         */
        url: null,

        /**
         * @property {Array}
         * 数据列表加载.
         */
        data: null,

        /**
         *
         * @property {Function}
         * 定义当'mode'设置为'local'时如何过滤本地数据.
         * 示例代码:
         *
         *      erajs.create('combobox',{
         *          conentEl : '#cc',
         *          filter: function(q, row){
         *              var opts = this.options;
         *              return row[opts.textField].indexOf(q) == 0;
         *          }
         *      });
         *
         * @param {String} q 用户输入的文本.
         * @param {Object} row 列表行数据.
         *
         * @returns {Boolean} 为true,则返回该数据.
         */
        filter: function(q, row){
            var opts = this.options;
            return row[opts.textField].toLowerCase().indexOf(q.toLowerCase()) == 0;
        },

        /**
         * @property {Function}
         * 定义如何渲染行.
         * 示例代码:
         *
         *      erajs.create('combobox'{
         *          formatter: function(row){
         *              var opts = this.options;
         *              return row[opts.textField];
         *          }
         *     });
         *
         * @param {Object} row 行记录数据.
         *
         * @returns {String} 渲染后的格式.
         */
        formatter: function(row){
            var opts = this.options;
            return row[opts.textField];
        },

        /**
         * @property {Function}
         * 定义了如何从远程服务器加载数据。
         *
         * @param {Object} param 传递到远程服务器的参数对象.
         * @param {Function} success 在检索数据成功的时候调用该回调函数.
         * @param {Object} [success.data] success函数的参数.
         * @param {Function} error 在检索数据失败的时候调用该回调函数.
         *
         * @returns {Boolean} 返回false可以忽略该动作.
         */
        loader: function(param, success, error){
            var self = this;
            var opts = self.options;
            if (!opts.url) return false;
            $.ajax({
                type: opts.method,
                url: opts.url,
                data: param,
                dataType: 'json',
                success: function(data){
                    success(data);
                },
                error: function(){
                    error.apply(this, arguments);
                }
            });
        },

        /**
         * @property {Function}
         * 返回过滤后的数据并显示.
         * @param {Object} data 原始数据.
         * @returns {Object} 过滤后的数据.
         */
        loadFilter: function(data){
            return data;
        },

        finder:{
            getEl:function(self, value){
                var index = getRowIndex(self, value);
                var id = self.itemIdPrefix + '_' + index;
                return $('#'+id);
            },
            getRow:function(self, p){
                var index = (p instanceof jQuery) ? p.attr('id').substr(self.itemIdPrefix.length+1) : getRowIndex(self, p);
                return self.data[parseInt(index)];
            }
        },

        /**
         * @event
         * 在请求加载数据之前触发，返回false取消该加载动作。
         * @param {Object} param
         */
        onBeforeLoad: function(param){},

        /**
         * @event
         * 在加载远程数据成功的时候触发.
         */
        onLoadSuccess: function(){},

        /**
         * @event
         * 在加载远程数据失败的时候触发.
         */
        onLoadError: function(){},

        /**
         * @event
         * 在用户选择列表项的时候触发.
         * @param {Object} record 选中项数据对象
         */
        onSelect: function(record){},

        /**
         * @event
         * 在用户取消选择列表项的时候触发.
         */
        onUnselect: function(record){}
    });

    erajs.ui.Combobox.parseOptions = function(target){
        var t = $(target);
        return $.extend({}, erajs.ui.Combo.parseOptions(target),erajs.ui.parser.parseOptions(t,[
            'id','valueField','textField','groupField','mode','method','url'
        ]));
    };

    erajs.ui.Combobox.parseData = function(container){
        var me = container;
        var data = [];
        var opts = me.options;
        var target = me.target;

        $(target).children().each(function(){
            if (this.tagName.toLowerCase() == 'optgroup'){
                var group = $(this).attr('label');
                $(this).children().each(function(){
                    _parseItem(this, group);
                });
            } else {
                _parseItem(this);
            }
        });
        return data;

        function _parseItem(el, group){
            var t = $(el);
            var row = {};
            row[opts.valueField] = t.attr('value')!=undefined ? t.attr('value') : t.text();
            row[opts.textField] = t.text();
            row['selected'] = t.is(':selected');
            row['disabled'] = t.is(':disabled');
            if (group){
                opts.groupField = opts.groupField || 'group';
                row[opts.groupField] = group;
            }
            data.push(row);
        }
    };

})();
/*
 * Copyright (c) 2014 www.erayt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 **/
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.Messager
 * @singleton
 */
(function(){

    var Messager = erajs.Messager = erajs.Msg = {};

    function createWin(title, content, buttons) {
        var win = $("<div class=\"messager-body\"></div>").appendTo("body");
        win.append(content);
        if (buttons) {
            var tb = $("<div class=\"messager-button\"></div>").appendTo(win);
            for (var prop in buttons) {
                var adiv = $("<a xtype='button'></a>")
                    .text(prop).css("margin-left", 10)
                   .bind("click", eval(buttons[prop]))
                   .appendTo(tb);

                new erajs.ui.Button({
                    target : adiv[0]
                });

            }
        }
        var window = new erajs.ui.Window({
            target : win[0],
            title : title,
            noheader : ( title ? false : true),
            width : 300,
            height : "auto",
            modal : true,
            collapsible : false,
            minimizable : false,
            maximizable : false,
            resizable : false,
            onClose : function() {
                setTimeout(function() {
                    window.panel.destroy();
                }, 100);
            }
        });

        var target = window.target;
        var cc = $(target);

        cc.addClass("messager-window");
        cc.children("div.messager-button").children("a:first").focus();

        return window;
    };

    function showWin(self, showType, showSpeed, timeout) {
        var cc = self.panel;
        if (!cc) {
            return;
        }
        switch(showType) {
            case null:
                cc.show();
                break;
            case "slide":
                cc.slideDown(showSpeed);
                break;
            case "fade":
                cc.fadeIn(showSpeed);
                break;
            case "show":
                cc.show(showSpeed);
                break;
        }
        var timeTask = null;
        if (timeout > 0) {
            timeTask = setTimeout(function() {
                hideWin(self, showType, showSpeed);
            }, timeout);
        }
        cc.hover(function() {
            if (timeTask) {
                clearTimeout(timeTask);
            }
        }, function() {
            if (timeout > 0) {
                timeTask = setTimeout(function() {
                    hideWin(self, showType, showSpeed);
                }, timeout);
            }
        });
    }

    function hideWin(self, showType, showSpeed) {
        var el = self.panel[0];
        if (el.locked == true) {
            return;
        }
        el.locked = true;

        var cc = self.panel;
        if (!cc) {
            return;
        }
        switch(showType) {
            case null:
                cc.hide();
                break;
            case "slide":
                cc.slideUp(showSpeed);
                break;
            case "fade":
                cc.fadeOut(showSpeed);
                break;
            case "show":
                cc.hide(showSpeed);
                break;
        }
        setTimeout(function() {
            self.destroy();
        }, showSpeed);
    }

    erajs.apply(Messager,{

        /**
         * 在屏幕右下角显示一条消息窗口.
         *
         * 使用方法:
         *
         *      erajs.Messager.show({
         *          title:'My Title',
         *          msg:'Message will be closed after 5 seconds.',
         *          timeout:5000,
         *          showType:'slide'
         *      });
         *
         * 顶部中心显示消息窗口：
         *
         *      erajs.Messager.show({
         *          title:'My Title',
         *          msg:'Message will be closed after 4 seconds.',
         *          showType:'show',
         *          style:{
         *              right:'',
         *              top:document.body.scrollTop+document.documentElement.scrollTop,
         *              bottom:''
         *          }
         *      });
         *
         * @param {Object} options
         * @param {String} [options.showType] 定义将如何显示该消息,默认：slide.
         *
         * - 'null'
         * - 'slide'
         * - 'fade'
         * - 'show'
         *
         * @param {Number} [options.showSpeed] 定义窗口显示的过度时间,默认：600毫秒.
         * @param {String} [options.width] 定义消息窗口的宽度。默认：250px.
         * @param {String} [options.height] 定义消息窗口的高度。默认：100px.
         * @param {String} [options.title] 在头部面板显示的标题文本.
         * @param {String} [options.msg] 显示的消息文本.
         * @param {Object} [options.style] 定义消息窗体的自定义样式.
         * @param {Number} [options.timeout] 如果定义为0，消息窗体将不会自动关闭，除非用户关闭它，如果定义成非0的树，消息窗体将在超时后自动关闭。默认：4秒.
         *
         * @returns {erajs.ui.Window}
         */
        show : function(options){

            var opts = $.extend({}, erajs.ui.Window.defaults, {
                collapsible : false,
                minimizable : false,
                maximizable : false,
                shadow : false,
                draggable : false,
                resizable : false,
                closed : true,
                style : {
                    left : "",
                    top : "",
                    right : 0,
                    zIndex : erajs.zIndex++,
                    bottom : -document.body.scrollTop - document.documentElement.scrollTop
                },
                onBeforeOpen : function() {
                    showWin(this, opts.showType, opts.showSpeed, opts.timeout);
                    return false;
                },
                onBeforeClose : function() {
                    hideWin(this, opts.showType, opts.showSpeed);
                    return false;
                }
            }, {
                title : "",
                width : 250,
                height : 100,
                showType : "slide",
                showSpeed : 600,
                msg : "",
                timeout : 4000
            }, options);

            opts.style.zIndex = erajs.zIndex++;

            var target = $("<div class=\"messager-body\"></div>")
                .html(opts.msg).appendTo("body");

            opts.target = target[0];

            var window = new erajs.ui.Window(opts);
            window.window.css(window.options.style);
            window.open();

            return window;
        },

        /**
         * 显示警告窗口.
         *
         * 使用方法:
         *
         *      erajs.Messager.alert(
         *          'My Title',
         *          'Here is a info message!',
         *          'info'
         *     );
         *
         * @param {String} title 在头部面板显示的标题文本.
         * @param {String} msg  显示的消息文本.
         * @param {String} icon 显示的图标图像,有效值有:
         *
         * - 'error'
         * - 'question'
         * - 'info'
         * - 'warning'
         *
         * @param {Function} fn  当用户点击"确定"按钮的时侯将传递一个true值给回调函数，否则传递一个false值.
         *
         * @returns {erajs.ui.Window}
         */
        alert : function(title, msg, icon, fn){
            var html = "<div>" + msg + "</div>";
            switch(icon) {
                case "error":
                    html = "<div class=\"messager-icon messager-error\"></div>" + html;
                    break;
                case "info":
                    html = "<div class=\"messager-icon messager-info\"></div>" + html;
                    break;
                case "question":
                    html = "<div class=\"messager-icon messager-question\"></div>" + html;
                    break;
                case "warning":
                    html = "<div class=\"messager-icon messager-warning\"></div>" + html;
                    break;
            }
            html += "<div style=\"clear:both;\"/>";
            var buttons = {};
            buttons[erajs.Messager.defaults.ok] = function() {
                win.close();
                if (fn) {
                    fn();
                    return false;
                }
            };
            var win = createWin(title, html, buttons);
            return win;
        },

        /**
         * 显示一个包含"确定"和"取消"按钮的确认消息窗口.
         *
         * 使用方法:
         *
         *      erajs.Messager.confirm('Confirm', 'Are you sure to exit this system?', function(r){
         *          if (r){
         *              // exit action;
         *          }
         *      });
         *
         * @param {String} title 在头部面板显示的标题文本.
         * @param  {String}msg 显示的消息文本.
         * @param {Function} fn  当用户点击"确定"按钮的时侯将传递一个true值给回调函数，否则传递一个false值.
         *
         * @returns {erajs.ui.Window}
         */
        confirm : function(title, msg, fn){
            var content = "<div class=\"messager-icon messager-question\"></div>" + "<div>" + msg + "</div>" + "<div style=\"clear:both;\"/>";
            var buttons = {};
            buttons[erajs.Messager.defaults.ok] = function() {
                win.close();
                if (fn) {
                    fn(true);
                    return false;
                }
            };
            buttons[erajs.Messager.defaults.cancel] = function() {
                win.close();
                if (fn) {
                    fn(false);
                    return false;
                }
            };
            var win = createWin(title, content, buttons);
            return win;
        },

        /**
         * 显示一个用户可以输入文本的并且带“确定”和“取消”按钮的消息窗体.
         *
         * 使用方法:
         *
         *      erajs.Messager.prompt('Prompt', 'Please enter your name:', function(r){
         *          if (r){
         *              alert('Your name is:' + r);
         *          }
         *      });
         *
         * @param {String} title 在头部面板显示的标题文本.
         * @param {String} msg  显示的消息文本.
         * @param {Function} fn  在用户输入一个值参数的时候执行的回调函数.
         *
         * @returns {erajs.ui.Window}
         */
        prompt : function(title, msg, fn){

            var content = "<div class=\"messager-icon messager-question\"></div>" + "<div>" + msg + "</div>" + "<br/>" + "<div style=\"clear:both;\"/>" + "<div><input class=\"messager-input\" type=\"text\"/></div>";
            var buttons = {};
            buttons[erajs.Messager.defaults.ok] = function() {
                win.close();
                if (fn) {
                    var val = $(".messager-input",win.window).val();
                    fn(val);
                    return false;
                }
            };
            buttons[erajs.Messager.defaults.cancel] = function() {
                win.close();
                if (fn) {
                    fn();
                    return false;
                }
            };
            var win = createWin(title, content, buttons);
            //默认将焦点放在input上
            var input = $(win.target).find("div>input.messager-input");
            input.focus();
            return win;
        }
    });

    erajs.Messager.defaults = {

        /**
         * @property {String}
         * 确定按钮文本.
         */
        ok : "Ok",

        /**
         * @property {String}
         * 取消按钮文本.
         */
        cancel : "Cancel"
    };

})();
/*
 * Copyright (c) 2014 www.erayt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 **/
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.ui.Slider
 * @extends erajs.ui.Slider.defaults
 *
 * 使用{@link erajs.ui.Slider.defaults}重写默认值对象.
 *
 * 滑动条允许用户从一个有限的范围内选择一个数值.
 * 当滑块控件沿着轨道移动的时候,将会显示一个提示来表示当前值.用户可以通过设置其属性自定义滑块.
 *
 * {@img erajs.ui.Slider/slider.png}
 *
 * ##创建滑动条
 *
 * 1、使用'input'标签创建一个滑动条.
 *
 *      @example
 *      <input id="s" xtype="slider" value="12"  style="width:300px"
 *          data-options="showTip:true,rule:[0,'|',25,'|',50,'|',75,'|',100]" />
 *
 * 2、通过Javascript创建滑动条.
 *
 *    HTML代码：
 *
 *       <div id="ss" style="height:200px"></div>
 *
 *    JS代码：
 *       erajs.create('slider',{
 *	        contentEl : '#ss',
 *          mode: 'v',
 *          tipFormatter: function(value){
 *              return value + '%';
 *          }
 *      });
 */
(function(){

    function init(self){
        var target = self.target;
        var slider = $('<div class="slider">' +
            '<div class="slider-inner">' +
            '<a href="javascript:void(0)" class="slider-handle"></a>' +
            '<span class="slider-tip"></span>' +
            '</div>' +
            '<div class="slider-rule"></div>' +
            '<div class="slider-rulelabel"></div>' +
            '<div style="clear:both"></div>' +
            '<input type="hidden" class="slider-value">' +
            '</div>').insertAfter(target);

        var t = $(target);
        t.addClass('slider-f').hide();
        var name = t.attr('name');
        if (name){
            slider.find('input.slider-value').attr('name', name);
            t.removeAttr('name').attr('sliderName', name);
        }
        return slider;
    }

    function buildSlider(self){
        var opts = self.options;
        var slider = self.slider;

        slider.removeClass('slider-h slider-v slider-disabled');
        slider.addClass(opts.mode == 'h' ? 'slider-h' : 'slider-v');
        slider.addClass(opts.disabled ? 'slider-disabled' : '');

        slider.find('a.slider-handle').draggable({
            axis:opts.mode,
            cursor:'pointer',
            disabled: opts.disabled,
            onDrag:function(e){
                var left = e.data.left;
                var width = slider.width();
                if (opts.mode!='h'){
                    left = e.data.top;
                    width = slider.height();
                }
                if (left < 0 || left > width) {
                    return false;
                } else {
                    var value = pos2value(self, left);
                    adjustValue(value);
                    return false;
                }
            },
            onBeforeDrag:function(){
                self.isDragging = true;
            },
            onStartDrag:function(){
                opts.onSlideStart.call(self, opts.value);
            },
            onStopDrag:function(e){
                var value = pos2value(self, (opts.mode=='h'?e.data.left:e.data.top));
                adjustValue(value);
                opts.onSlideEnd.call(self, opts.value);
                opts.onComplete.call(self, opts.value);
                self.isDragging = false;
            }
        });
        slider.find('div.slider-inner').unbind('.slider').bind('mousedown.slider', function(e){
            if (self.isDragging){return}
            var pos = $(this).offset();
            var value = pos2value(self, (opts.mode=='h'?(e.pageX-pos.left):(e.pageY-pos.top)));
            adjustValue(value);
            opts.onComplete.call(self, opts.value);
        });

        function adjustValue(value){
            var s = Math.abs(value % opts.step);
            if (s < opts.step/2){
                value -= s;
            } else {
                value = value - s + opts.step;
            }
            setValue(self, value);
        }
    }

    function pos2value(self, pos){
        var opts = self.options;
        var slider = self.slider;
        var size = opts.mode == 'h' ? slider.width() : slider.height();
        var value = opts.converter.toValue.call(self, opts.mode=='h'?(opts.reversed?(size-pos):pos):(size-pos), size);
        return value.toFixed(0);
    }

    function value2pos(self, value){
        var opts = self.options;
        var slider = self.slider;
        var size = opts.mode == 'h' ? slider.width() : slider.height();
        var pos = opts.converter.toPosition.call(self, value, size);
        if (opts.mode == 'v'){
            pos = slider.height() - pos;
        }
        if (opts.reversed){
            pos = size - pos;
        }
        return pos.toFixed(0);
    }

    function setValue(self, value){
        var opts = self.options;
        var slider = self.slider;
        var target = self.target;

        var oldValue = opts.value;
        if (value < opts.min) value = opts.min;
        if (value > opts.max) value = opts.max;

        opts.value = value;
        $(target).val(value);
        slider.find('input.slider-value').val(value);

        var pos = value2pos(self, value);
        var tip = slider.find('.slider-tip');
        if (opts.showTip){
            tip.show();
            tip.html(opts.tipFormatter.call(self, opts.value));
        } else {
            tip.hide();
        }

        if (opts.mode == 'h'){
            var style = 'left:'+pos+'px;';
            slider.find('.slider-handle').attr('style', style);
            tip.attr('style', style +  'margin-left:' + (-Math.round(tip.outerWidth()/2)) + 'px');
        } else {
            var style = 'top:' + pos + 'px;';
            slider.find('.slider-handle').attr('style', style);
            tip.attr('style', style + 'margin-left:' + (-Math.round(tip.outerWidth())) + 'px');
        }

        if (oldValue != value){
            opts.onChange.call(self, value, oldValue);
        }
    }

    function initValue(self){
        var opts = self.options;
        var fn = opts.onChange;
        opts.onChange = function(){};
        setValue(self, opts.value);
        opts.onChange = fn;
    }

    function showRule(self){
        var opts = self.options;
        var slider = self.slider;

        var aa = opts.mode == 'h' ? opts.rule : opts.rule.slice(0).reverse();
        if (opts.reversed){
            aa = aa.slice(0).reverse();
        }
        _build(aa);

        function _build(aa){
            var rule = slider.find('div.slider-rule');
            var label = slider.find('div.slider-rulelabel');
            rule.empty();
            label.empty();
            for(var i=0; i<aa.length; i++){
                var distance = i*100/(aa.length-1)+'%';
                var span = $('<span></span>').appendTo(rule);
                span.css((opts.mode=='h'?'left':'top'), distance);

                // show the labels
                if (aa[i] != '|'){
                    span = $('<span></span>').appendTo(label);
                    span.html(aa[i]);
                    if (opts.mode == 'h'){
                        span.css({
                            left: distance,
                            marginLeft: -Math.round(span.outerWidth()/2)
                        });
                    } else {
                        span.css({
                            top: distance,
                            marginTop: -Math.round(span.outerHeight()/2)
                        });
                    }
                }
            }
        }
    }

    function setSize(self, param){
        var opts = self.options;
        var slider = self.slider;

        if (param){
            if (param.width) opts.width = param.width;
            if (param.height) opts.height = param.height;
        }
        if (opts.mode == 'h'){
            slider.css('height', '');
            slider.children('div').css('height', '');
            if (!isNaN(opts.width)){
                slider.width(opts.width);
            }
        } else {
            slider.css('width', '');
            slider.children('div').css('width', '');
            if (!isNaN(opts.height)){
                slider.height(opts.height);
                slider.find('div.slider-rule').height(opts.height);
                slider.find('div.slider-rulelabel').height(opts.height);
                slider.find('div.slider-inner')._outerHeight(opts.height);
            }
        }
        initValue(self);
    }

    erajs.ui.Slider = function(options){
        options = options || {};
        var target = options.target;
        if (!target) {
            var contentEl = options.contentEl;
            if (contentEl) {
                target = $(contentEl);
            }
        }
        if(target){
            this.target = target;
            this.options = $.extend({}, erajs.ui.Slider.defaults,
                erajs.ui.Slider.parseOptions(target),options);

            this.id = this.options.id;
            this.slider = init(this);

            $(target).removeAttr("disabled");
        }

        var opts = this.options;
        opts.min = parseFloat(opts.min);
        opts.max = parseFloat(opts.max);
        opts.value = parseFloat(opts.value);
        opts.step = parseFloat(opts.step);
        opts.originalValue = opts.value;

        this._render(target);
    };

    erajs.ui.Slider.prototype = {

        options: function(){
            return this.options;
        },

        /**
         * 销毁滑动条对象.
         */
        destroy: function(){
            this.slider.remove();
            $(this.target).remove();
            erajs.destroy(this);
        },

        /**
         * 设置滑动条大小.
         * @param {Oject} param
         * @param {Number} [param.width] 新滑动条宽度.
         * @param {Number} [param.height] 新滑动条高度.
         */
        resize: function(param){
            setSize(this,param);
        },

        /**
         * 获取值.
         * @returns {Number}
         */
        getValue: function(){
            return this.options.value;
        },

        /**
         * 设置值.
         * @param {Number} value
         */
        setValue: function(value){
            setValue(this,value);
        },

        /**
         * 清除滑动条的值.
         */
        clear: function(){
            var opts = this.options;
            setValue(this,opts.min);
        },

        /**
         * 重置滑动条的值.
         */
        reset: function(){
            var opts = this.options;
            setValue(this,opts.originalValue);
        },

        /**
         * 启用滑动条控件.
         */
        enable: function(){
            this.options.disabled = false;
            buildSlider(this);
        },

        /**
         * 禁用滑动条控件.
         */
        disable: function(){
            this.options.disabled = true;
            buildSlider(this);
        },
        
        _render : function(target){
            buildSlider(this);
            showRule(this);
            setSize(this);
        }
    };

    /**
     * @class erajs.ui.Slider.defaults
     */
    erajs.ui.Slider.defaults = {

        /**
         * @property {String}
         * 组件唯一标识.
         */
        id : null,

        /**
         * @property {String}
         * 关联元素ID
         */
        contentEl : null,

        /**
         * @property {String/Number}
         * 滑动条宽度.
         */
        width: 'auto',

        /**
         * @property {String/Number}
         * 滑动条高度.
         */
        height: 'auto',

        /**
         * @property {String}
         * 声明滚动条类型。可用值有：
         *
         * - 'h'
         * - 'v'
         */
        mode: 'h',	// 'h'(horizontal) or 'v'(vertical)

        /**
         * @property {Boolean}
         * 为true时，最小值和最大值将对调他们的位置.
         */
        reversed: false,

        /**
         * @property {Boolean}
         * 定义是否显示值信息提示.
         */
        showTip: false,

        /**
         * @property {Boolean}
         * 定义是否禁用滑动条.
         */
        disabled: false,

        /**
         * @property {Number}
         * 默认值.
         */
        value: 0,

        /**
         * @property {Number}
         * 允许的最小值.
         */
        min: 0,

        /**
         * @property {Number}
         * 允许的最大值.
         */
        max: 100,

        /**
         * @property {Number}
         * 值增加或减少.
         */
        step: 1,

        /**
         * @property {Array}
         * 显示标签旁边的滑块.
         */
        rule: [],	// [0,'|',100]

        /**
         * @property {Function}
         * 该函数用于格式化滑动条。返回的字符串值将显示提示.
         * @param {Number} value
         */
        tipFormatter: function(value){return value},

        /**
         * @property {Object}
         * 该转换器函数允许用户决定如何将一个值转换为进度条位置或进度条位置值.
         *  示例代码：
         *
         *      erajs.create('slider',{
         *          contentEl : '#ss',
	     *          converter:{
		 *              toPosition:function(value, size){
		 *	            var opts = $(this).slider('options');
		 *	            return (value-opts.min)/(opts.max-opts.min)*size;
		 *          },
		 *          toValue:function(pos, size){
		 *	            var opts = $(this).slider('options');
		 *	            return opts.min + (opts.max-opts.min)*(pos/size);
		 *          }
         *          }
         *      });
         */
        converter:{
            toPosition:function(value, size){
                var opts = this.options;
                return (value-opts.min)/(opts.max-opts.min)*size;
            },
            toValue:function(pos, size){
                var opts = this.options;
                return opts.min + (opts.max-opts.min)*(pos/size);
            }
        },

        /**
         * @event 在字段值更改的时候触发.
         * @param {Number} value
         * @param {Number} oldValue
         */
        onChange: function(value, oldValue){},

        /**
         * @event
         * 在开始拖拽滑动条的时候触发.
         * @param {Number} value
         */
        onSlideStart: function(value){},

        /**
         * @event
         * 在结束拖拽滑动条的时候触发.
         * @param {Number} value
         */
        onSlideEnd: function(value){},

        /**
         * @event
         * 在滑块值被用户改变的时候触发，无论是拖动还是点击滑块.
         * @param {Number} value
         */
        onComplete: function(value){}
    };

    erajs.ui.Slider.parseOptions = function(target){
        var t = $(target);
        return $.extend({}, erajs.ui.parser.parseOptions(t, [
            'id','width','height','mode',{reversed:'boolean',showTip:'boolean',min:'number',max:'number',step:'number'}
        ]), {
            value: (t.val() || undefined),
            disabled: (t.attr('disabled') ? true : undefined),
            rule: (t.attr('rule') ? eval(t.attr('rule')) : undefined)
        });
    };

})();
/*
 * Copyright (c) 2014 www.erayt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 **/
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.ui.Spinner
 * @extends erajs.ui.Spinner.defaults
 *
 * 使用{@link erajs.ui.Spinner.defaults}重写默认值对象.
 *
 * 微调控件结合了一个可编辑文本框和2个小按钮让用户选择一个值的范围.
 * 和下拉列表框类似,微调控件允许用户输入值,但是没有下拉列表.
 * 微调控件是创建其他高级微调控件的基础控件,比如：{@link erajs.ui.Numberspinner},{@link erajs.ui.Timespinner}等.
 *
 * {@img erajs.ui.Spinner/spinner.png}
 *
 */
(function(){

    function init(self) {
        var target = self.target;
        var spinner = $("<span class=\"spinner\">" + "<span class=\"spinner-arrow\">"
            + "<span class=\"spinner-arrow-up\"></span>"
            + "<span class=\"spinner-arrow-down\"></span>"
            + "</span>" + "</span>").insertAfter(target);

        $(target).addClass("spinner-text spinner-f").prependTo(spinner);
        return spinner;
    }

    function disable(self,mode){
        var opts = self.options;
        var target = self.target;
        if (mode) {
            opts.disabled = true;
            $(target).attr("disabled", true);
        } else {
            opts.disabled = false;
            $(target).removeAttr("disabled");
        }
    }

    function readonly(self, mode) {
        var opts = self.options;
        opts.readonly = mode == undefined ? true : mode;
        var readonly = opts.readonly ? true : (!opts.editable);
        $(self.target).attr("readonly", readonly).css("cursor", readonly ? "pointer" : "");
    }

    function resize(self,width){
        var opts = self.options;
        var spinner = self.spinner;
        var target = self.target;

        if (width) {
            opts.width = width;
        }
        var tempDiv = $("<div style=\"display:none\"></div>").insertBefore(spinner);
        spinner.appendTo("body");

        if (isNaN(opts.width)) {
            opts.width = $(target).outerWidth();
        }

        var spinnerArrow = spinner.find(".spinner-arrow");
        spinner._outerWidth(opts.width)._outerHeight(opts.height);
        $(target)._outerWidth(spinner.width() - spinnerArrow.outerWidth());
        $(target).css({
            height : spinner.height() + "px",
            lineHeight : spinner.height() + "px"
        });
        spinnerArrow._outerHeight(spinner.height());
        spinnerArrow.find("span")._outerHeight(spinnerArrow.height() / 2);
        spinner.insertAfter(tempDiv);
        tempDiv.remove();
    }

    function bindEvents(self){
        var opts = self.options;
        var spinner = self.spinner;
        var target = self.target;
        var cc = $(target);

        cc.unbind(".spinner");

        spinner.find(".spinner-arrow-up,.spinner-arrow-down").unbind(".spinner");
        if (!opts.disabled && !opts.readonly) {
            spinner.find(".spinner-arrow-up").bind("mouseenter.spinner", function() {
                $(this).addClass("spinner-arrow-hover");
            }).bind("mouseleave.spinner", function() {
                $(this).removeClass("spinner-arrow-hover");
            }).bind("click.spinner", function() {
                opts.spin.call(self, false);
                opts.onSpinUp.call(self);
            });
            spinner.find(".spinner-arrow-down").bind("mouseenter.spinner", function() {
                $(this).addClass("spinner-arrow-hover");
            }).bind("mouseleave.spinner", function() {
                $(this).removeClass("spinner-arrow-hover");
            }).bind("click.spinner", function() {
                opts.spin.call(self, true);
                opts.onSpinDown.call(self);
            });
            cc.bind("change.spinner", function() {
                self.setValue($(this).val());
            });
        }
    }

    erajs.ui.Spinner = function(options){
        options = options || {};
        var target = options.target;
        if (!target) {
            var contentEl = options.contentEl;
            if (contentEl) {
                target = $(contentEl);
            }
        }
        if(target){
            this.target = target;
            this.options = $.extend({}, erajs.ui.Spinner.defaults,
                erajs.ui.Spinner.parseOptions(target),options);

            this.id = this.options.id;

            this.spinner = init(this);

            $(target).removeAttr("disabled");
        }

        var value = this.options.value;
        this.options.originalValue = value;
        $(target).val(value);

        this._render(target);
    };

    erajs.ui.Spinner.prototype = {

        /**
         * 销毁微调组件.
         */
        destroy: function(){
            this.spinner.remove();
            erajs.destroy(this);
        },

        /**
         * 通过'{@link #width}参数重写原始宽度.
         * @param {Number} width 新的宽度值.
         */
        resize: function(width){
            resize(this,width);
        },

        /**
         * 启用组件.
         */
        enable: function(){
            disable(this,false);
            bindEvents(this);
        },

        /**
         * 禁用组件.
         */
        disable: function(){
            disable(this,true);
            bindEvents(this);
        },

        /**
         * 启用/禁用只读模式.
         * @param {Boolean} mode 是否只读模式.
         */
        readonly : function(mode) {
            readonly(this, mode);
            bindEvents(this);
        },

        /**
         * 获取值.
         * @returns {String/Number}
         */
        getValue: function(){
            return this.options.value;
        },

        /**
         * 设置值.
         * @param {String/Number} value
         */
        setValue: function(value){
            var opts = this.options;
            var value_ = opts.value;
            opts.value = value;
            $(this.target).val(value);
            if (value_!= value) {
                opts.onChange.call(this, value, value_);
            }
        },

        /**
         * 清空组件值.
         */
        clear: function(){
            var opts = this.options;
            opts.value = "";
            $(this.target).val("");
        },

        /**
         * 重置组件值.
         */
        reset: function(){
            var opts = this.options;
            this.setValue(opts.originalValue);
        },

        _render : function(target){
            disable(this, this.options.disabled);
            readonly(this, this.options.readonly);
            resize(this);
            bindEvents(this);
        }
    };

    /**
     * @class erajs.ui.Spinner.defaults
     */
    erajs.ui.Spinner.defaults = {

        /**
         * @property {String}
         * 组件唯一标识.
         */
        id : null,

        /**
         * @property {String}
         * 关联元素ID.
         */
        contentEl : null,

        /**
         * @property {String}
         * 组件宽度.
         */
        width : "auto",

        /**
         * @property {Number}
         * 组件高度.
         */
        height : 22,

        deltaX : 19,

        /**
         * @property {String}
         * 默认值.
         */
        value : "",

        /**
         * @property {Number}
         * 允许的最小值.
         */
        min : null,

        /**
         * @property {Number}
         * 允许的最大值.
         */
        max : null,

        /**
         * @property {Number}
         * 在点击微调按钮的时候的增量值.
         */
        increment : 1,

        /**
         * @property {Boolean}
         * 义用户是否可以直接输入值到字段.
         */
        editable : true,

        /**
         * @property {Boolean}
         * 定义是否禁用.
         */
        disabled : false,

        /**
         * @property {Boolean}
         * 定义控件是否为只读.
         */
        readonly : false,

        /**
         * @private
         * @property {Function}
         * 在用户点击微调按钮的时候调用的函数.
         * @param {Boolean} down 用户点击的向下按钮
         */
        spin : function(down) {
        },

        /**
         * @event 在用户点击向上微调按钮的时候触发.
         */
        onSpinUp : function() {
        },

        /**
         * @event 在用户点击向下微调按钮的时候触发.
         */
        onSpinDown : function() {
        },

        /**
         * @event 在改变当前值的时候触发.
         * @param {String/Number} newValue
         * @param {String/Number} oldValue
         */
        onChange : function(newValue, oldValue) {
        }
    };

    erajs.ui.Spinner.parseOptions = function(target){
        var t = $(target);
        return $.extend({}, erajs.ui.parser.parseOptions(t, ["id","width", "height", "min", "max", {
            increment : "number",
            editable : "boolean"
        }]), {
            value : (t.val() || undefined),
            disabled : (t.attr("disabled") ? true : undefined),
            readonly : (t.attr("readonly") ? true : undefined)
        });
    };
})();
/*
 * Copyright (c) 2014 www.erayt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 **/
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.ui.Numberbox
 * @extends erajs.ui.Numberbox.defaults
 *
 * 使用{@link erajs.ui.Numberbox.defaults}重载默认值。
 *
 * 使用numberbox 让我们的用户只能输入数值类型,可以转换一个input元素到不同的类型,
 * 例如:numeric,percentage, currency,等等...多数类型的input的定义是依赖与'formatter' 和 'parser' 函数之上的.
 *
 * {@img erajs.ui.Numberbox/numberbox.png}
 *
 * ## 使用案例
 *
 * 根据标记创建numberbox .
 *
 *      @example
 *       <input id="box1" xtype="numberbox" value="1234567.89"
 *          data-options="precision:2,groupSeparator:',',decimalSeparator:'.',prefix:'$'"></input>
 *
 */
(function(){

    function init(self){
        var target = self.target;
        var cc = $(target);
        cc.addClass("numberbox numberbox-f");
        var field = $("<input type=\"hidden\">").insertAfter(target);
        var name = cc.attr("name");
        if (name) {
            field.attr("name", name);
            cc.removeAttr("name").attr("numberboxName", name);
        }
        return field;
    }

    function disable(self,mode){
        var opts = self.options;
        var target = self.target;
        if (mode) {
            opts.disabled = true;
            $(target).attr("disabled", true);
        } else {
            opts.disabled = false;
            $(target).removeAttr("disabled");
        }
    }

    function setSize(self,width){
        var opts = self.options;
        var target = self.target;

        if (width) {
            opts.width = width;
        }
        var t = $(target);
        var _d = $("<div style=\"display:none\"></div>").insertBefore(t);
        t.appendTo("body");
        if (isNaN(opts.width)) {
            opts.width = t.outerWidth();
        }
        t._outerWidth(opts.width)._outerHeight(opts.height);
        t.css("line-height", t.height() + "px");
        t.insertAfter(_d);
        _d.remove();
    }

    function bindEvent(self){
        var opts = self.options;
        var target = self.target;

        $(target).unbind(".numberbox").bind("keypress.numberbox", function(e) {
            return opts.filter.call(self, e);
        }).bind("blur.numberbox", function() {
            setValue(self, $(this).val());
            $(this).val(opts.formatter.call(self, getValue(self)));
        }).bind("focus.numberbox", function() {
            var vv = getValue(self);
            if (vv != opts.parser.call(self, $(this).val())) {
                $(this).val(opts.formatter.call(self, vv));
            }
        });
    }

    function setValue(self,value){
        var opts = self.options;
        var target = self.target;

        var oldValue = getValue(self);
        value = opts.parser.call(self,value);
        opts.value = value;
        self.field.val(value);

        $(target).val(opts.formatter.call(self, value));
        if (oldValue != value) {
            opts.onChange.call(self, value, oldValue);
        }
    }

    function getValue(self){
        var field = self.field;
        return field.val();
    }

    function onChange(self) {
        var opts = self.options;
        var fn = opts.onChange;
        opts.onChange = function() {};
        setValue(self, opts.parser.call(self, opts.value));
        opts.onChange = fn;
        opts.originalValue = getValue(self);
    };

    erajs.ui.Numberbox = function(options){
        options = options || {};
        var target = options.target;
        if (!target) {
            var contentEl = options.contentEl;
            if (contentEl) {
                target = $(contentEl);
            }
        }
        if(target){
            this.target = target;
            this.options = $.extend({}, erajs.ui.Numberbox.defaults,
                erajs.ui.Numberbox.parseOptions(target),options);

            this.id = this.options.id;
            this.field = init(this);
            $(target).removeAttr("disabled");
            $(target).css({
                imeMode : "disabled"
            });
        }

        this._render(target);
    };

    erajs.ui.Numberbox.prototype = {

        /**
         * 销毁组件.
         */
        destroy: function(){
            this.field.remove();
            $(this.target).remove();
        },

        /**
         * 修改组件宽度.
         * @param {Number} width 宽度值.
         */
        resize: function(width){
            setSize(this,width);
        },

        /**
         * 启用组件.
         */
        enable: function(){
            disable(this,false);
        },

        /**
         * @private
         * 将输入框中的值修正为有效的值.
         */
        fix : function(){
            var target = this.target;
            setValue(this, $(target).val());
        },

        /**
         * 禁用组件.
         */
        disable: function(){
            disable(this,true);
        },

        /**
         * 获取值.
         * @returns {String}
         */
        getValue: function(){
            return getValue(this);
        },

        /**
         * 设置值.
         * @param {String} value
         */
        setValue: function(value){
            setValue(this,value);
        },

        /**
         * 清空数值输入框的值.
         */
        clear: function(){
            var opts = this.options;
            opts.value = "";
            this.field.val("");
            $(this.target).val("");
        },

        /**
         * 重置数值输入框的值.
         */
        reset: function(){
            var opts = this.options;
            this.setValue(opts.originalValue);
        },

        _render : function(target){
            disable(this, this.options.disabled);
            setSize(this);
            bindEvent(this);
            onChange(this);
        }
    };

    /**
     * @class erajs.ui.Numberbox.defaults
     */
    erajs.ui.Numberbox.defaults = {

        /**
         * @property {String} 组件唯一标识.
         */
        id : null,

        /**
         * @property {String/Number} 宽度.
         */
        width : "auto",

        /**
         * @property {Number} 高度.
         */
        height : 22,

        /**
         * @property {Boolean} 是否禁用.
         */
        disabled : false,

        /**
         * @property {String} 值.
         */
        value : "",

        /**
         * @property {Number} 允许的最小值.
         */
        min : null,

        /**
         * @property {Number} 允许的最大值.
         */
        max : null,

        /**
         * @property {Number}
         * 在十进制分隔符之后显示的最大精度.（即小数点后的显示精度）
         */
        precision : 0,

        /**
         * @property {String}
         * 使用哪一种十进制字符分隔数字的整数和小数部分.
         */
        decimalSeparator : ".",

        /**
         * @property {String}
         * 使用哪一种字符分割整数组，以显示成千上万的数据。
         * 比如:99,999,999.00中的','就是该分隔符设置.
         */
        groupSeparator : "",

        /**
         * @property {String}
         * 前缀字符。
         * 比如:金额的$或者￥.
         */
        prefix : "",

        /**
         * @property {String}
         * 后缀字符。
         * 比如:后置的欧元符号€.
         */
        suffix : "",

        /**
         * @property {Function}
         * 定义如何过滤按键.
         * @param {Event} e 键盘事件
         * @returns {Boolean} 当返回true时则允许输入，反之禁止.
         */
        filter : function(e) {
            var opts = this.options;
            var target = this.target;
            if (e.which == 45) {
                return ($(target).val().indexOf("-") == -1 ? true : false);
            }
            var c = String.fromCharCode(e.which);
            if (c == opts.decimalSeparator) {
                return ($(target).val().indexOf(c) == -1 ? true : false);
            } else {
                if (c == opts.groupSeparator) {
                    return true;
                } else {
                    if ((e.which >= 48 && e.which <= 57 && e.ctrlKey == false && e.shiftKey == false) || e.which == 0 || e.which == 8) {
                        return true;
                    } else {
                        if (e.ctrlKey == true && (e.which == 99 || e.which == 118)) {
                            return true;
                        } else {
                            return false;
                        }
                    }
                }
            }
        },

        /**
         * @property {Function}
         * 用于格式化数值的函数。返回字符串值以显示到输入框中.
         *
         * @param {String} value 输入值.
         *
         * @returns {String} 格式化后的值.
         */
        formatter : function(value) {
            if (!value) {
                return value;
            }
            value = value + "";
            var opts = this.options;
            var s1 = value, s2 = "";
            var _2a = value.indexOf(".");
            if (_2a >= 0) {
                s1 = value.substring(0, _2a);
                s2 = value.substring(_2a + 1, value.length);
            }
            if (opts.groupSeparator) {
                var p = /(\d+)(\d{3})/;
                while (p.test(s1)) {
                    s1 = s1.replace(p, "$1" + opts.groupSeparator + "$2");
                }
            }
            if (s2) {
                return opts.prefix + s1 + opts.decimalSeparator + s2 + opts.suffix;
            } else {
                return opts.prefix + s1 + opts.suffix;
            }
        },

        /**
         * @property {Function}
         * 用于解析字符串的函数,返回数值.
         * @param {String} s 值
         * @returns {String} 解析后的值
         */
        parser : function(s) {
            s = s + "";
            var opts = this.options;
            if (parseFloat(s) != s) {
                if (opts.prefix) {
                    s = $.trim(s.replace(new RegExp("\\" + $.trim(opts.prefix), "g"), ""));
                }
                if (opts.suffix) {
                    s = $.trim(s.replace(new RegExp("\\" + $.trim(opts.suffix), "g"), ""));
                }
                if (opts.groupSeparator) {
                    s = $.trim(s.replace(new RegExp("\\" + opts.groupSeparator, "g"), ""));
                }
                if (opts.decimalSeparator) {
                    s = $.trim(s.replace(new RegExp("\\" + opts.decimalSeparator, "g"), "."));
                }
                s = s.replace(/\s/g, "");
            }
            var val = parseFloat(s).toFixed(opts.precision);
            if (isNaN(val)) {
                val = "";
            } else {
                if ( typeof (opts.min) == "number" && val < opts.min) {
                    val = opts.min.toFixed(opts.precision);
                } else {
                    if ( typeof (opts.max) == "number" && val > opts.max) {
                        val = opts.max.toFixed(opts.precision);
                    }
                }
            }
            return val;
        },

        /**
         * @event 当字段值更改的时候触发
         * @param {String} newValue 新的值.
         * @param {String} oldValue 旧的值.
         */
        onChange : function(newValue,oldValue) {}
    };

    erajs.ui.Numberbox.parseOptions = function(target){
        var t = $(target);
        return $.extend({},erajs.ui.parser.parseOptions(t, ["id","width", "height", "decimalSeparator", "groupSeparator", "suffix", {
            min : "number",
            max : "number",
            precision : "number"
        }]), {
            prefix : (t.attr("prefix") ? t.attr("prefix") : undefined),
            disabled : (t.attr("disabled") ? true : undefined),
            value : (t.val() || undefined)
        });
    };
})();
/*
 * Copyright (c) 2014 www.erayt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 **/
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.ui.Dialog
 * @extends erajs.ui.Dialog.defaults
 *
 * 扩展自{@link erajs.ui.Window.defaults}.使用{@link erajs.ui.Dialog.defaults}重写默认值对象.
 *
 * 该对话框是一种特殊类型的窗口,它在顶部有一个工具栏,在底部有一个按钮栏.
 * 对话框窗口右上角只有一个关闭按钮,用户可以配置对话框的行为显示其他工具,
 * 如{@link #collapsible},{@link #minimizable},{@link #maximizable}工具等.
 *
 * {@img erajs.ui.Dialog/dialog.png}
 *
 * 通过已存在的DOM节点元素标签创建.
 *
 * 下面的例子显示了一个可变大小的模式窗口.
 *
 *      @example
 *      <div id="dd" xtype="dialog" title="My Dialog" style="width:400px;height:200px;"
 *          data-options="iconCls:'icon-save',resizable:true,modal:true">
 *           Dialog Content.
 *      </div>
 *
 *  使用Javascript创建对话框窗口也是允许的.
 *  现在让我们创建一个模式窗口并调用{@link #refresh}方法通过ajax读取内容.
 *
 *      <div id="dd">Dialog Content.</div>
 *
 *      erajs.create('dialog',{
 *          title: 'My Dialog',
 *          contentEl : '#dd',
 *          width: 400,
 *          height: 200,
 *          closed: false,
 *          cache: false,
 *          href: 'get_content.html',
 *          modal: true
 *      });
 */
(function(){

    function wrapDialog(self){
        var opts = self.options;
        var target = self.target;
        var cp = document.createElement('div');
        while(target.firstChild){
            cp.appendChild(target.firstChild);
        }
        target.appendChild(cp);

        var contentPanel = $(cp);
        contentPanel.attr('style', $(target).attr('style'));
        $(target).removeAttr('style').css('overflow', 'hidden');

        var dialogPanel = new erajs.ui.Panel($.extend({}, {
            target : contentPanel[0],
            loadingMessage:opts.loadingMessage
        },{
            border:false,
            doSize:false,
            bodyCls:'dialog-content'
        }));

        return dialogPanel;
    }

    function buildDialog(self){
        var opts = self.options;
        var target = self.target;
        var contentPanel = self.contentPanel;

        addTools(self);
        addButtons(self);

        var window = new erajs.ui.Window($.extend({}, opts, {
            onOpen:function(){
                if (contentPanel.closed){
                    contentPanel.open();
                }
                if (opts.onOpen) opts.onOpen.call(self);
            },
            onResize : function(width, height){
                var wbody = $(target);
                contentPanel.panel.show();
                contentPanel.resize({
                    width: wbody.width(),
                    height: (height=='auto') ? 'auto' :
                        wbody.height()
                        - wbody.children('div.dialog-toolbar')._outerHeight()
                        - wbody.children('div.dialog-button')._outerHeight()
                });

                if (opts.onResize) opts.onResize.call(self, width, height);
            }
        }));

        self.window = window;

    }

    function addButtons(self){
        var opts = self.options;
        var target = self.target;

        if (opts.buttons){
            if ($.isArray(opts.buttons)){
                $(target).find('div.dialog-button').remove();
                var buttons = $('<div class="dialog-button"></div>').appendTo(target);
                for(var i=0; i<opts.buttons.length; i++){
                    var p = opts.buttons[i];
                    var button = $('<div></div>').appendTo(buttons);
                    if (p.handler) button[0].onclick = p.handler;
                    new erajs.ui.Button($.extend({}, p, {
                        target : button[0]
                    }));
                }
            } else {
                $(opts.buttons).addClass('dialog-button').appendTo(target);
                $(opts.buttons).show();
            }
        } else {
            $(target).find('div.dialog-button').remove();
        }
    }

    function addTools(self){
        var opts = self.options;
        var target = self.target;

        if (opts.toolbar){
            if ($.isArray(opts.toolbar)){
                $(target).find('div.dialog-toolbar').remove();
                var toolbar = $('<div class="dialog-toolbar"><table cellspacing="0" cellpadding="0"><tr></tr></table></div>').prependTo(target);
                var tr = toolbar.find('tr');
                for(var i=0; i<opts.toolbar.length; i++){
                    var btn = opts.toolbar[i];
                    if (btn == '-'){
                        $('<td><div class="dialog-tool-separator"></div></td>').appendTo(tr);
                    } else {
                        var td = $('<td></td>').appendTo(tr);
                        var tool = $('<div ></div>').appendTo(td);
                        tool[0].onclick = eval(btn.handler || function(){});

                        new erajs.ui.Button($.extend({}, btn, {
                            target : tool[0],
                            plain:true
                        }));
                    }
                }
            } else {
                $(opts.toolbar).addClass('dialog-toolbar').prependTo(target);
                $(opts.toolbar).show();
            }
        } else {
            $(target).find('div.dialog-toolbar').remove();
        }
    }

    erajs.ui.Dialog = function(options){
        options = options || {};
        var target = options.target;
        if (!target) {
            var contentEl = options.contentEl;
            if (contentEl) {
                target = $(contentEl)[0];
            }
        }
        if(target){
            this.target = target;
            this.options = $.extend({}, erajs.ui.Dialog.defaults,
                erajs.ui.Dialog.parseOptions(target),options);

            this.id = this.options.id;
            this.contentPanel = wrapDialog(this);
        }

        this._render(target);
    };

    erajs.ui.Dialog.prototype = {

        /**
         * 打开对话框窗口.
         */
        open : function(){
            this.window.open();
        },

        /**
         * 关闭对话框窗口.
         */
        close : function(){
            this.window.close();
        },

        /**
         * 获取window对象.用法如下：
         *
         *      var dialog = erajs.getCmp('dd');  //获取dialog窗口对象
         *      var window = dialog.getWindow();  //获取dialog对象的window对象属性
         *      window.center();  //打开窗口
         *
         * @returns {erajs.ui.Window}
         */
        getWindow : function(){
            return this.window;
        },

        /**
         * 销毁组件.
         * @param {Boolean} forceDestroy
         */
        destroy : function(forceDestroy){
            this.window.destroy(forceDestroy);
            erajs.destroy(this);
        },

        _render : function(target){
            buildDialog(this);
        }
    };

    /**
     * @class erajs.ui.Dialog.defaults
     * @extends erajs.ui.Window.defaults
     */
    erajs.ui.Dialog.defaults = $.extend({}, erajs.ui.Window.defaults, {

        /**
         * @readonly
         * @property {String} [bodyCls='dialog-content'] 窗口的正文部分Css类.
         */

        /**
         * @property {String}
         * 对话框窗口标题文本.
         */
        title: 'New Dialog',

        /**
         * @property {Boolean}
         * 定义是否显示可折叠按钮.
         */
        collapsible: false,

        /**
         * @property {Boolean}
         * 定义是否显示最小化按钮.
         */
        minimizable: false,

        /**
         * @property {Boolean}
         * 定义是否显示最大化按钮.
         */
        maximizable: true,

        /**
         * @property {Boolean}
         */
        resizable: false,

        /**
         * @property {Array/String}
         * 设置对话框窗口顶部工具栏，可用值有：
         *
         * - '一个数组，每一个工具栏中的工具属性都和button相同'
         * - '一个选器指定工具栏'
         */
        toolbar:null,

        /**
         * @property {Array/String}
         * 对话框窗口底部按钮，可用值有：
         *
         * - '一个数组，每一个按钮的属性都和button相同'
         * - '一个选择器指定按钮栏'
         */
        buttons:null
    });

    erajs.ui.Dialog.parseOptions = function(target){
        var t = $(target);
        return $.extend({}, erajs.ui.Window.parseOptions(target),
            erajs.ui.parser.parseOptions(t,['id','toolbar','buttons'])
        );
    };

})();
/*
 * Copyright (c) 2014 www.erayt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 **/
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.ui.Numberspinner
 * @extends erajs.ui.Numberspinner.defaults
 *
 * 从 {@link erajs.ui.Spinner.defaults}和{@link erajs.ui.Numberbox.defaults}继承。
 *
 * numberspinner 创建是基于spinner 和numberbox,可以转换输入的值到不同的类型,
 * 例如,numeric, percentage等等.也可以使用 up/down spinner 按钮滚动到一个期望的值.
 *
 * {@img erajs.ui.Numberspinner/numberspinner.png}
 *
 * ## 依赖关系
 *
 * - {@link erajs.ui.Spinner Spinner}
 * - {@link erajs.ui.Numberbox Numberbox}
 *
 * ## 使用案例
 *
 * 从标签创建numberspinner.
 *
 *  1、定义一个初始值为1000,增量为100的numberspinner组件。
 *
 *      @example
 *      <input id="ns" xtype="numberspinner" value="1000" data-options="increment:100" style="width:120px;"></input>
 *
 *  2、创建numberspinner 和转换数字作为一个货币字符串.
 *
 *      @example
 *      <input xtype="numberspinner" value="1234567890" style="width:150px;"
 *           data-options="precision:2,groupSeparator:',',decimalSeparator:'.',prefix:'$'" />
 *
 */
(function(){

    function init(self){
        var target = self.target;
        var opts = self.options;

        $(target).addClass("numberspinner-f");

        var spinner = new erajs.ui.Spinner($.extend({},opts,{
            spin:function(down){
                spin(self,down);
            }
        }));
        self.spinner = spinner;

        var numberbox = new erajs.ui.Numberbox($.extend({},opts,{width:"auto"}));
        self.numberbox = numberbox;
    };

    erajs.ui.Numberspinner = function(options){
        options = options || {};
        var target = options.target;
        if (!target) {
            var contentEl = options.contentEl;
            if (contentEl) {
                target = $(contentEl);
            }
        }
        if(target){
            this.target = target;

            this.options = $.extend({}, erajs.ui.Numberspinner.defaults,
                erajs.ui.Numberspinner.parseOptions(target),options);

            this.id = this.options.id;
        }

        init(this);
    };

    erajs.ui.Numberspinner.prototype = {

        options:function(){
            var opts = this.options;
            var numberbox = this.numberbox;
            return $.extend(opts,{
                  value:this.getValue(),
                  originalValue:numberbox.options.originalValue
            });
        },

        /**
         * 设置组件值.
         * @param {Number} value
         */
        setValue:function(value){
            var self = this,
                opts = self.options;

            opts.value = value;
            var numberbox = self.numberbox;
            numberbox.setValue(value);
        },

        /**
         * 获取组件值.
         * @returns {Number}
         */
        getValue:function(){
            var numberbox = this.numberbox;
            return numberbox.getValue();
        },

        /**
         * 清空组件值.
         */
        clear:function(){
            var numberbox = this.numberbox;
            var spinner = this.spinner;
            spinner.clear();
            numberbox.clear();
        },

        /**
         * 重置组件值.
         */
        reset:function(){
            var opts = this.options;
            this.setValue(opts.originalValue);
        },

        /**
         * 销毁组件.
         */
        destroy : function(){
            this.spinner.destroy();
            erajs.destroy(this);
        }
    };

    function spin(self,down){
        var opts = self.options;
        var v = parseFloat(self.getValue() || opts.value) || 0;
        if(down == true){
            v -= opts.increment;
        }else{
            v += opts.increment;
        }
        self.setValue(v);
    }

    /**
     * @class erajs.ui.Numberspinner.defaults
     * @extends erajs.ui.Spinner.defaults
     */
    erajs.ui.Numberspinner.defaults = $.extend({},erajs.ui.Spinner.defaults,
        erajs.ui.Numberbox.defaults);

    erajs.ui.Numberspinner.parseOptions = function(target){
        return $.extend({},erajs.ui.Spinner.parseOptions(target),
            erajs.ui.Numberbox.parseOptions(target),{});
    };

})();

/*
 * Copyright (c) 2014 www.erayt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 **/
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.ui.Timespinner
 * @extends erajs.ui.Timespinner.defaults
 *
 * 扩展自{@link erajs.ui.Spinner.defaults}.使用{@link erajs.ui.Timespinner.defaults}重写默认值对象.
 *
 * 时间微调组件的创建基于微调组件.它和数字微调类似，但是显示的时间值.
 * 时间微调组件允许用户点击组件右侧的小按钮来增加或减少时间.
 *
 * {@img erajs.ui.Timespinner/timespinner.png}
 *
 * ##创建时间微调
 *
 * 1、用标签创建时间微调.
 *
 *      @example
 *      <input id="ts" xtype="timespinner" style="width:80px;"
 *          data-options="
 *              highlight : 1
 *      " >
 *
 * 2、使用Javascript创建时间微调组件.
 *
 *       <input id="ts" style="width:80px;">
 *
 *      erajs.create('timespinner',{
 *	        contentEl : '#ss',
 *	        min: '08:30',
 *          showSeconds: true
 *      });
 */
(function(){

    function spin(self,down){
        var opts = self.options;
        var target = self.target;

        var val = $(target).val();
        if (val == "") {
            val = [0, 0, 0].join(opts.separator);
        }
        var vv = val.split(opts.separator);
        for (var i = 0; i < vv.length; i++) {
            vv[i] = parseInt(vv[i], 10);
        }
        if (down == true) {
            vv[opts.highlight] -= opts.increment;
        } else {
            vv[opts.highlight] += opts.increment;
        }
        var value = vv.join(opts.separator);
        $(target).val(value);

        setValue(self);
        createRange(self);
    }

    function init(self){
        var target = self.target;
        var opts = self.options;
        var cc = $(target);

        cc.addClass("timespinner-f");

        var options = $.extend({},opts,{
            target:target[0],
            spin : function(down) {
                spin(self, down);
            }
        });

        var spinner = new erajs.ui.Spinner(options);
        self.spinner = spinner;

        cc.unbind(".timespinner").bind("click.timespinner", function() {
            var _4 = 0;
            if (this.selectionStart != null) {
                _4 = this.selectionStart;
            } else {
                if (this.createTextRange) {
                    var _5 = target.createTextRange();
                    var s = document.selection.createRange();
                    s.setEndPoint("StartToStart", _5);
                    _4 = s.text.length;
                }
            }
            if (_4 >= 0 && _4 <= 2) {
                opts.highlight = 0;
            } else {
                if (_4 >= 3 && _4 <= 5) {
                    opts.highlight = 1;
                } else {
                    if (_4 >= 6 && _4 <= 8) {
                        opts.highlight = 2;
                    }
                }
            }
            createRange(self);
        }).bind("blur.timespinner", function() {
            setValue(self);
        });
    }

    function createRange(self) {
        var opts = self.options;
        var target = self.target;
        var start = 0, end = 0;

        if (opts.highlight == 0) {
            start = 0;
            end = 2;
        } else {
            if (opts.highlight == 1) {
                start = 3;
                end = 5;
            } else {
                if (opts.highlight == 2) {
                    start = 6;
                    end = 8;
                }
            }
        }
        if (target.selectionStart != null) {
            target.setSelectionRange(start, end);
        } else {
            if (target.createTextRange) {
                var textRange = target.createTextRange();
                textRange.collapse();
                textRange.moveEnd("character", end);
                textRange.moveStart("character", start);
                textRange.select();
            }
        }
        $(target).focus();
    }

    function getDate(self,value) {
        var opts = self.options;
        if (!value) {
            return null;
        }
        var vv = value.split(opts.separator);
        for (var i = 0; i < vv.length; i++) {
            if (isNaN(vv[i])) {
                return null;
            }
        }
        while (vv.length < 3) {
            vv.push(0);
        }
        return new Date(1900, 0, 0, vv[0], vv[1], vv[2]);
    }

    function setValue(self) {
        var opts = self.options;
        var target = self.target;
        var spinner = self.spinner;

        var v = $(target).val();

        var date = getDate(self, v);
        if (!date) {
            opts.value = "";
            spinner.setValue("");
            return;
        }
        var minDate = getDate(self, opts.min);
        var maxDate = getDate(self, opts.max);
        if (minDate && minDate > date) {
            date = minDate;
        }
        if (maxDate && maxDate < date) {
            date = maxDate;
        }
        var tt = [getVl(date.getHours()), getVl(date.getMinutes())];

        if (opts.showSeconds) {
            tt.push(getVl(date.getSeconds()));
        }

        var val = tt.join(opts.separator);
        opts.value = val;
        spinner.setValue(val);
        function getVl(v) {
            return (v < 10 ? "0" : "") + v;
        };
    }

    erajs.ui.Timespinner = function(options){
        options = options || {};
        var target = options.target;
        if (!target) {
            var contentEl = options.contentEl;
            if (contentEl) {
                target = $(contentEl);
            }
        }
        if(target){
            this.target = target;

            this.options = $.extend({}, erajs.ui.Timespinner.defaults,
                erajs.ui.Timespinner.parseOptions(target),options);

            this.id = this.options.id;
        }

        init(this);
    };

    erajs.ui.Timespinner.prototype = {

        options:function(){
            return this.spinner.options;
        },

        getSpinner : function(){
            return this.spinner;
        },

        /**
         * 设置时间值.
         * @param {String} value
         */
        setValue : function(value){
            var target = this.target;
            $(target).val(value);
            setValue(this);
        },

        /**
         * 获取时间值.
         * @returns {String}
         */
        getValue : function(){
            return this.options.value;
        },

        /**
         * 启用/禁用只读模式.
         * @param {Boolean} mode 是否只读模式.
         */
        readonly : function(mode){
            this.options.readonly = mode;
            this.spinner.readonly(mode);
        },

        /**
         * 启用组件.
         */
        enable : function(){
            this.options.disabled = false;
            this.spinner.enable();
        },

        /**
         * 禁用组件.
         */
        disable : function(){
            this.options.disabled = true;
            this.spinner.disable();
        },

        /**
         * 清空时间值.
         */
        clear: function(){
            var opts = this.options;
            opts.value = "";
            $(this.target).val("");
        },

        /**
         * 重置时间值.
         */
        reset: function(){
            var opts = this.spinner.options;
            this.setValue(opts.originalValue);
        },

        /**
         * 获取当前的小时数.
         * @returns {Number}
         */
        getHours : function() {
            var vv = this.getSplitValue();
            return parseInt(vv[0], 10);
        },

        /**
         * @private
         *
         * 返回分割之后的时间值.
         * @returns {Array}
         */
        getSplitValue : function(){
            var opts = this.options;
            var vv = opts.value.split(opts.separator);
            return vv;
        },

        /**
         * 获取当前的分钟数.
         * @returns {Numbr}
         */
        getMinutes : function() {
            var vv = this.getSplitValue();
            return parseInt(vv[1], 10);
        },

        /**
         * 获取当前的秒数.
         * @returns {Number}
         */
        getSeconds : function() {
            var vv = this.getSplitValue();
            return parseInt(vv[2], 10) || 0;
        },

        /**
         * 销毁组件.
         */
        destroy : function(){
            this.spinner.destroy();
            erajs.destroy(this);
        }
    };

    /**
     * @class erajs.ui.Timespinner.defaults
     * @extends erajs.ui.Spinner.defaults
     */
    erajs.ui.Timespinner.defaults = $.extend({},erajs.ui.Spinner.defaults,{

        /**
         * @property {String}
         * 定义在小时、分钟和秒之间的分隔符.
         */
        separator : ":",

        /**
         * @property {Boolean}
         * 定义是否显示秒钟信息.
         */
        showSeconds : false,

        /**
         * @property {Number}
         * 初始选中的时间段,0=小时,1=分钟,2=秒.
         */
        highlight : 0
    });

    erajs.ui.Timespinner.parseOptions = function(target){
        var t = $(target);
        return $.extend({},erajs.ui.Spinner.parseOptions(target),
            erajs.ui.parser.parseOptions(t, ["separator", {
                showSeconds : "boolean",
                highlight : "number"
            }])
        );
    };
})();

/*
 * Copyright (c) 2014 www.erayt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 **/
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.ui.Calendar
 * @extends erajs.ui.Calendar.defaults
 *
 * 使用{@link erajs.ui.Calendar.defaults}重写默认值对象.
 *
 * 日历控件显示一个月的日历，允许用户选择日期和移动到下一个或上一个月.
 * 默认情况下，一周的第一天是周日。它可以通过设置{@link #firstDay}属性的值来更改设置.
 *
 * {@img erajs.ui.Calendar/calendar.png}
 *
 * ##创建日历
 *
 * 1、用标签创建日历。
 *
 *      @example
 *      <div id="cd" xtype="calendar" style="width:250px;height:250px;"></div>
 *
 * 2、使用Javascript创建日历.
 *
 *     <div id="cc" style="width:180px;height:180px;"></div>
 *
 *     erajs.create('calendar',{
 *          current:new Date()
 *      });
 *
 * ##日历特殊用法
 *
 * 1、日历天自定义样式
 *
 *      erajs.create('calendar',{
 *	        styler: function(date){
 *		        if (date.getDay() == 1){
 *			        return 'background-color:#ccc';
 *			    // 函数可以返回预定义的css class和预定义的行内样式
 *			    // return {class:'r1', style:{'color:#fff'}};
 *		        } else {
 *			        return '';
 *		        }
 *	        }
 *       });
 *
 * 2、确定是否可以选择日历上的某一天
 *
 *       erajs.create('calendar',{
 *	        validator: function(date){
 *		        if (date.getDay() == 1) {
 *			        return true;
 *		        } else {
 *			        return false;                                }
 *	            }
 *       });
 */
(function(){

    function setSize(self){
        var opts = self.options;
        var target = self.target;
        var t = $(target);
        opts.fit ? $.extend(opts, t._fit()) : t._fit(false);

        var header = t.find('.calendar-header');
        t._outerWidth(opts.width);
        t._outerHeight(opts.height);
        t.find('.calendar-body')._outerHeight(t.height() - header._outerHeight());
    }

    function init(self){
        var opts = self.options;
        var target = self.target;

        $(target).addClass('calendar').html(
                '<div class="calendar-header">' +
                '<div class="calendar-prevmonth"></div>' +
                '<div class="calendar-nextmonth"></div>' +
                '<div class="calendar-prevyear"></div>' +
                '<div class="calendar-nextyear"></div>' +
                '<div class="calendar-title">' +
                '<span>Aprial 2010</span>' +
                '</div>' +
                '</div>' +
                '<div class="calendar-body">' +
                '<div class="calendar-menu">' +
                '<div class="calendar-menu-year-inner">' +
                '<span class="calendar-menu-prev"></span>' +
                '<span><input class="calendar-menu-year" type="text"></input></span>' +
                '<span class="calendar-menu-next"></span>' +
                '</div>' +
                '<div class="calendar-menu-month-inner">' +
                '</div>' +
                '</div>' +
                '</div>'
        );

        $(target).find('.calendar-title span').hover(
            function(){$(this).addClass('calendar-menu-hover');},
            function(){$(this).removeClass('calendar-menu-hover');}
        ).click(function(){
                var menu = $(target).find('.calendar-menu');
                if (menu.is(':visible')){
                    menu.hide();
                } else {
                    showSelectMenus(self);
                }
            });

        $('.calendar-prevmonth,.calendar-nextmonth,.calendar-prevyear,.calendar-nextyear', target).hover(
            function(){$(this).addClass('calendar-nav-hover');},
            function(){$(this).removeClass('calendar-nav-hover');}
        );
        $(target).find('.calendar-nextmonth').click(function(){
            showMonth(self, 1);
        });
        $(target).find('.calendar-prevmonth').click(function(){
            showMonth(self, -1);
        });
        $(target).find('.calendar-nextyear').click(function(){
            showYear(self, 1);
        });
        $(target).find('.calendar-prevyear').click(function(){
            showYear(self, -1);
        });

        $(target).bind('_resize', function(){
            if (opts.fit == true){
                setSize(self);
            }
            return false;
        });
    }

    function showMonth(self, delta){
        var opts = self.options;
        var target = self.target;

        opts.month += delta;
        if (opts.month > 12){
            opts.year++;
            opts.month = 1;
        } else if (opts.month < 1){
            opts.year--;
            opts.month = 12;
        }
        show(self);

        var menu = $(target).find('.calendar-menu-month-inner');

        menu.find('td.calendar-selected').removeClass('calendar-selected');
        menu.find('td:eq(' + (opts.month-1) + ')').addClass('calendar-selected');
    }

    function showYear(self, delta){
        var opts = self.options;
        var target = self.target;
        opts.year += delta;
        show(self);

        var menu = $(target).find('.calendar-menu-year');
        menu.val(opts.year);
    }

    function showSelectMenus(self){
        var opts = self.options;
        var target = self.target;
        $(target).find('.calendar-menu').show();

        if ($(target).find('.calendar-menu-month-inner').is(':empty')){
            $(target).find('.calendar-menu-month-inner').empty();
            var t = $('<table class="calendar-mtable"></table>').appendTo($(target).find('.calendar-menu-month-inner'));
            var idx = 0;
            for(var i=0; i<3; i++){
                var tr = $('<tr></tr>').appendTo(t);
                for(var j=0; j<4; j++){
                    $('<td class="calendar-menu-month"></td>').html(opts.months[idx++]).attr('abbr',idx).appendTo(tr);
                }
            }

            $(target).find('.calendar-menu-prev,.calendar-menu-next').hover(
                function(){$(this).addClass('calendar-menu-hover');},
                function(){$(this).removeClass('calendar-menu-hover');}
            );
            $(target).find('.calendar-menu-next').click(function(){
                var y = $(target).find('.calendar-menu-year');
                if (!isNaN(y.val())){
                    y.val(parseInt(y.val()) + 1);
                    setDate();
                }
            });
            $(target).find('.calendar-menu-prev').click(function(){
                var y = $(target).find('.calendar-menu-year');
                if (!isNaN(y.val())){
                    y.val(parseInt(y.val() - 1));
                    setDate();
                }
            });

            $(target).find('.calendar-menu-year').keypress(function(e){
                if (e.keyCode == 13){
                    setDate(true);
                }
            });

            $(target).find('.calendar-menu-month').hover(
                function(){$(this).addClass('calendar-menu-hover');},
                function(){$(this).removeClass('calendar-menu-hover');}
            ).click(function(){
                    var menu = $(target).find('.calendar-menu');
                    menu.find('.calendar-selected').removeClass('calendar-selected');
                    $(this).addClass('calendar-selected');
                    setDate(true);
                });
        }

        function setDate(hideMenu){
            var menu = $(target).find('.calendar-menu');
            var year = menu.find('.calendar-menu-year').val();
            var month = menu.find('.calendar-selected').attr('abbr');
            if (!isNaN(year)){
                self.options.year = parseInt(year);
                self.options.month = parseInt(month);
                show(self);
            }
            if (hideMenu){menu.hide()}
        }

        var body = $(target).find('.calendar-body');
        var sele = $(target).find('.calendar-menu');
        var seleYear = sele.find('.calendar-menu-year-inner');
        var seleMonth = sele.find('.calendar-menu-month-inner');

        seleYear.find('input').val(opts.year).focus();
        seleMonth.find('td.calendar-selected').removeClass('calendar-selected');
        seleMonth.find('td:eq('+(opts.month-1)+')').addClass('calendar-selected');

        sele._outerWidth(body._outerWidth());
        sele._outerHeight(body._outerHeight());
        seleMonth._outerHeight(sele.height() - seleYear._outerHeight());
    }

    function getWeeks(self, year, month){
        var opts = self.options;
        var dates = [];
        var lastDay = new Date(year, month, 0).getDate();
        for(var i=1; i<=lastDay; i++) dates.push([year,month,i]);

        // group date by week
        var weeks = [], week = [];
//		var memoDay = 0;
        var memoDay = -1;
        while(dates.length > 0){
            var date = dates.shift();
            week.push(date);
            var day = new Date(date[0],date[1]-1,date[2]).getDay();
            if (memoDay == day){
                day = 0;
            } else if (day == (opts.firstDay==0 ? 7 : opts.firstDay) - 1){
                weeks.push(week);
                week = [];
            }
            memoDay = day;
        }
        if (week.length){
            weeks.push(week);
        }

        var firstWeek = weeks[0];
        if (firstWeek.length < 7){
            while(firstWeek.length < 7){
                var firstDate = firstWeek[0];
                var date = new Date(firstDate[0],firstDate[1]-1,firstDate[2]-1)
                firstWeek.unshift([date.getFullYear(), date.getMonth()+1, date.getDate()]);
            }
        } else {
            var firstDate = firstWeek[0];
            var week = [];
            for(var i=1; i<=7; i++){
                var date = new Date(firstDate[0], firstDate[1]-1, firstDate[2]-i);
                week.unshift([date.getFullYear(), date.getMonth()+1, date.getDate()]);
            }
            weeks.unshift(week);
        }

        var lastWeek = weeks[weeks.length-1];
        while(lastWeek.length < 7){
            var lastDate = lastWeek[lastWeek.length-1];
            var date = new Date(lastDate[0], lastDate[1]-1, lastDate[2]+1);
            lastWeek.push([date.getFullYear(), date.getMonth()+1, date.getDate()]);
        }
        if (weeks.length < 6){
            var lastDate = lastWeek[lastWeek.length-1];
            var week = [];
            for(var i=1; i<=7; i++){
                var date = new Date(lastDate[0], lastDate[1]-1, lastDate[2]+i);
                week.push([date.getFullYear(), date.getMonth()+1, date.getDate()]);
            }
            weeks.push(week);
        }

        return weeks;
    }

    function show(self){
        var opts = self.options;
        var target = self.target;
        if (opts.current && !opts.validator.call(self, opts.current)){
            opts.current = null;
        }

        var now = new Date();
        var todayInfo = now.getFullYear()+','+(now.getMonth()+1)+','+now.getDate();
        var currentInfo = opts.current ? (opts.current.getFullYear()+','+(opts.current.getMonth()+1)+','+opts.current.getDate()) : '';
        // calulate the saturday and sunday index
        var saIndex = 6 - opts.firstDay;
        var suIndex = saIndex + 1;
        if (saIndex >= 7) saIndex -= 7;
        if (suIndex >= 7) suIndex -= 7;
        var ym = opts.months[opts.month-1] + ' ' + opts.year;
        $(target).find('.calendar-title span').html(ym);

        var body = $(target).find('div.calendar-body');
        body.children('table').remove();

        var data = ['<table class="calendar-dtable" cellspacing="0" cellpadding="0" border="0">'];
        data.push('<thead><tr>');
        for(var i=opts.firstDay; i<opts.weeks.length; i++){
            data.push('<th>'+opts.weeks[i]+'</th>');
        }
        for(var i=0; i<opts.firstDay; i++){
            data.push('<th>'+opts.weeks[i]+'</th>');
        }
        data.push('</tr></thead>');

        data.push('<tbody>');
        var weeks = getWeeks(self, opts.year, opts.month);
        for(var i=0; i<weeks.length; i++){
            var week = weeks[i];
            var cls = '';
            if (i == 0){cls = 'calendar-first';}
            else if (i == weeks.length - 1){cls = 'calendar-last';}
            data.push('<tr class="' + cls + '">');
            for(var j=0; j<week.length; j++){
                var day = week[j];
                var s = day[0]+','+day[1]+','+day[2];
                var dvalue = new Date(day[0], parseInt(day[1])-1, day[2]);
                var d = opts.formatter.call(self, dvalue);
                var css = opts.styler.call(self, dvalue);
                var classValue = '';
                var styleValue = '';
                if (typeof css == 'string'){
                    styleValue = css;
                } else if (css){
                    classValue = css['class'] || '';
                    styleValue = css['style'] || '';
                }

                var cls = 'calendar-day';
                if (!(opts.year == day[0] && opts.month == day[1])){
                    cls += ' calendar-other-month';
                }
                if (s == todayInfo){cls += ' calendar-today';}
                if (s == currentInfo){cls += ' calendar-selected';}
                if (j == saIndex){cls += ' calendar-saturday';}
                else if (j == suIndex){cls += ' calendar-sunday';}
                if (j == 0){cls += ' calendar-first';}
                else if (j == week.length-1){cls += ' calendar-last';}

                cls += ' ' + classValue;
                if (!opts.validator.call(self, dvalue)){
                    cls += ' calendar-disabled';
                }

                data.push('<td class="' + cls + '" abbr="' + s + '" style="' + styleValue + '">' + d + '</td>');
            }
            data.push('</tr>');
        }
        data.push('</tbody>');
        data.push('</table>');

        body.append(data.join(''));

        var t = body.children('table.calendar-dtable').prependTo(body);

        t.find('td.calendar-day:not(.calendar-disabled)').hover(
            function(){$(this).addClass('calendar-hover');},
            function(){$(this).removeClass('calendar-hover');}
        ).click(function(){
                var oldValue = opts.current;
                t.find('.calendar-selected').removeClass('calendar-selected');
                $(this).addClass('calendar-selected');
                var parts = $(this).attr('abbr').split(',');
                opts.current = new Date(parts[0], parseInt(parts[1])-1, parts[2]);
                opts.onSelect.call(self, opts.current);
                if (!oldValue || oldValue.getTime() != opts.current.getTime()){
                    opts.onChange.call(self, opts.current, oldValue);
                }
            });
    }

    erajs.ui.Calendar = function(options){
        options = options || {};
        var target = options.target;

        if(!target){
            var contentEl = options.contentEl;
            if(contentEl){ target = $(contentEl)[0];}
        }

        if(target){
            this.target = target;
            this.options = $.extend({}, erajs.ui.Calendar.defaults,
                erajs.ui.Calendar.parseOptions(target),options);

            this.id = this.options.id;

            init(this);
        }

        this._render(target);
    };

    erajs.ui.Calendar.prototype = {

        /**
         * 销毁组件.
         */
        destroy : function(){
            this.target.remove();
            erajs.destroy(this);
        },

        /**
         * 更新组件参数配置项.
         * @param {erajs.ui.Calendar.defaults} options
         */
        calendar : function (options) {
            var me = this;
            var opts = $.extend({},me.options, options);
            me.options = opts;
            me._render();
        },

        /**
         * 调整日历大小.
         * @param {Object} options
         * @param {Number/String} [options.width] 新的日历宽度.
         * @param {Number/String} [options.height] 新的日历高度.
         */
        resize : function(options){
            var me = this;
            if (options) {
                $.extend(me.options,{
                    width: options.width,
                    height: options.height
                });
            }
            setSize(this);
        },

        /**
         * 移动日历到指定日期.
         * 示例代码：
         *
         *      var calendar = erajs.getCmp('cc');
         *      calendar.moveTo(new Date(2014,7,1));
         *
         * @param date
         */
        moveTo : function(date){
            var opts = this.options;
            if (opts.validator.call(this, date)){
                var oldValue = opts.current;
                this.calendar({
                    year: date.getFullYear(),
                    month: date.getMonth()+1,
                    current: date
                });
                if (!oldValue || oldValue.getTime() != date.getTime()){
                    opts.onChange.call(this, opts.current, oldValue);
                }
            }
        },

        _render : function(target){
            var opts = this.options;
            if (opts.border == false){
               $(target).addClass('calendar-noborder');
            }
            setSize(this);
            show(this);
            $(target).find('div.calendar-menu').hide();	// hide the calendar menu
        }
    };

    /**
     * @class erajs.ui.Calendar.defaults
     */
    erajs.ui.Calendar.defaults = {

        /**
         * @property {String} 组件唯一标识.
         */
        id : null,

        /**
         * @property {String} 关联元素id
         */
        contentEl : null,

        /**
         * @property {Number} 日历控件宽度.
         */
        width:180,

        /**
         * @property {Number} 日历控件高度.
         */
        height:180,

        /**
         * @property {Boolean} 当设置为true的时候，将设置日历控件大小自适应父容器.
         */
        fit:false,

        /**
         * @property {Boolean} 定义是否显示边框.
         */
        border:true,

        /**
         * @property {Number} 定义一周的第一天是星期几。0=星期日、1=星期一 等.
         */
        firstDay:0,

        /**
         * @property {Array} 显示的周列表内容.
         */
        weeks:['S','M','T','W','T','F','S'],

        /**
         * @property {Array} 示的月列表内容.
         */
        months:['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],

        /**
         * @property {String} 年日历.当前年份（4位数）
         * 下面的例子显示了如何使用指定的年份和月份创建一个日历:
         *
         *      <div id="cc" xtype="calendar" data-options="year:2012,month:6" />
         */
        year:new Date().getFullYear(),

        /**
         * @property {String} 月日历.当前月份（从1开始）
         */
        month:new Date().getMonth()+1,

        /**
         * @property {Function} 当前日期
         */
        current:(function(){
            var d = new Date();
            return new Date(d.getFullYear(), d.getMonth(), d.getDate());
        })(),

        /**
         * @property {Function}
         * 日期格式化函数.
         * @param {Date} date
         * @returns {number} 返回日期值.
         */
        formatter:function(date){return date.getDate()},

        /**
         * @property {Function}
         * 日历天的样式函数，返回行内样式或CSS样式表的Class名称.
         *
         *      erajs.create('calendar',{
         *          contentEl : '#cc',
	     *          styler: function(date){
		 *               if (date.getDay() == 1){
		 * 	                  return 'background-color:#ccc';
		 * 	                // the function can return predefined css class and inline style
		 * 	            // return {class:'r1', style:{'color:#fff'}};
		 *              } else {
		 *              	return '';
		 *              }
	     *          }
         *      });
         *
         * @param date
         * @returns {string}
         */
        styler:function(date){return ''},

        validator:function(date){return true},

        /**
         * @event  在用户选择一天的时候触发.
         * @param {String} date
         */
        onSelect: function(date){},

        /**
         * @event 在用户更改日期的时候触发.
         * @param {String} newDate
         * @param {String} oldDate
         */
        onChange: function(newDate, oldDate){}
    };

    erajs.ui.Calendar.parseOptions = function(target){
        var t = $(target);
        return $.extend({}, erajs.ui.parser.parseOptions(t, [
            'id','width','height',{firstDay:'number',fit:'boolean',border:'boolean'}
        ]));
    };

})();
/*
 * Copyright (c) 2014 www.erayt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 **/
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.ui.Datebox
 * @extends erajs.ui.Datebox.defaults
 *
 * 扩展自{@link erajs.ui.Combo.defaults}.使用{@link erajs.ui.Datebox.defaults}重写默认值对象.
 *
 * 日期输入框结合了一个可编辑的文本框控件和允许用户选择日期的下拉日历面板控件.
 * 选择的日期会自动转变为一个有效的日期然后填充到文本框中,选定的日期也可以被格式化为预定格式.
 *
 * {@img erajs.ui.Datebox/datebox.png}
 *
 * ##创建日期输入框
 *
 * 1、用标签创建日期输入框.
 *
 *      @example
 *      <input id="db" xtype="datebox" data-options="
 *          value : '2014/07/25',
 *          editable : false,
 *          onSelect : function(date){
 *	            console.info(date.getDate());
 *	        }
 *      "></input>
 *
 * 2、使用javascript创建日期输入框.
 *
 *      <input id="db"</input>
 *
 *      erajs.create('datebox',{
 *          contentEl : '#db'
 *      });
 */
(function(){

    //输入值时触发
    function doQuery(self, q){
        setValue(self, q, true);
    }

    //创建combo
    function createBox(self){
        var opts = self.options;
        var target = self.target;

        $(target).addClass('datebox-f');

        var combo = new erajs.ui.Combo($.extend({}, opts, {
            onShowPanel:function(){
                setCalendar();
                setValue(self,this.getText(), true);
                opts.onShowPanel.call(self);
            },
            onHidePanel : function(){
                var menu = $(this.panel.panel).find('.calendar-menu');
                menu.hide();
            },
            keyHandler: {
                up:function(e){},
                down:function(e){},
                left: function(e){},
                right: function(e){},
                enter:function(e){
                    doEnter(self);
                },
                query:function(q,e){
                    doQuery(self,q);
                }
            }
        }));

        self.combo = combo;
        combo.combo.addClass('datebox');

        //如果没有创建calendar，那么创建它
        if (!self.calendar){
            createCalendar();
        }
        setValue(self, opts.value);

        //创建日历组件
        function createCalendar(){
            var panel = combo.panel;
            var ptarget = panel.panel;

            ptarget.css('overflow','hidden');
            panel.onBeforeDestroy = function(){
                var sc = $(this).find('.calendar-shared');
                if (sc.length){
                    sc.insertBefore(sc[0].pholder);
                }
            };
            var cc = $('<div class="datebox-calendar-inner"></div>').appendTo(panel.target);

            var calendar = null;
            if (opts.sharedCalendar){
                var sc = $(opts.sharedCalendar);
                if (!sc[0].pholder){
                    sc[0].pholder = $('<div class="calendar-pholder" style="display:none"></div>').insertAfter(sc);
                }

                sc.addClass('calendar-shared').appendTo(cc);
                if (!sc.hasClass('calendar')){
                    calendar = new erajs.ui.Calendar({
                        target : sc[0]
                    });
                }else{
                    calendar = new erajs.ui.Calendar({
                        contentEl : opts.sharedCalendar
                    });
                }
                self.calendar = calendar;
            } else {
                var tc = $('<div></div>').appendTo(cc);
                calendar = new erajs.ui.Calendar({
                    target : tc[0]
                });
                self.calendar = calendar;
            }

            $.extend(calendar.options, {
                fit:true,
                border:false,
                onSelect:function(date){
                    //选中日历中日期，设置值，并隐藏面板，同时绑定onSelect事件
                    setValue(self, date);
                    self.combo.hidePanel();
                    self.options.onSelect.call(self, date);
                }
            });

            var button = $('<div class="datebox-button"><table cellspacing="0" cellpadding="0" style="width:100%"><tr></tr></table></div>').appendTo(panel.target);
            var tr = button.find('tr');
            for(var i=0; i<opts.buttons.length; i++){
                var td = $('<td></td>').appendTo(tr);
                var btn = opts.buttons[i];
                var t = $('<a href="javascript:void(0)"></a>')
                    .html($.isFunction(btn.text) ? btn.text(self) : btn.text)
                    .appendTo(td);
                t.bind('click', {self: self, handler: btn.handler}, function(e){
                    e.data.handler.call(this, e.data.self);
                });
            }
            tr.find('td').css('width', (100/opts.buttons.length)+'%');
        }

        function setCalendar(){
            var panel = combo.panel;
            var ptarget = panel.panel;
            var cc = ptarget.find('div.datebox-calendar-inner');
            ptarget.children()._outerWidth(ptarget.width());
            $(self.calendar.target).appendTo(cc);
            if (opts.panelHeight != 'auto'){
                var height = ptarget.height();
                ptarget.children().not(cc).each(function(){
                    height -= $(this).outerHeight();
                });
                cc._outerHeight(height);
            }
            self.calendar.resize();
        }
    }

    // 按回车键时触发
    function doEnter(self){
        var opts = self.options;
        var current = self.calendar.options.current;
        if (current){
            setValue(self, erajs.isDate(current) ? opts.formatter.call(self, current) : current);
            self.combo.hidePanel();
        }
    }

    function setValue(self, value, remainText){
        var opts = self.options;
        var combo = self.combo;
        var calendar = self.calendar;

        opts.value = value;

        //手动输入时，定位到制定的日期
        if(erajs.isDate(value)){
            calendar.moveTo(value);
        }else{
            calendar.moveTo(opts.parser.call(self, value));
        }

        if (!remainText){
            if (value){
                var current = calendar.options.current;
                value = erajs.isDate(current) ? opts.formatter.call(self,current) : current;
                combo.setText(value);

                if(opts.submitFormat && opts.submitFormat !== opts.format){
                    var dt = erajs.Date.parse(value,opts.format),
                        value = erajs.Date.format(dt,opts.submitFormat);
                }

                opts.value = value;
                combo.setValue(value);

            } else {
                combo.setText(value);
            }
        }else{
            combo.setValue(value);
        }
    }

    erajs.ui.Datebox = function(options){
        options = options || {};
        var target = options.target;
        if(!target){
            var contentEl = options.contentEl;
            if(contentEl){ target = $(contentEl)[0];}
        }
        if(target){
            this.target = target;
            this.options = $.extend({}, erajs.ui.Datebox.defaults,
                erajs.ui.Datebox.parseOptions(target),options);

            this.id = this.options.id;

        }

        this._render(target);
    };

    erajs.ui.Datebox.prototype = {

        /**
         * 获取日期输入框的值.
         */
        getValue : function(){
            return this.options.value;
        },

        /**
         * 设置日期输入框的值.
         */
        setValue : function(value){
            setValue(this,value);
        },

        /**
         * 重置日期输入框的值.
         */
        reset : function(){
            var self = this;
            var opts = self.combo.options;
            self.setValue(opts.originalValue);
        },

        /**
         * 清空日期输入框的值.
         */
        clear : function(){
            this.options.value = "";
            this.combo.clear();
        },

        /**
         * 销毁组件.
         */
        destroy : function(){
            this.combo.destroy();
            erajs.destroy(this);
        },

        resize : function(width){
            this.combo.resize(width);
        },

        hidePanel : function(){
            this.combo.hidePanel();
        },

        _render : function(){
            createBox(this);
        }
    };

    /**
     * @class erajs.ui.Datebox.defaults
     * @extends erajs.ui.Combo.defaults
     */
    erajs.ui.Datebox.defaults = $.extend({}, erajs.ui.Combo.defaults, {

        /**
         * @removed
         * @property {Boolean} [multiple=false]
         * 定义是否支持多选.
         */

        /**
         * @property {Number} 下拉日历面板宽度.
         */
        panelWidth:180,

        /**
         * @property {String/Number} 下拉日历面板高度.
         */
        panelHeight:'auto',

        sharedCalendar:null,

        /**
         * @property {String} 当天按钮显示文本.
         */
        currentText:'Today',

        /**
         * @property {String} 关闭按钮显示文本.
         */
        closeText:'Close',

        /**
         * @property {String} 确定按钮显示文本.
         */
        okText:'Ok',

        /**
         * @property {String} format
         * 默认日期格式的字符串,格式{@link erajs.Date#parse}必须是有效的.
         */
        format : 'Y/m/d',

        /**
         * @property {String} submitFormat
         * 提交到服务端的日期字符串格式.格式{@link erajs.Date#parse}必须是有效的.
         * Defaults to {@link #format}.
         */
        submitFormat : '',

        /**
         * @private
         * @property {Function}
         * 该函数用于格式化日期，它有一个'date'参数并且会返回一个字符串类型的值;
         * @param {Date} date
         * @returns {string} 格式化后的日期.
         */
        formatter:function(date){
            var me = this,
                format = me.format || me.options.format;

            if(!erajs.isDate(date)){
                return date;
            }
            return erajs.Date.format(date,format);
        },

        /**
         * @private
         * @property {Function}
         * 该函数用于解析一个日期字符串，它有一个'date'字符串参数并且会返回一个日期类型的值。
         * @param {String} s 字符串类型日期.
         * @returns {Date} 解析后的日期.
         */
        parser:function(s){
            if (!s) {
                return new Date();
            }
            if(erajs.isDate(s)){
                return s;
            }

            var me = this,
                submitFormat = me.submitFormat || me.options.submitFormat,
                format = me.format || me.options.format,
                val = safeParse(s,submitFormat),
                altFormatsArray = [],
                i = 0,
                len;

            if(!val){
                if(submitFormat){
                    altFormatsArray.push(submitFormat);
                }
                if(format){
                    altFormatsArray.push(format);
                }

                len = altFormatsArray.length;
                for(; i < len && !val; ++i){
                    val = safeParse(s,altFormatsArray[i]);
                }
            }

            function safeParse(value,format){
                return erajs.Date.parse(value,format);
            }
            return  val;
        },

        buttons:[{
            text: function(self){
                return self.options.currentText;
            },
            handler: function(self){
                var calendar = self.calendar;
                $.extend(calendar.options, {
                    year:new Date().getFullYear(),
                    month:new Date().getMonth()+1,
                    current:new Date()
                });
                doEnter(self);
            }
        },{
            text: function(self){
                return self.options.closeText;
            },
            handler: function(self){
                self.combo.hidePanel();
            }
        }],

        /**
         * @event
         * 在用户选择了一个日期的时候触发
         * @param {Data} date
         */
        onSelect:function(date){}
    });

    erajs.ui.Datebox.parseOptions = function(target){
        var t = $(target);
        return $.extend({}, erajs.ui.Combo.parseOptions(target),
            erajs.ui.parser.parseOptions(t, ['sharedCalendar']
            ));
    };

})();
/*
 * Copyright (c) 2014 www.erayt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 **/
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.ui.Datetimebox
 * @extends erajs.ui.Datetimebox.defaults
 *
 * 扩展自{@link erajs.ui.Datebox.defaults}，使用{@link erajs.ui.Datetimebox.defaults}重写默认值对象.
 *
 * 和日期输入框类似，日期时间输入框允许用户选择日期和指定的时间并按照指定的输出格式显示.
 * 相比日期输入框,它在下拉面板中添加了一个时间微调器.
 *
 * {@img erajs.ui.Datetimebox/datetimebox.png}
 *
 * ##创建日期时间输入框
 *
 * 1、用标签创建日期时间输入框.
 *
 *      @example
 *      <input id="dtb" xtype="datetimebox" style="width:200px">
 *
 * 2、使用javascript创建日期时间输入框.
 *
 *      <input id="dt" name="birthday"></input>
 *
 *      erajs.create('datetimebox',{
 *          contentEl : '#dt',
 *          value: '2014/07/17 12:30:20'
 *      });
 */
(function(){

    function init(self){
        var opts = self.options;
        var target = self.target;
        var options = $.extend({}, opts, {
            onShowPanel : function() {
                var value = self.getValue();
                setValue(self, value, true);
                opts.onShowPanel.call(self);
            },
            buttons : [{
                text : function(self) {
                    return self.options.currentText;
                },
                handler : function() {
                    var calendar = self.datebox.calendar;
                    $.extend(calendar.options,{
                        year : new Date().getFullYear(),
                        month : new Date().getMonth() + 1,
                        current : new Date()
                    });
                    doEnter(self);
                }
            }, {
                text : function(self) {
                    return self.options.okText;
                },
                handler : function() {
                    doEnter(self);
                }
            }, {
                text : function(self) {
                    return self.options.closeText;
                },
                handler : function() {
                    self.datebox.combo.hidePanel();
                    self.options.onHidePanel.call(self);
                }
            }],
            formatter : erajs.ui.Datebox.defaults.formatter,
            parser : erajs.ui.Datebox.defaults.parser
        });

        var datebox = new erajs.ui.Datebox(options);
        self.datebox = datebox;

        $.extend(datebox.combo.options,{
            keyHandler: {
                up:function(e){},
                down:function(e){},
                left: function(e){},
                right: function(e){},
                enter:function(e){
                    doEnter(self);
                },
                query:function(q,e){
                    doQuery(self,q);
                }
            }
        });

        $(target).removeClass("datebox-f").addClass("datetimebox-f");

        $.extend(datebox.calendar.options,{
            onSelect : function(date) {
                opts.onSelect.call(self, date);
            }
        });

        var panel = self.datebox.combo.panel;
        var ptarget = panel.panel;
        var spinnerTarget = "";
        if (!self.spinner) {
            var p = $("<div style=\"padding:2px\"><input style=\"width:80px\"></div>").insertAfter(ptarget.find("div.datebox-calendar-inner"));
            spinnerTarget = p.children("input");
        }

        var tsOptions = {
            target : spinnerTarget,
            showSeconds : opts.showSeconds,
            separator : opts.timeSeparator
        };

        var spinner = new erajs.ui.Timespinner(tsOptions);
        self.spinner = spinner;

        spinnerTarget.unbind(".datetimebox")
            .bind("mousedown.datetimebox", function(e) {
            e.stopPropagation();
        });
        setValue(self, opts.value);
    }

    function setValue(self, value, remainText){
        var opts = self.options;
        var datebox = self.datebox;
        var combo = datebox.combo;
        opts.value = value;

        combo.setValue(value);
        if (!remainText) {
            if (value) {
                var val = value;
                if(!erajs.isDate(value)){
                    val = opts.parser.call(self, value);
                }
                var fval = opts.formatter.call(self, val);
                combo.setText(fval);
                opts.value = fval;

                if(opts.submitFormat && opts.submitFormat !== opts.format){
                    var dt = erajs.Date.parse(fval,opts.format);
                    opts.value = erajs.Date.format(dt,opts.submitFormat);
                }
                combo.setValue(opts.value);
            } else {
                combo.setText(value);
            }
        }

        var calendar = datebox.calendar;
        var spinner = self.spinner;

        //手动输入时，定位到制定的日期
        if(erajs.isDate(value)){
            calendar.moveTo(value);
        }else{
            value = opts.parser.call(self, value);
            if(!value){return;}
            calendar.moveTo(value);
        }

        spinner.setValue(_17(value));

        function _17(value) {
            function _19(_1a) {
                return (_1a < 10 ? "0" : "") + _1a;
            };
            var tt = [_19(value.getHours()), _19(value.getMinutes())];
            if (opts.showSeconds) {
                tt.push(_19(value.getSeconds()));
            }
            return tt.join(spinner.options.separator);
        };
    }

    function getDate(self) {
        var datebox = self.datebox;
        var calendar = datebox.calendar;
        var spinner = self.spinner;

        var current = calendar.options.current;
        return new Date(current.getFullYear(), current.getMonth(),
            current.getDate(), spinner.getHours(),
            spinner.getMinutes(),
            spinner.getSeconds());
    }

    function doEnter(self){
        var combo = self.datebox.combo;
        var opts = self.options;
        var value = getDate(self);
        setValue(self, opts.formatter.call(self, value));
        combo.hidePanel();
        self.options.onHidePanel.call(self);
    }

    function doQuery(self, q){
        setValue(self, q, true);
    }

    erajs.ui.Datetimebox = function(options){
        options = options || {};
        var target = options.target;
        if(!target){
            var contentEl = options.contentEl;
            if(contentEl){ target = $(contentEl)[0];}
        }
        if(target){
            this.target = target;
            this.options = $.extend({}, erajs.ui.Datetimebox.defaults,
                erajs.ui.Datetimebox.parseOptions(target),options);

            this.id = this.options.id;
        }

        this._render();
    };

    erajs.ui.Datetimebox.prototype = {

        /**
         * 重置值.
         */
        reset : function(){
            var self = this;
            var opts = self.datebox.combo.options;
            self.setValue(opts.originalValue);
        },

        /**
         * 清空组件值.
         */
        clear : function(){
            this.options.value = "";
            this.datebox.combo.clear();
        },

        hidePanel : function(){
            this.datebox.combo.hidePanel();
        },

        /**
         * 设置值.
         * @param {String} value
         */
        setValue : function(value){
            setValue(this,value);
        },

        /**
         * 获取值
         * @returns {String}
         */
        getValue : function(){
            return this.options.value;
        },

        /**
         * 销毁组件.
         */
        destroy : function(){
            this.datebox.combo.destroy();
            erajs.destroy(this);
        },

        _render : function(){
            init(this);
        }
    };

    /**
     * @class erajs.ui.Datetimebox.defaults
     * @extends erajs.ui.Datebox.defaults
     */
    erajs.ui.Datetimebox.defaults = $.extend({}, erajs.ui.Datebox.defaults, {

        /**
         * @property {Boolean}
         * 定义是否显示秒钟信息.
         */
        showSeconds : true,

        /**
         * @property {String}
         * 定义在小时、分钟和秒之间的时间分割字符.
         */
        timeSeparator : ":",

        /**
         * @property {String} format
         * 默认日期格式的字符串,格式{@link erajs.Date#parse}必须是有效的.
         */
        format : 'Y/m/d H:i:s',

        /**
         * @property {String} submitFormat
         * 提交到服务端的日期字符串格式.格式{@link erajs.Date#parse}必须是有效的.
         * Defaults to {@link #format}.
         */
        submitFormat : ''
    });

    erajs.ui.Datetimebox.parseOptions = function(target){
        var t = $(target);
        return $.extend({}, erajs.ui.Datebox.parseOptions(target), erajs.ui.parser.parseOptions(t,
            ["timeSeparator", {
            showSeconds : "boolean"
        }]));
    };
})();
/*
 * Copyright (c) 2014 www.erayt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 **/
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.ui.Pagination
 * @extends erajs.ui.Pagination.defaults
 *
 * 使用{@link erajs.ui.Pagination.defaults}重写默认值对象。
 *
 * 这个分页允许用户导航数据页面。它支持可配置选项页面导航和页面长度的选择。用户可以添加自定义按钮到分页,增强其功能。
 *
 * {@img erajs.ui.Pagination/pagination.png}
 *
 * ## 依赖关系
 *
 * - {@link erajs.ui.Button Button}
 *
 * ## 使用案例
 *
 * 创建分页标记。
 *
 *      @example
 *      <div id="pp" xtype="pagination" data-options="total:2000,pageSize:10"
 *          style="background:#efefef;border:1px solid #ccc;"></div>
 *
 */
(function(){

    function init(self) {
        var opts = self.options;
        var target = self.target;
        var bb = self.bb = {};
        var pgHtml = $(target).addClass("pagination")
            .html("<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><tr></tr></table>");
        var tr = pgHtml.find("tr");
        var options = $.extend([], opts.layout);
        if (!opts.showPageList) {
            removeOptions(options, "list");
        }
        if (!opts.showRefresh) {
            removeOptions(options, "refresh");
        }

        //shift() 方法用于把数组的第一个元素从其中删除，并返回第一个元素的值。
        if (options[0] == "sep") {
            options.shift();
        }
        if (options[options.length - 1] == "sep") {
            options.pop();
        }
        for (var i = 0; i < options.length; i++) {
            var option = options[i];
            if (option == "list") {
                var ps = $("<select class=\"pagination-page-list\"></select>");
                ps.bind("change", function() {
                    opts.pageSize = parseInt($(this).val());
                    opts.onChangePageSize.call(self, opts.pageSize);
                    select(self, opts.pageNumber);
                });
                for (var j = 0; j < opts.pageList.length; j++) {
                    var val = opts.pageList[j];
                    ps.append($("<option>").val(val).text(val));
                }
                $("<td></td>").append(ps).appendTo(tr);
            } else {
                if (option == "sep") {
                    $("<td><div class=\"pagination-btn-separator\"></div></td>").appendTo(tr);
                } else {
                    if (option == "first") {
                        bb.first = createLink("first");
                    } else {
                        if (option == "prev") {
                            bb.prev = createLink("prev");
                        } else {
                            if (option == "next") {
                                bb.next = createLink("next");
                            } else {
                                if (option == "last") {
                                    bb.last = createLink("last");
                                } else {
                                    if (option == "manual") {
                                        $("<span style=\"padding-left:6px;\"></span>")
                                            .html(opts.beforePageText).appendTo(tr).wrap("<td></td>");
                                        bb.num = $("<input class=\"pagination-num\" type=\"text\" value=\"1\" size=\"2\">")
                                            .appendTo(tr).wrap("<td></td>");
                                        bb.num.unbind(".pagination").bind("keydown.pagination", function(e) {
                                            if (e.keyCode == 13) {
                                                var _a = parseInt($(this).val()) || 1;
                                                select(self, _a);
                                                return false;
                                            }
                                        });
                                        bb.after = $("<span style=\"padding-right:6px;\"></span>").appendTo(tr).wrap("<td></td>");
                                    } else {
                                        if (option == "refresh") {
                                            bb.refresh = createLink("refresh");
                                        } else {
                                            if (option == "links") {
                                                $("<td class=\"pagination-links\"></td>").appendTo(tr);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        //自定义button
        if (opts.buttons) {
            $("<td><div class=\"pagination-btn-separator\"></div></td>").appendTo(tr);
            if ($.isArray(opts.buttons)) {
                for (var i = 0; i < opts.buttons.length; i++) {
                    var _b = opts.buttons[i];
                    if (_b == "-") {
                        $("<td><div class=\"pagination-btn-separator\"></div></td>").appendTo(tr);
                    } else {
                        var td = $("<td></td>").appendTo(tr);
                        var aLink = $("<div></div>").appendTo(td);
                        aLink[0].onclick = eval(_b.handler ||
                            function() {
                            });
                        new erajs.ui.Button($.extend({}, _b, {
                            target : aLink[0],
                            plain : true
                        }));
                    }
                }
            } else {
                var td = $("<td></td>").appendTo(tr);
                $(opts.buttons).appendTo(td).show();
            }
        }
        $("<div class=\"pagination-info\"></div>").appendTo(pgHtml);
        $("<div style=\"clear:both;\"></div>").appendTo(pgHtml);
        function createLink(option) {
            var _d = opts.nav[option];
            var buttonTarget = $("<div></div>").appendTo(tr);
            buttonTarget.wrap("<td></td>");

            var button = new erajs.ui.Button({
                target : buttonTarget,
                iconCls : _d.iconCls,
                plain : true
            });

            buttonTarget.unbind(".pagination").bind("click.pagination", function() {
                _d.handler.call(self);
            });
            return button;
        };

        function removeOptions(options, param) {
            var isIn = $.inArray(param, options);
            if (isIn >= 0) {
                options.splice(isIn, 1);
            }
            return options;
        };
    }

    function select(self, pageNumber) {
        var opts = self.options;
        refresh(self, {
            pageNumber : pageNumber
        });
        opts.onSelectPage.call(self, opts.pageNumber, opts.pageSize);
    }

    function refresh(self, options) {
        var opts = self.options;
        var bb = self.bb;
        var target = self.target;

        $.extend(opts, options || {});
        var ps = $(target).find("select.pagination-page-list");
        if (ps.length) {
            ps.val(opts.pageSize + "");
            opts.pageSize = parseInt(ps.val());
        }
        var pm = Math.ceil(opts.total / opts.pageSize) || 1;
        if (opts.pageNumber < 1) {
            opts.pageNumber = 1;
        }
        if (opts.pageNumber > pm) {
            opts.pageNumber = pm;
        }
        if (bb.num) {
            bb.num.val(opts.pageNumber);
        }
        if (bb.after) {
            bb.after.html(opts.afterPageText.replace(/{pages}/, pm));
        }
        var td = $(target).find("td.pagination-links");
        if (td.length) {
            td.empty();
            var _1a = opts.pageNumber - Math.floor(opts.links / 2);
            if (_1a < 1) {
                _1a = 1;
            }
            var _1b = _1a + opts.links - 1;
            if (_1b > pm) {
                _1b = pm;
            }
            _1a = _1b - opts.links + 1;
            if (_1a < 1) {
                _1a = 1;
            }
            for (var i = _1a; i <= _1b; i++) {
                var a = $("<div></div>").appendTo(td);
                var lbutton = new erajs.ui.Button({
                    target : a[0],
                    plain : true,
                    text : i
                });

                if (i == opts.pageNumber) {
                    lbutton.select();
                } else {
                    a.unbind(".pagination").bind("click.pagination", {
                        pageNumber : i
                    }, function(e) {
                        select(self, e.data.pageNumber);
                    });
                }
            }
        }
        var displayMsg = opts.displayMsg;
        displayMsg = displayMsg.replace(/{from}/, opts.total == 0 ? 0 : opts.pageSize * (opts.pageNumber - 1) + 1);
        displayMsg = displayMsg.replace(/{to}/, Math.min(opts.pageSize * (opts.pageNumber), opts.total));
        displayMsg = displayMsg.replace(/{total}/, opts.total);
        $(target).find("div.pagination-info").html(displayMsg);

        var firstBtn = bb.first;
        if (firstBtn) {
            firstBtn._setDisabled(opts.pageNumber == 1);
        }
        var prevBtn = bb.prev;
        if (prevBtn) {
            prevBtn._setDisabled(opts.pageNumber == 1);
        }
        var nextBtn = bb.next;
        if (nextBtn) {
            nextBtn._setDisabled(opts.pageNumber == pm);
        }
        var lastBtn = bb.last;
        if (lastBtn) {
            lastBtn._setDisabled(opts.pageNumber == pm);
        }
        load(self, opts.loading);
    }

    function load(self, loading) {
        var opts = self.options;
        opts.loading = loading;
        if (opts.showRefresh && self.bb.refresh) {
            var refreshButton = self.bb.refresh;
            var iconCls = (opts.loading ? "pagination-loading" : "pagination-load");
            refreshButton.setIcon(iconCls);
        }
    }

    erajs.ui.Pagination = function(options){
        options = options || {};
        var target = options.target;
        if (!target) {
            var contentEl = options.contentEl;
            if (contentEl) {
                target = $(contentEl)[0];
            }
        }
        if(target){
            this.target = target;
            this.options = $.extend({}, erajs.ui.Pagination.defaults,
                erajs.ui.Pagination.parseOptions(target),options);

            this.id = this.options.id;
        }
        this._render(target);
    };

    erajs.ui.Pagination.prototype = {

        pagination : function(options){
            var opts = this.options;
            $.extend(opts,options);
            this._render();
        },

        /**
         * 提醒分页插件正在载入.
         */
        loading : function(){
            load(this,true);
        },

        /**
         * 提醒分页插件已经载入.
         */
        loaded : function(){
            load(this,false);
        },

        /**
         * 刷新并显示信息.
         * 示例代码：
         *
         *      var pagination = erajs.getCmp('pp');
         *      pagination.refresh();	// 刷新页面右栏的信息
         *      pagination.refresh({	// 改变选项并刷新页面右栏的信息
	     *          total: 114,
	     *          pageNumber: 6
         *      });
         *
         * @param {Object} options
         * @param {Number} [options.total]
         * @param {Number} [options.pageNumber]
         */
        refresh : function(options){
            refresh(this,options);
        },

        /**
         * 选择一个新页面。页面索引从1开始.
         * @param {Number} page
         */
        select : function(page){
            select(this,page);
        },

        _render : function(target){
            init(this);
            refresh(this);
        }
    };

    /**
     * @class erajs.ui.Pagination.defaults
     */
    erajs.ui.Pagination.defaults = {

        /**
         * @property {String} 关联元素id
         */
        contentEl : null,

        /**
         * @property {Number}
         * 总记录数，当创建分页时必须设置.
         */
        total : 1,

        /**
         * @property {Number}
         * 每页显示的记录数.
         */
        pageSize : 10,

        /**
         * @property {Number}
         * 当分页创建完毕时显示当前页码.
         */
        pageNumber : 1,

        /**
         * @property {Array}
         * 用户能够改变每页显示的记录数.
         */
        pageList : [10, 20, 30, 50],

        /**
         * @private
         * @property {Boolean}
         * 定义数据是否正在载入.
         */
        loading : false,

        /**
         * @property {Number}
         * 自定义按钮，每个按钮包含2个属性:
         *
         * - iconCls 显示背景图片的CSS类.
         * - handler 当按钮被点击时调用的一个句柄函数.
         *
         * The customize buttons can be declared from markup:
         *
         *      <div id="pp" xtype="pagination" style="border:1px solid #ccc" data-options="
         *          total: 114,
         *          buttons: [{
		 *	            iconCls:'icon-add',
		 *	            handler:function(){alert('add')}
		 *           },'-',{
		 *	            iconCls:'icon-save',
		 *	            handler:function(){alert('save')}
		 *          }]">
         *      </div>
         *
         * The customize buttons can also be created using javascript:
         *
         *      var p = erajs.getCmp('pp');
         *      p.pagination({
	     *          total: 114,
	     *          buttons: [{
		 *              iconCls:'icon-add',
		 *              handler:function(){alert('add')}
	     *          },'-',{
		 *              iconCls:'icon-save',
		 *              handler:function(){alert('save')}
	     *          }]
         *      });
         */
        buttons : null,

        /**
         * @property {Number}
         * 定义是否显示可选择的每页记录数.
         */
        showPageList : true,

        /**
         * @property {Number}
         * 定义是否显示刷新按钮.
         */
        showRefresh : true,

        /**
         * @property {Number}
         * 链接数量.
         */
        links : 10,

        /**
         * @property {Number} layout 分页布局定义.
         * @property {String} layout.list the page size list.
         * @property {String} layout.sep the page button separator.
         * @property {String} layout.first the first button.
         * @property {String} layout.prev the prev button.
         * @property {String} layout.next the next button.
         * @property {String} layout.last the last button.
         * @property {String} layout.refresh  the refresh button.
         * @property {String} layout.manual he manual page input to allow entering page number.
         * @property {String} layout.links the page number links.
         */
        layout : ["list", "sep", "first", "prev", "sep", "manual", "sep", "next", "last", "sep", "refresh"],

        /**
         * @event 当用户进行翻页时触发.
         * @param {Number} pageNumber 下一页的页码.
         * @param {Number} pageSize 下一页的显示记录数.
         */
        onSelectPage : function(pageNumber, pageSize) {
        },

        /**
         * @event 刷新之前触发, 返回false将取消刷新.
         * @param {Number} pageNumber
         * @param {Number} pageSize
         */
        onBeforeRefresh : function(pageNumber, pageSize) {
        },

        /**
         * @event 刷新之后触发.
         * @param {Number} pageNumber
         * @param {Number} pageSize
         */
        onRefresh : function(pageNumber, pageSize) {
        },

        /**
         * @event 当用户修改每页显示记录数时触发.
         * @param {Number} pageSize
         */
        onChangePageSize : function(pageSize) {
        },

        /**
         * @property {String}
         * 在输入框之前显示的符号.
         */
        beforePageText : "Page",

        /**
         * @property {String}
         * 在输入框之后显示的符号.
         */
        afterPageText : "of {pages}",

        /**
         * @property {String}
         * 在插件右边显示分页信息格式.
         */
        displayMsg : "Displaying {from} to {to} of {total} items",

        /**
         * @property {Object} nav
         * @property {Function} nav.first
         * @property {Function} nav.prev
         * @property {Function} nav.next
         * @property {Function} nav.last
         * @property {Function} nav.refresh
         */
        nav : {
            first : {
                iconCls : "pagination-first",
                handler : function() {
                    var opts = this.options;
                    if (opts.pageNumber > 1) {
                        this.select(1);
                    }
                }
            },
            prev : {
                iconCls : "pagination-prev",
                handler : function() {
                    var opts = this.options;
                    if (opts.pageNumber > 1) {
                        this.select(opts.pageNumber - 1);
                    }
                }
            },
            next : {
                iconCls : "pagination-next",
                handler : function() {
                    var opts = this.options;
                    var num = Math.ceil(opts.total / opts.pageSize);
                    if (opts.pageNumber < num) {
                        this.select(opts.pageNumber + 1);
                    }
                }
            },
            last : {
                iconCls : "pagination-last",
                handler : function() {
                    var opts = this.options;
                    var num = Math.ceil(opts.total / opts.pageSize);
                    if (opts.pageNumber < num) {
                        this.select(num);
                    }
                }
            },
            refresh : {
                iconCls : "pagination-refresh",
                handler : function() {
                    var opts = this.options;
                    if (opts.onBeforeRefresh.call(this, opts.pageNumber, opts.pageSize) != false) {
                        this.select(opts.pageNumber);
                        opts.onRefresh.call(this, opts.pageNumber, opts.pageSize);
                    }
                }
            }
        }
    };

    erajs.ui.Pagination.parseOptions = function(target){
        var t = $(target);
        return $.extend({}, erajs.ui.parser.parseOptions(t, ["id",{

            total : "number",
            pageSize : "number",
            pageNumber : "number",
            links : "number"
        }, {
            loading : "boolean",
            showPageList : "boolean",
            showRefresh : "boolean"
        }]), {
            pageList : (t.attr("pageList") ? eval(t.attr("pageList")) : undefined)
        });
    };

})();
/*
 * Copyright (c) 2014 www.erayt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 **/
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.ui.Datagrid
 * @extends erajs.ui.Datagrid.defaults
 *
 * 扩展自{@link erajs.ui.Panel.defaults}.使用{@link erajs.ui.Datagrid.defaults}重写默认值对象.
 *
 * DataGrid以表格形式展示数据，并提供了丰富的选择、排序、分组功能支持.
 * DataGrid的设计用于缩短开发时间,并且使开发人员不需要具备特定的知识.
 * 它是轻量级的且功能丰富.单元格合并、多列标题、冻结列和页脚只是其中的一小部分功能.
 *
 * {@img erajs.ui.Datagrid/datagrid.png}
 *
 * ##创建表格
 *
 * 1、用标签很容易创建表格.
 *
 *      @example
 *      <table id="dg" xtype="datagrid" style="width:400px;height:250px"
 *          data-options="url:'datagrid_data.json',fitColumns:true,singleSelect:true">
 *       <thead>
 *          <tr>
 *              <th data-options="field:'code',width:100">编码</th>
 *              <th data-options="field:'name',width:100">名称</th>
 *              <th data-options="field:'price',width:100,align:'right'">价格</th>
 *          </tr>
 *       </thead>
 *      </table>
 *
 * 2、使用Javascript去创建DataGrid控件.
 *
 *      <table id="dg"></table>
 *
 *      erajs.create('datagrid',{
 *          contentEl : '#dg',
 *          url:'datagrid_data.json',
 *          columns:[[
 *              {field:'code',title:'Code',width:100},
 *              {field:'name',title:'Name',width:100},
 *              {field:'price',title:'Price',width:100,align:'right'}
 *          ]]
 *      });
 */
(function(){

    var index = 0;

    function indexOf(a, o) {
        for (var i = 0, length = a.length; i < length; i++) {
            if (a[i] == o) {
                return i;
            }
        }
        return -1;
    }

    function _7(rows,idField,row) {
        var length = rows.length;
        for (var i = 0; i < length; i++) {
            if (rows[i][idField] == row[idField]) {
                return;
            }
        }
        rows.push(row);
    };

    function _4(a, o, id) {
        if ( typeof o == "string") {
            for (var i = 0, _5 = a.length; i < _5; i++) {
                if (a[i][o] == id) {
                    a.splice(i, 1);
                    return;
                }
            }
        } else {
            var _6 = indexOf(a, o);
            if (_6 != -1) {
                a.splice(_6, 1);
            }
        }
    };

    function init(self, opts) {

        var target = self.target;
        var opts = opts || {};

        function getColumns() {
            var frozenColumns = [];
            var columns = [];
            $(target).children("thead").each(function() {
                var t = $(this);
                var opt = erajs.ui.parser.parseOptions(t, [{
                    frozen : "boolean"
                }]);
                t.find("tr").each(function() {
                    var columnsTemp = [];
                    $(this).find("th").each(function() {
                        var th = $(this);

                        /**
                         * @class erajs.ui.Datagrid.Column
                         */
                        var col = $.extend({},
                            erajs.ui.parser.parseOptions(th,
                                [
                                /**
                                 * @cfg {String} 列字段名称.
                                 */
                                    "field",

                                /**
                                 * @cfg {String} [align='left'] 指明如何对齐列数据.
                                 * 可以使用的值有：
                                 *
                                 * - 'left'
                                 * - 'right'
                                 * - 'center'
                                 */
                                    "align",

                                /**
                                 * @cfg {String} [halign='center'] 指明如何对齐列标题。如果没有指定，则按照align属性进行对齐.
                                 * 可以使用的值有：
                                 *
                                 * - 'left'
                                 * - 'right'
                                 * - 'center'
                                 */
                                    "halign",

                                /**
                                 * @cfg {String} [order='asc'] 默认排序数序,默认:asc
                                 *
                                 * - 'asc'
                                 * - 'desc'
                                 */
                                    "order",
                                    {

                                        /**
                                         * @cfg {Boolean} [sortable=false] 是否允许列使用排序.
                                         */
                                        sortable : "boolean",

                                        /**
                                         * @cfg {Boolean} [checkbox=false] 是否显示复选框.
                                         */
                                        checkbox : "boolean",

                                        /**
                                         * @cfg {Boolean} [resizable=true] 是否允许列改变大小.
                                         */
                                        resizable : "boolean",

                                        /**
                                         * @cfg {Boolean} [fixed=false] 如果为true,在'fitColumns'为true时,阻止其自适应宽度.
                                         */
                                        fixed : "boolean"
                                    }, {

                                    /**
                                     * @cfg {Number} [rowspan=null] 指明将占用多少行单元格（合并行).
                                     */
                                    rowspan : "number",

                                    /**
                                     * @cfg {Number} [colspan=null] 指明将占用多少列单元格（合并列).
                                     */
                                    colspan : "number",

                                    /**
                                     * @cfg {Number/String} [width='auto'] 列的宽度,如果没有定义，宽度将自动扩充以适应其内容.
                                     */
                                    width : "number"
                                }]), {

                                /**
                                 * @cfg {String} 列标题文本
                                 */
                                title : (th.html() || undefined),

                                /**
                                 * @cfg {Boolean} [hidden=false] 是否隐藏
                                 */
                                hidden : (th.attr("hidden") ? true : undefined),

                                /**
                                 * @cfg {Function}
                                 * 单元格formatter(格式化器)函数，带3个参数：
                                 * @param {String} value 字段值
                                 * @param {Object} rowData 行记录数据
                                 * @param {Number} rowIndex 行索引
                                 */
                                formatter : (th.attr("formatter") ? eval(th.attr("formatter")) : undefined),

                                /**
                                 * @cfg {Function}
                                 * 单元格styler(样式)函数，返回如'background:red'这样的自定义单元格样式字符串：
                                 * 该函数带3个参数：
                                 * @param {String} value 字段值
                                 * @param {Object} rowData 行记录数据
                                 * @param {Number} rowIndex 行索引
                                 */
                                styler : (th.attr("styler") ? eval(th.attr("styler")) : undefined),

                                /**
                                 * @cfg {Function}
                                 * 用来做本地排序的自定义字段排序函数，带2个参数：
                                 * @param {String} a 第一个字段值.
                                 * @param {String} b 第二个字段值.
                                 */
                                sorter : (th.attr("sorter") ? eval(th.attr("sorter")) : undefined)
                            });
                        if (th.attr("editor")) {
                            var s = $.trim(th.attr("editor"));
                            if (s.substr(0, 1) == "{") {
                                col.editor = eval("(" + s + ")");
                            } else {
                                col.editor = s;
                            }
                        }
                        columnsTemp.push(col);
                    });
                    opt.frozen ? frozenColumns.push(columnsTemp) : columns.push(columnsTemp);
                });
            });
            return [frozenColumns, columns];
        };

        var dgBody = $("<div class=\"datagrid-wrap\">"
            + "<div class=\"datagrid-view\">"
            + "<div class=\"datagrid-view1\">"
            + "<div class=\"datagrid-header\">"
            + "<div class=\"datagrid-header-inner\"></div>"
            + "</div>" + "<div class=\"datagrid-body\">"
            + "<div class=\"datagrid-body-inner\"></div>"
            + "</div>" + "<div class=\"datagrid-footer\">"
            + "<div class=\"datagrid-footer-inner\"></div>"
            + "</div>" + "</div>"
            + "<div class=\"datagrid-view2\">"
            + "<div class=\"datagrid-header\">"
            + "<div class=\"datagrid-header-inner\"></div>"
            + "</div>" + "<div class=\"datagrid-body\"></div>"
            + "<div class=\"datagrid-footer\">"
            + "<div class=\"datagrid-footer-inner\"></div>"
            + "</div>" + "</div>" + "</div>"
            + "</div>").insertAfter(target);

        var panel = new erajs.ui.Panel($.extend({},opts,{
            target : dgBody[0],
            doSize : false,
            onResize : function(width, height) {
                setTimeout(function() {
                    autoFit(self);
                    fitColumns(self);
                    opts.onResize.call(panel,width,height);
                }, 0);
            },
            onExpand : function() {
                fixRowHeight(self);
                opts.onExpand.call(panel);
            }
        }));

        //面板大小改变时触发resize事件
        panel.getPanel().addClass("datagrid").bind("_resize", function(e, force) {
            if (opts.fit == true || force) {
                setSize(self);
                autoFit(self);
            }
            return false;
        });

        $(target).hide().appendTo(dgBody.children("div.datagrid-view"));
        var cc = getColumns();
        var view = dgBody.children("div.datagrid-view");
        var view1 = view.children("div.datagrid-view1");
        var view2 = view.children("div.datagrid-view2");

        return {
            panel : panel,
            frozenColumns : cc[0],
            columns : cc[1],
            dc : {
                view : view,
                view1 : view1,
                view2 : view2,
                header1 : view1.children("div.datagrid-header").children("div.datagrid-header-inner"),
                header2 : view2.children("div.datagrid-header").children("div.datagrid-header-inner"),
                body1 : view1.children("div.datagrid-body").children("div.datagrid-body-inner"),
                body2 : view2.children("div.datagrid-body"),
                footer1 : view1.children("div.datagrid-footer").children("div.datagrid-footer-inner"),
                footer2 : view2.children("div.datagrid-footer").children("div.datagrid-footer-inner")
            }
        };
    }

    // todo 待完善
    function setSize(self,param){
        var opts = self.options;
        var panel = self.panel;
        if (param) {
            if (param.width) {
                opts.width = param.width;
            }
            if (param.height) {
                opts.height = param.height;
            }
        }
        if (opts.fit == true) {
            var p = panel.getPanel().parent();
            opts.width = p.width();
            opts.height = p.height();
        }
        panel.resize(opts);
    }

    function autoFit(self) {

        var opts = self.options;
        var dc = self.dc;
        var panel = self.panel.getBody();
        var width = panel.width();
        var height = panel.height();

        var view = dc.view;
        var view1 = dc.view1;
        var view2 = dc.view2;

        var header1 = view1.children("div.datagrid-header");
        var header2 = view2.children("div.datagrid-header");
        var table1 = header1.find("table");
        var table2 = header2.find("table");

        view.width(width);

        var inner1 = header1.children("div.datagrid-header-inner").show();
        var view1Table = inner1.find("table");
        view1.width(view1Table.length ? view1Table.width() : 0);
        if (!opts.showHeader) {
            inner1.hide();
        }
        var v1Width =  view1._outerWidth();
        view2.width(width - view1._outerWidth());
        view1.children("div.datagrid-header,div.datagrid-body,div.datagrid-footer").width(view1.width());
        view2.children("div.datagrid-header,div.datagrid-body,div.datagrid-footer").width(view2.width());
        var hh;
        header1.css("height", "");
        header2.css("height", "");
        table1.css("height", "");
        table2.css("height", "");
        var height1 = table1.height();
        var height2 = table2.height();
        if(height1){
            hh = Math.max(table1.height(), table2.height());
        }else{
            hh = height2;
        }
        table1.height(hh);
        table2.height(hh);
        header1.add(header2)._outerHeight(hh);
        if (opts.height != "auto") {
            var _2f = height - view2.children("div.datagrid-header")
                ._outerHeight() - view2.children("div.datagrid-footer")
                ._outerHeight() - panel.children("div.datagrid-toolbar")
                ._outerHeight();

            panel.children("div.datagrid-pager").each(function() {
                _2f -= $(this)._outerHeight();
            });
            dc.body1.add(dc.body2).children("table.datagrid-btable-frozen").css({
                position : "absolute",
                top : dc.header2._outerHeight()
            });
            var _30 = dc.body2.children("table.datagrid-btable-frozen")._outerHeight();
            view1.add(view2).children("div.datagrid-body").css({
                marginTop : _30,
                height : (_2f - _30)
            });
        }
        view.height(view2.height());
    }

    // 创建样式表
    function createStyleSheet(self){

        var opts = self.options;
        var panel = self.panel;
        var dc = self.dc;
        var ss = null;

        if (opts.sharedStyleSheet) {
            ss = typeof opts.sharedStyleSheet == "boolean" ? "head" : opts.sharedStyleSheet;
        } else {
            ss = panel.getPanel().closest("div.datagrid-view");
            if (!ss.length) {
                ss = dc.view;
            }
        }
        var cc = $(ss);
        var _e = $.data(cc[0], "ss");
        if (!_e) {
            _e = $.data(cc[0], "ss", {
                cache : {},
                dirty : []
            });
        }
        return {
            add : function(_f) {
                var ss = ["<style type=\"text/css\" easyui=\"true\">"];
                for (var i = 0; i < _f.length; i++) {
                    _e.cache[_f[i][0]] = {
                        width : _f[i][1]
                    };
                }
                var _10 = 0;
                for (var s in _e.cache) {
                    var _11 = _e.cache[s];
                    _11.index = _10++;
                    ss.push(s + "{width:" + _11.width + "}");
                }
                ss.push("</style>");
                $(ss.join("\n")).appendTo(cc);
                cc.children("style[easyui]:not(:last)").remove();
            },
            getRule : function(_12) {
                var _13 = cc.children("style[easyui]:last")[0];
                var _14 = _13.styleSheet ? _13.styleSheet : (_13.sheet || document.styleSheets[document.styleSheets.length - 1]);
                var _15 = _14.cssRules || _14.rules;
                return _15[_12];
            },
            set : function(_16, _17) {
                var _18 = _e.cache[_16];
                if (_18) {
                    _18.width = _17;
                    var _19 = this.getRule(_18.index);
                    if (_19) {
                        _19.style["width"] = _17;
                    }
                }
            },
            remove : function(_1a) {
                var tmp = [];
                for (var s in _e.cache) {
                    if (s.indexOf(_1a) == -1) {
                        tmp.push([s, _e.cache[s].width]);
                    }
                }
                _e.cache = {};
                this.add(tmp);
            },
            dirty : function(_1b) {
                if (_1b) {
                    _e.dirty.push(_1b);
                }
            },
            clean : function() {
                for (var i = 0; i < _e.dirty.length; i++) {
                    this.remove(_e.dirty[i]);
                }
                _e.dirty = [];
            }
        };
    }

    function _58(self) {

        var target = self.target;
        var opts = self.options;
        var panel = self.panel;
        var dc = self.dc;
        self.ss = self.createStyleSheet();

        self.rowIdPrefix = "datagrid-row-r" + (++index);
        self.cellClassPrefix = "datagrid-cell-c" + index;
        _5f(dc.header1, opts.frozenColumns, true);
        _5f(dc.header2, opts.columns, false);
        _60();
        dc.header1.add(dc.header2).css("display", opts.showHeader ? "block" : "none");
        dc.footer1.add(dc.footer2).css("display", opts.showFooter ? "block" : "none");

        var ptarget = panel.target;
        if (opts.toolbar) {
            if ($.isArray(opts.toolbar)) {
                $("div.datagrid-toolbar", panel).remove();
                var tb = $("<div class=\"datagrid-toolbar\"><table cellspacing=\"0\" cellpadding=\"0\"><tr></tr></table></div>").prependTo(panel.target);
                var tr = tb.find("tr");
                for (var i = 0; i < opts.toolbar.length; i++) {
                    var btn = opts.toolbar[i];
                    if (btn == "-") {
                        $("<td><div class=\"datagrid-btn-separator\"></div></td>").appendTo(tr);
                    } else {
                        var td = $("<td></td>").appendTo(tr);
                        var buttonEl = $("<div></div>").appendTo(td);
                        buttonEl[0].onclick = eval(btn.handler ||
                            function() {});

                        new erajs.ui.Button($.extend({}, btn, {
                            target : buttonEl[0],
                            plain : true
                        }));
                    }
                }
            } else {
                $(opts.toolbar).addClass("datagrid-toolbar")
                    .prependTo(ptarget);
                $(opts.toolbar).show();
            }
        } else {
            $("div.datagrid-toolbar", ptarget).remove();
        }
        $("div.datagrid-pager", ptarget).remove();
        if (opts.pagination) {
            var pagerTarget = $("<div class=\"datagrid-pager\"></div>");

            if (opts.pagePosition == "bottom") {
                pagerTarget.appendTo(ptarget);
            } else {
                if (opts.pagePosition == "top") {
                    pagerTarget.addClass("datagrid-pager-top").prependTo(ptarget);
                }
            }
            var pagination = new erajs.ui.Pagination({
                target : pagerTarget[0],
                total : (opts.pageNumber * opts.pageSize),
                buttons : opts.pagingButtons ? opts.pagingButtons : [],
                pageNumber : opts.pageNumber,
                pageSize : opts.pageSize,
                pageList : opts.pageList,
                onSelectPage : function(pageNumber, pageSize) {
                    opts.pageNumber = pageNumber;
                    opts.pageSize = pageSize;
                    this.refresh({
                        pageNumber : pageNumber,
                        pageSize : pageSize
                    });
                    request(self);
                }
            });
            opts.pageSize = pagination.options.pageSize;
            self.pager = pagination;
        }
        function _5f(header, columns, froze) {
            if (!columns) {
                return;
            }
            $(header).show();
            $(header).empty();
            var _69 = [];
            var _6a = [];
            if (opts.sortName) {
                _69 = opts.sortName.split(",");
                _6a = opts.sortOrder.split(",");
            }
            var t = $("<table class=\"datagrid-htable\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tbody></tbody></table>").appendTo(header);
            for (var i = 0; i < columns.length; i++) {
                var tr = $("<tr class=\"datagrid-header-row\"></tr>").appendTo($("tbody", t));
                var _6b = columns[i];
                for (var j = 0; j < _6b.length; j++) {
                    var col = _6b[j];
                    var _6c = "";
                    if (col.rowspan) {
                        _6c += "rowspan=\"" + col.rowspan + "\" ";
                    }
                    if (col.colspan) {
                        _6c += "colspan=\"" + col.colspan + "\" ";
                    }
                    var td = $("<td " + _6c + "></td>").appendTo(tr);
                    if (col.checkbox) {
                        td.attr("field", col.field);
                        $("<div class=\"datagrid-header-check\"></div>").html("<input type=\"checkbox\"/>").appendTo(td);
                    } else {
                        if (col.field) {
                            td.attr("field", col.field);
                            td.append("<div class=\"datagrid-cell\"><span></span><span class=\"datagrid-sort-icon\"></span></div>");
                            $("span", td).html(col.title);
                            $("span.datagrid-sort-icon", td).html("&nbsp;");
                            var _6d = td.find("div.datagrid-cell");
                            var pos = indexOf(_69, col.field);
                            if (pos >= 0) {
                                _6d.addClass("datagrid-sort-" + _6a[pos]);
                            }
                            if (col.resizable == false) {
                                _6d.attr("resizable", "false");
                            }
                            if (col.width) {
                                var _70=erajs.ui.parser.parseValue("width",col.width,dc.view,opts.scrollbarSize);
                                _6d._outerWidth(_70 - 1);
                                col.boxWidth = parseInt(_6d[0].style.width);
                                col.deltaWidth=_70-col.boxWidth;
                            } else {
                                col.auto = true;
                            }
                            _6d.css("text-align", (col.halign || col.align || "center"));
                            col.cellClass = self.cellClassPrefix + "-" + col.field.replace(/[\.|\s]/g, "-");
                            _6d.addClass(col.cellClass).css("width", "");
                        } else {
                            $("<div class=\"datagrid-cell-group\"></div>").html(col.title).appendTo(td);
                        }
                    }
                    if (col.hidden) {
                        td.hide();
                    }
                }
            }
            if (froze && opts.rownumbers) {
                var td = $("<td rowspan=\"" + opts.frozenColumns.length + "\"><div class=\"datagrid-header-rownumber\"></div></td>");
                if ($("tr", t).length == 0) {
                    td.wrap("<tr class=\"datagrid-header-row\"></tr>").parent().appendTo($("tbody", t));
                } else {
                    td.prependTo($("tr:first", t));
                }
            }
        };
        function _60() {
            var _6e = [];
            var _6f = getColumnFields(self, true).concat(getColumnFields(self));
            for (var i = 0; i < _6f.length; i++) {
                var col = getColumnOption(self, _6f[i]);
                if (col && !col.checkbox) {
                    _6e.push(["." + col.cellClass, col.boxWidth ? col.boxWidth + "px" : "auto"]);
                }
            }
            self.ss.add(_6e);
            self.ss.dirty(self.cellSelectorPrefix);
            self.cellSelectorPrefix = "." + self.cellClassPrefix;
        };
    }

    function bindEvents(self) {
        var panel = self.panel.getPanel();
        var opts = self.options;
        var dc = self.dc;
        var header = dc.header1.add(dc.header2);
        //带checkbox列处理
        header.find("input[type=checkbox]").unbind(".datagrid").bind("click.datagrid", function(e) {
            if (opts.singleSelect && opts.selectOnCheck) {
                return false;
            }
            if ($(this).is(":checked")) {
                checkAll(self);
            } else {
                uncheckAll(self);
            }
            e.stopPropagation();
        });

        var cells = header.find("div.datagrid-cell");
        //鼠标移动头部改变样式
        cells.closest("td").unbind(".datagrid").bind("mouseenter.datagrid", function() {
            if (self.resizing) {
                return;
            }
            $(this).addClass("datagrid-header-over");
        }).bind("mouseleave.datagrid", function() {
            $(this).removeClass("datagrid-header-over");
        });
        //点击标题，排序;双击自适应
        cells.unbind(".datagrid").bind("click.datagrid", function(e) {
            var p1 = $(this).offset().left + 5;
            var p2 = $(this).offset().left + $(this)._outerWidth() - 5;
            if (e.pageX < p2 && e.pageX > p1) {
                var field = $(this).parent().attr("field");
                sort(self,field);
            }
        }).bind("dblclick.datagrid", function(e) {
            var p1 = $(this).offset().left + 5;
            var p2 = $(this).offset().left + $(this)._outerWidth() - 5;
            var _7a = opts.resizeHandle == "right" ? (e.pageX > p2) : (opts.resizeHandle == "left" ? (e.pageX < p1) : (e.pageX < p1 || e.pageX > p2));
            if (_7a) {
                var field = $(this).parent().attr("field");
                var col = getColumnOption(self, field);
                if (col.resizable == false) {
                    return;
                }
                self.autoSizeColumn(field);
                col.auto = false;
            }
        });
        var handles = opts.resizeHandle == "right" ? "e" : (opts.resizeHandle == "left" ? "w" : "e,w");
        //列拖动
        cells.each(function() {
            $(this).resizable({
                handles : handles,
                disabled : ($(this).attr("resizable") ? $(this).attr("resizable") == "false" : false),
                minWidth : 25,
                onStartResize : function(e) {
                    self.resizing = true;
                    header.css("cursor", $("body").css("cursor"));
                    if (!self.proxy) {
                        self.proxy = $("<div class=\"datagrid-resize-proxy\"></div>").appendTo(dc.view);
                    }
                    self.proxy.css({
                        left : e.pageX - $(panel).offset().left - 1,
                        display : "none"
                    });
                    setTimeout(function() {
                        if (self.proxy) {
                            self.proxy.show();
                        }
                    }, 500);
                },
                onResize : function(e) {
                    self.proxy.css({
                        left : e.pageX - $(panel).offset().left - 1,
                        display : "block"
                    });
                    return false;
                },
                onStopResize : function(e) {
                    header.css("cursor", "");
                    $(this).css("height", "");
                    $(this)._outerWidth($(this)._outerWidth());
                    var field = $(this).parent().attr("field");
                    var col = getColumnOption(self, field);
                    col.width = $(this)._outerWidth();
                    col.boxWidth = col.width-col.deltaWidth;
                    col.auto = undefined;
                    $(this).css("width", "");
                    fixColumnSize(self, field);
                    self.proxy.remove();
                    self.proxy = null;
                    if ($(this).parents("div:first.datagrid-header")
                        .parent().hasClass("datagrid-view1")) {
                        autoFit(self);
                    }
                    fitColumns(self);
                    opts.onResizeColumn.call(self, field, col.width);
                    setTimeout(function() {
                        self.resizing = false;
                    }, 0);
                }
            });
        });
        dc.body1.add(dc.body2).unbind().bind("mouseover", function(e) {
            if (self.resizing) {
                return;
            }
            var tr = $(e.target).closest("tr.datagrid-row");
            if (!getLength(tr)) {
                return;
            }

            var i = getIndex(tr);
            //高亮显示
            highlightRow(self, i);
            e.stopPropagation();
        }).bind("mouseout", function(e) {
            var tr = $(e.target).closest("tr.datagrid-row");
            if (!getLength(tr)) {
                return;
            }
            var index = getIndex(tr);
            opts.finder.getTr(self, index).removeClass("datagrid-row-over");
            e.stopPropagation();
        }).bind("click", function(e) {
            var tt = $(e.target);
            var tr = tt.closest("tr.datagrid-row");
            if (!getLength(tr)) {
                return;
            }
            var index = getIndex(tr);
            if (tt.parent().hasClass("datagrid-cell-check")) {
                //单选且 checked时同时选中
                if (opts.singleSelect && opts.selectOnCheck) {
                    if (!opts.checkOnSelect) {
                        uncheckAll(self, true);
                    }
                    checkRow(self, index);
                } else {
                    if (tt.is(":checked")) {
                        checkRow(self, index);
                    } else {
                        uncheckRow(self, index);
                    }
                }
            } else {
                var row = opts.finder.getRow(self, index);
                var td = tt.closest("td[field]", tr);
                if (td.length) {
                    var field = td.attr("field");

                    opts.onClickCell.call(self, index, field, row[field]);
                }
                if (opts.singleSelect == true) {
                    selectRow(self, index);
                } else {
                    if (opts.ctrlSelect) {
                        if (e.ctrlKey) {
                            if (tr.hasClass("datagrid-row-selected")) {
                                unselectRow(self, index);
                            } else {
                                selectRow(self, index);
                            }
                        } else {
                            self.clearSelections();
                            selectRow(self, index);
                        }
                    } else {
                        if (tr.hasClass("datagrid-row-selected")) {
                            unselectRow(self, index);
                        } else {
                            selectRow(self, index);
                        }
                    }
                }
                opts.onClickRow.call(self, index, row);
            }
            e.stopPropagation();
        }).bind("dblclick", function(e) {
            var tt = $(e.target);
            var tr = tt.closest("tr.datagrid-row");
            if (!getLength(tr)) {
                return;
            }
            var index = getIndex(tr);
            var row = opts.finder.getRow(self, index);
            var td = tt.closest("td[field]", tr);
            if (td.length) {
                var field = td.attr("field");
                opts.onDblClickCell.call(self, index, field, row[field]);
            }
            opts.onDblClickRow.call(self, index, row);
            e.stopPropagation();
        }).bind("contextmenu", function(e) {
            var tr = $(e.target).closest("tr.datagrid-row");
            if (!getLength(tr)) {
                return;
            }
            var index = getIndex(tr);
            var row = opts.finder.getRow(self, index);
            opts.onRowContextMenu.call(self, e, index, row);
            e.stopPropagation();
        });

        dc.body2.bind("scroll", function() {
            var b1 = dc.view1.children("div.datagrid-body");
            b1.scrollTop($(this).scrollTop());
            var c1 = dc.body1.children(":first");
            var c2 = dc.body2.children(":first");
            if (c1.length && c2.length) {
                var top1 = c1.offset().top;
                var top2 = c2.offset().top;
                if (top1 != top2) {
                    b1.scrollTop(b1.scrollTop() + top1 - top2);
                }
            }
            dc.view2.children("div.datagrid-header,div.datagrid-footer")._scrollLeft($(this)._scrollLeft());
            dc.body2.children("table.datagrid-btable-frozen").css("left", -$(this)._scrollLeft());
        });

        function getIndex(tr) {
            if (tr.attr("datagrid-row-index")) {
                return parseInt(tr.attr("datagrid-row-index"));
            } else {
                return tr.attr("node-id");
            }
        };

        function getLength(tr) {
            return tr.length && tr.parent().length;
        };
    }

    function getColumnFields(self,frozen){
        var opts = self.options;
        var columns = (frozen == true) ? (opts.frozenColumns || [[]]) : opts.columns;
        if (columns.length == 0) {
            return [];
        }
        var _cc = [];
        function _cd(_ce) {
            var c = 0;
            var i = 0;
            while (true) {
                if (_cc[i] == undefined) {
                    if (c == _ce) {
                        return i;
                    }
                    c++;
                }
                i++;
            }
        };
        function _cf(r) {
            var ff = [];
            var c = 0;
            for (var i = 0; i < columns[r].length; i++) {
                var col = columns[r][i];
                if (col.field) {
                    ff.push([c, col.field]);
                }
                c += parseInt(col.colspan || "1");
            }
            for (var i = 0; i < ff.length; i++) {
                ff[i][0] = _cd(ff[i][0]);
            }
            for (var i = 0; i < ff.length; i++) {
                var f = ff[i];
                _cc[f[0]] = f[1];
            }
        };
        for (var i = 0; i < columns.length; i++) {
            _cf(i);
        }
        return _cc;
    }

    function getColumnOption(self,field){
        function _c5(_c6) {
            if (_c6) {
                for (var i = 0; i < _c6.length; i++) {
                    var cc = _c6[i];
                    for (var j = 0; j < cc.length; j++) {
                        var c = cc[j];
                        if (c.field == field) {
                            return c;
                        }
                    }
                }
            }
            return null;
        };
        var opts = self.options;
        var col = _c5(opts.columns);
        if (!col) {
            col = _c5(opts.frozenColumns);
        }
        return col;
    }

    function getSelections(self) {
        var opts = self.options;
        if (opts.idField) {
            return self.selectedRows;
        } else {
            var selectedRows = [];
            opts.finder.getTr(self, "", "selected", 2).each(function() {
                selectedRows.push(opts.finder.getRow(self,$(this)));
            });
            return selectedRows;
        }
    }

    function getRowIndex(self,row){
        var opts = self.options;
        var rows = self.data.rows;
        if ( typeof row == "object") {
            return indexOf(rows, row);
        } else {
            for (var i = 0; i < rows.length; i++) {
                if (rows[i][opts.idField] == row) {
                    return i;
                }
            }
            return -1;
        }
    }

    function getChecked(self){
        var opts = self.options;
        if (opts.idField) {
            return self.checkedRows;
        } else {
            var checkedRows = [];
            opts.finder.getTr(self, "", "checked", 2).each(function() {
                checkedRows.push(opts.finder.getRow(self, $(this)));
            });
            return checkedRows;
        }
    }

    function request(self,param){
        var opts = self.options;
        if (param) {
            opts.queryParams = param;
        }
        var queryParams = $.extend({}, opts.queryParams);
        if (opts.pagination) {
            $.extend(queryParams, {
                page : opts.pageNumber,
                rows : opts.pageSize
            });
        }
        if (opts.sortName) {
            $.extend(queryParams, {
                sort : opts.sortName,
                order : opts.sortOrder
            });
        }
        if (opts.onBeforeLoad.call(self, queryParams) == false) {
            return;
        }
        self.loading();  //显示加载状态
        setTimeout(function() {
            _17c();
        }, 0);
        function _17c() {
            var _17d = opts.loader.call(self, queryParams, function(data) {
                setTimeout(function() {
                    self.loaded();
                }, 0);
                loadData(self, data);
                setTimeout(function() {
                    history(self);
                }, 0);
            }, function() {
                setTimeout(function() {
                    self.loaded();
                }, 0);
                opts.onLoadError.apply(self, arguments);
            });
            if (_17d == false) {
                self.loaded();
            }
        };
    }

    function history(self) {
        var data = self.data;
        var rows = data.rows;
        var hss = [];
        for (var i = 0; i < rows.length; i++) {
            hss.push($.extend({}, rows[i]));
        }
        self.originalRows = hss;
        self.updatedRows = [];
        self.insertedRows = [];
        self.deletedRows = [];
    }

    function loadData(self,data){
        var target = self.target;
        var opts = self.options;
        var dc = self.dc;
        data = opts.loadFilter.call(self,data);
        data.total = parseInt(data.total);
        self.data = data;

        if (data.footer) {
            self.footer = data.footer;
        }
        //数据本地排序
        if (!opts.remoteSort && opts.sortName) {
            var sortNames = opts.sortName.split(",");
            var sortTypes = opts.sortOrder.split(",");
            data.rows.sort(function(r1, r2) {
                var r = 0;
                for (var i = 0; i < sortNames.length; i++) {
                    var sn = sortNames[i];
                    var so = sortTypes[i];
                    var col = getColumnOption(self, sn);
                    var _d6 = col.sorter ||
                        function(a, b) {
                            return a == b ? 0 : (a > b ? 1 : -1);
                        };
                    r = _d6(r1[sn], r2[sn]) * (so == "asc" ? 1 : -1);
                    if (r != 0) {
                        return r;
                    }
                }
                return r;
            });
        }

        var pager = self.getPager();
        if(pager){
            var pagerOpts = pager.options;
            if (pagerOpts.total != data.total) {
                pager.refresh({
                    total : data.total
                });
            }
            if (opts.pageNumber != pagerOpts.pageNumber) {
                opts.pageNumber = pagerOpts.pageNumber;
                // request(self);
            }
        }

        //Fires before the view is rendered
        if (opts.view.onBeforeRender) {
            opts.view.onBeforeRender.call(opts.view, self, data.rows);
        }
        opts.view.render.call(opts.view, self, dc.body2, false);
        opts.view.render.call(opts.view, self, dc.body1, true);

        //Defines if to show row footer.
        if (opts.showFooter) {
            opts.view.renderFooter.call(opts.view, self, dc.footer2, false);
            opts.view.renderFooter.call(opts.view, self, dc.footer1, true);
        }
        //Fires after the view is rendered
        if (opts.view.onAfterRender) {
            opts.view.onAfterRender.call(opts.view, self);
        }

        self.ss.clean();
        opts.onLoadSuccess.call(self, data);

        fixRowHeight(self);
        dc.body2.triggerHandler("scroll");
        setSelectionState(self);
        self.autoSizeColumn();
    }

    function autoSizeColumn(self,field){
        var opts = self.options;
        var dc = self.dc;
        var tmp = $("<div class=\"datagrid-cell\" style=\"position:absolute;left:-9999px\"></div>").appendTo("body");
        if (field) {
            setSize(field);
            if (opts.fitColumns) {
                autoFit(self);
                fitColumns(self);
            }
        } else {
            var auto = false;
            var columns = getColumnFields(self, true).concat(getColumnFields(self, false));
            for (var i = 0; i < columns.length; i++) {
                var field = columns[i];
                var col = getColumnOption(self, field);
                if (col.auto) {
                    setSize(field);
                    auto = true;
                }
            }
            if (auto && opts.fitColumns) {
                autoFit(self);
                fitColumns(self);
            }
        }
        tmp.remove();
        function setSize(field) {
            var fieldCell = dc.view.find("div.datagrid-header td[field=\"" + field + "\"] div.datagrid-cell");
            fieldCell.css("width", "");

            var col = self.getColumnOption(field);
            col.width = undefined;
            col.boxWidth = undefined;
            col.auto = true;
            self.fixColumnSize(field);
            var width = Math.max(getWidth("header"), getWidth("allbody"), getWidth("allfooter"));
            fieldCell._outerWidth(width);
            col.width = width;
            col.boxWidth = parseInt(fieldCell[0].style.width);
            col.deltaWidth=width-col.boxWidth;
            fieldCell.css("width", "");
            self.fixColumnSize(field);
            opts.onResizeColumn.call(self, field, col.width);
            function getWidth(type) {
                var outerWidth = 0;
                if (type == "header") {
                    outerWidth = getOuterWidth(fieldCell);
                } else {
                    opts.finder.getTr(self, 0, type).find("td[field=\"" + field + "\"] div.datagrid-cell").each(function() {
                        var w = getOuterWidth($(this));
                        if (outerWidth < w) {
                            outerWidth = w;
                        }
                    });
                }
                return outerWidth;
                function getOuterWidth(cell) {
                    return cell.is(":visible") ? cell._outerWidth() : tmp.html(cell.html())._outerWidth();
                };
            };
        };
    }

    function fixRowHeight(self,index,auto){
        var rows = self.data.rows;
        var opts = self.options;
        var dc = self.dc;
        if (!dc.body1.is(":empty") && (!opts.nowrap || opts.autoRowHeight || auto)) {
            if (index != undefined) {
                var tr1 = opts.finder.getTr(self, index, "body", 1);
                var tr2 = opts.finder.getTr(self, index, "body", 2);
                setHeight(tr1, tr2);
            } else {
                var tr1 = opts.finder.getTr(self, 0, "allbody", 1);
                var tr2 = opts.finder.getTr(self, 0, "allbody", 2);
                setHeight(tr1, tr2);
                if (opts.showFooter) {
                    var tr1 = opts.finder.getTr(self, 0, "allfooter", 1);
                    var tr2 = opts.finder.getTr(self, 0, "allfooter", 2);
                    setHeight(tr1, tr2);
                }
            }
        }
        autoFit(self);
        if (opts.height == "auto") {
            var bodyParent = dc.body1.parent();
            var body2 = dc.body2;
            var wheight = getWh(body2);
            var height = wheight.height;
            if (wheight.width > body2.width()) {
                height += 18;
            }
            bodyParent.height(height);
            body2.height(height);
            dc.view.height(dc.view2.height());
        }
        dc.body2.triggerHandler("scroll");

        function setHeight(_3d, _3e) {
            for (var i = 0; i < _3e.length; i++) {
                var tr1 = $(_3d[i]);
                var tr2 = $(_3e[i]);
                tr1.css("height", "");
                tr2.css("height", "");
                var _3f = Math.max(tr1.height(), tr2.height());
                tr1.css("height", _3f);
                tr2.css("height", _3f);
            }
        };

        function getWh(body) {
            var width = 0;
            var height = 0;
            $(body).children().each(function() {
                var c = $(this);
                if (c.is(":visible")) {
                    height += c._outerHeight();
                    if (width < c._outerWidth()) {
                        width = c._outerWidth();
                    }
                }
            });
            return {
                width : width,
                height : height
            };
        };
    }

    function fixColumnSize(self,field){
        var opts = self.options;
        var dc = self.dc;
        var btable = dc.view.find("table.datagrid-btable,table.datagrid-ftable");
        btable.css("table-layout", "fixed");
        if (field) {
            fix(field);
        } else {
            var cFields = getColumnFields(self, true).concat(getColumnFields(self, false));
            for (var i = 0; i < cFields.length; i++) {
                fix(cFields[i]);
            }
        }
        btable.css("table-layout", "auto");

        mergedCellWidth(self);

        setTimeout(function() {
            fixRowHeight(self);
            fixEditable(self);
        }, 0);
        function fix(field) {
            var col = getColumnOption(self, field);
            if (!col.checkbox) {
                self.ss.set("." + col.cellClass, col.boxWidth ? col.boxWidth + "px" : "auto");
            }
        };
    }

    function mergedCellWidth(self) {
        var dc = self.dc;
        dc.body1.add(dc.body2).find("td.datagrid-td-merged").each(function() {
            var td = $(this);
            var _bd = td.attr("colspan") || 1;
            var col = getColumnOption(self, td.attr("field"));
            var width = col.boxWidth+col.deltaWidth-1;
            for (var i = 1; i < _bd; i++) {
                td = td.next();
                col=getColumnOption(self,td.attr("field"));
                width+=col.boxWidth+col.deltaWidth;
            }
            $(this).children("div.datagrid-cell")._outerWidth(width);
        });
    }

    function fixEditable(self) {
        var dc = self.dc;
        dc.view.find("div.datagrid-editable").each(function() {
            var t = $(this);
            var field = t.parent().attr("field");
            var col = self.getColumnOption(field);
            t._outerWidth(col.boxWidth+col.deltaWidth-1);
            var ed = $.data(this, "datagrid.editor");
            if (ed.actions.resize) {
                ed.actions.resize(ed.component, t.width());
            }
        });
    };

    function setSelectionState(self){
        var opts = self.options;
        if (opts.idField) {
            var isTree = erajs.getCmp(self.id).xtype ==='treegrid' ? true : false;
            var onSelect = opts.onSelect;
            var onCheck = opts.onCheck;
            opts.onSelect = opts.onCheck = function() {
            };
            var rows = opts.finder.getRows(self);
            for (var i = 0; i < rows.length; i++) {
                var row = rows[i];
                var index = isTree ? row[opts.idField] : i;
                if (isIdField(self.selectedRows, row)) {
                    selectRow(self, index, true);
                }
                if (isIdField(self.checkedRows, row)) {
                    checkRow(self, index, true);
                }
            }
            opts.onSelect = onSelect;
            opts.onCheck = onCheck;
        }
        function isIdField(a, r) {
            for (var i = 0; i < a.length; i++) {
                if (a[i][opts.idField] == r[opts.idField]) {
                    a[i] = r;
                    return true;
                }
            }
            return false;
        };
    }

    function sort(self, param) {
        var opts = self.options;
        param = param || {};
        var pms = {
            sortName : opts.sortName,
            sortOrder : opts.sortOrder
        };
        if ( typeof param == "object") {
            $.extend(pms, param);
        }
        var sortNames = [];
        var sortOrders = [];
        if (pms.sortName) {
            sortNames = pms.sortName.split(",");
            sortOrders = pms.sortOrder.split(",");
        }
        if ( typeof param == "string") {
            var field = param;
            var col = getColumnOption(self, field);
            if (!col.sortable || self.resizing) {
                return;
            }
            var orderType = col.order || "asc";
            var pos = indexOf(sortNames, field);
            if (pos >= 0) {
                var orderType2 = sortOrders[pos] == "asc" ? "desc" : "asc";
                if (opts.multiSort && orderType2 == orderType) {
                    sortNames.splice(pos, 1);
                    sortOrders.splice(pos, 1);
                } else {
                    sortOrders[pos] = orderType2;
                }
            } else {
                if (opts.multiSort) {
                    sortNames.push(field);
                    sortOrders.push(orderType);
                } else {
                    sortNames = [field];
                    sortOrders = [orderType];
                }
            }
            pms.sortName = sortNames.join(",");
            pms.sortOrder = sortOrders.join(",");
        }
        if (opts.onBeforeSortColumn.call(self, pms.sortName, pms.sortOrder) == false) {
            return;
        }
        $.extend(self.options, pms);
        var dc = self.dc;
        var header = dc.header1.add(dc.header2);
        header.find("div.datagrid-cell").removeClass("datagrid-sort-asc datagrid-sort-desc");
        for (var i = 0; i < sortNames.length; i++) {
            var col = getColumnOption(self, sortNames[i]);
            header.find("div." + col.cellClass).addClass("datagrid-sort-" + sortOrders[i]);
        }
        if (opts.remoteSort) {
            request(self);
        } else {
            loadData(self, self.getData());
        }
        opts.onSortColumn.call(self, opts.sortName, opts.sortOrder);
    }

    function fitColumns(self){
        var opts = self.options,
            dc = self.dc,
            header=dc.view2.children("div.datagrid-header");

        dc.body2.css("overflow-x","");

        _9f();
        _a0();
        if(header.width()>=header.find("table").width()){
            dc.body2.css("overflow-x","hidden");
        }
        function _a0(){
            if(!opts.fitColumns){
                return;
            }
            if(!self.leftWidth){
                self.leftWidth=0;
            }
            var _a1=0;
            var cc=[];
            var fields=getColumnFields(self,false);
            for(var i=0;i<fields.length;i++){
                var col=getColumnOption(self,fields[i]);
                if(_a3(col)){
                    _a1+=col.width;
                    cc.push({field:col.field,col:col,addingWidth:0});
                }
            }
            if(!_a1){
                return;
            }
            cc[cc.length-1].addingWidth-=self.leftWidth;
            var _a4=header.children("div.datagrid-header-inner").show();
            var _a5=header.width()-header.find("table").width()-opts.scrollbarSize+self.leftWidth;
            var _a6=_a5/_a1;
            if(!opts.showHeader){
                _a4.hide();
            }
            for(var i=0;i<cc.length;i++){
                var c=cc[i];
                var _a7=parseInt(c.col.width*_a6);
                c.addingWidth+=_a7;
                _a5-=_a7;
            }
            cc[cc.length-1].addingWidth+=_a5;
            for(var i=0;i<cc.length;i++){
                var c=cc[i];
                if(c.col.boxWidth+c.addingWidth>0){
                    c.col.boxWidth+=c.addingWidth;
                    c.col.width+=c.addingWidth;
                }
            }
            self.leftWidth=_a5;
            fixColumnSize(self);
        };
        function _9f(){
            var flag=false;
            var fields=getColumnFields(self,true).concat(getColumnFields(self,false));
            $.map(fields,function(field){
                var col=getColumnOption(self,field);
                if(String(col.width||"").indexOf("%")>=0){
                    var _ab=erajs.ui.parser.parseValue("width",col.width,dc.view,opts.scrollbarSize)-col.deltaWidth;
                    if(_ab>0){
                        col.boxWidth=_ab;
                        flag=true;
                    }
                }
            });
            if(flag){
                fixColumnSize(self);
            }
        };
        function _a3(col){
            if(String(col.width||"").indexOf("%")>=0){
                return false;
            }
            if(!col.hidden&&!col.checkbox&&!col.auto&&!col.fixed){
                return true;
            }
        };
    }

    /* function fitColumns(self) {
     var opts = self.options;
     var dc = self.dc;
     dc.body2.css("overflow-x", "");
     if (!opts.fitColumns) {
     return;
     }
     if (!self.leftWidth) {
     self.leftWidth = 0;
     }
     var header = dc.view2.children("div.datagrid-header");
     var width = 0;
     var _9d;
     var cfields = getColumnFields(self, false);
     for (var i = 0; i < cfields.length; i++) {
     var col = getColumnOption(self, cfields[i]);
     if (judge(col)) {
     width += col.width;
     _9d = col;
     }
     }
     if (!width) {
     return;
     }
     if (_9d) {
     updateWidth(_9d, -self.leftWidth);
     }
     var _a1 = header.children("div.datagrid-header-inner").show();
     var _a2 = header.width() - header.find("table").width() - opts.scrollbarSize + self.leftWidth;
     var _a3 = _a2 / width;
     if (!opts.showHeader) {
     _a1.hide();
     }
     for (var i = 0; i < cfields.length; i++) {
     var col = getColumnOption(self, cfields[i]);
     if (judge(col)) {
     var _a4 = parseInt(col.width * _a3);
     updateWidth(col, _a4);
     _a2 -= _a4;
     }
     }
     self.leftWidth = _a2;
     if (_9d) {
     updateWidth(_9d, self.leftWidth);
     }
     fixColumnSize(self);
     if (header.width() >= header.find("table").width()) {
     dc.body2.css("overflow-x", "hidden");
     }
     function updateWidth(col, leftWidth) {
     if (col.width + leftWidth > 0) {
     col.width += leftWidth;
     col.boxWidth += leftWidth;
     }
     };
     function judge(col) {
     if(String(col.width||"").indexOf("%")>=0){
     return false;
     }
     if (!col.hidden && !col.checkbox && !col.auto && !col.fixed) {
     return true;
     }
     };
     }*/

    function scrollTo(self,index){
        var dc = self.dc;
        var opts = self.options;
        var tr = opts.finder.getTr(self, index);
        if (tr.length) {
            if (tr.closest("table").hasClass("datagrid-btable-frozen")) {
                return;
            }
            var height = dc.view2.children("div.datagrid-header")._outerHeight();
            var body2 = dc.body2;
            var bodyHeight = body2.outerHeight(true) - body2.outerHeight();
            var top = tr.position().top - height - bodyHeight;
            if (top < 0) {
                body2.scrollTop(body2.scrollTop() + top);
            } else {
                if (top + tr._outerHeight() > body2.height() - 18) {
                    body2.scrollTop(body2.scrollTop() + top + tr._outerHeight() - body2.height() + 18);
                }
            }
        }
    }

    function freezeRow(self,index){
        var opts = self.options;
        var dc = self.dc;
        if (!dc.body2.children("table.datagrid-btable-frozen").length) {
            dc.body1.add(dc.body2).prepend("<table class=\"datagrid-btable datagrid-btable-frozen\" cellspacing=\"0\" cellpadding=\"0\"></table>");
        }
        freeze(true);
        freeze(false);
        autoFit(self);
        function freeze(flag) {
            var num = flag ? 1 : 2;
            if($.isArray(index)){
                for(i=0;i<index.length;i++){
                    var tr = opts.finder.getTr(self, index[i], "body", num);
                    ( flag ? dc.body1 : dc.body2).children("table.datagrid-btable-frozen").append(tr);
                }
            }else if(typeof index == 'number'){
                var tr = opts.finder.getTr(self, index, "body", num);
                ( flag ? dc.body1 : dc.body2).children("table.datagrid-btable-frozen").append(tr);
            }
        };
    }

    function highlightRow(self,index) {
        var opts = self.options;
        opts.finder.getTr(self, self.highlightIndex).removeClass("datagrid-row-over");
        opts.finder.getTr(self, index).addClass("datagrid-row-over");
        self.highlightIndex = index;
    }

    function selectRow(self,index,hasChecked){
        var dc = self.dc;
        var opts = self.options;
        var sRows = self.selectedRows;
        if (opts.singleSelect) {
            unselectAll(self);
            sRows.splice(0, sRows.length);
        }
        if (!hasChecked && opts.checkOnSelect) {
            checkRow(self, index, true);
        }
        var row = opts.finder.getRow(self, index);
        if (opts.idField) {
            _7(sRows, opts.idField, row);
        }
        opts.finder.getTr(self, index).addClass("datagrid-row-selected");
        opts.onSelect.call(self, index, row);
        scrollTo(self, index);
    }

    function unselectRow(self,index,hasChecked){
        var dc = self.dc;
        var opts = self.options;
        var selectedRows = self.selectedRows;
        if (!hasChecked && opts.checkOnSelect) {
            uncheckRow(self, index, true);
        }
        opts.finder.getTr(self, index).removeClass("datagrid-row-selected");
        var row = opts.finder.getRow(self, index);
        if (opts.idField) {
            _4(selectedRows, opts.idField, row[opts.idField]);
        }
        opts.onUnselect.call(self, index, row);
    }

    function unselectAll(self, hasChecked) {
        var opts = self.options;
        var rows = opts.finder.getRows(self);
        var sRows = self.selectedRows;
        if (!hasChecked && opts.checkOnSelect) {
            uncheckAll(self, true);
        }
        opts.finder.getTr(self, "", "selected").removeClass("datagrid-row-selected");
        if (opts.idField) {
            for (var i = 0; i < rows.length; i++) {
                _4(sRows, opts.idField, rows[i][opts.idField]);
            }
        }
        opts.onUnselectAll.call(self, rows);
    }

    function checkRow(self,index,hasChecked){
        var opts = self.options;
        if (!hasChecked && opts.selectOnCheck) {
            selectRow(self, index, true);
        }
        var tr = opts.finder.getTr(self, index).addClass("datagrid-row-checked");
        var ck = tr.find("div.datagrid-cell-check input[type=checkbox]");
        ck._propAttr("checked", true);
        tr = opts.finder.getTr(self, "", "checked", 2);
        //如果所有记录都选中，那么将头部checkbox选中
        if (tr.length == opts.finder.getRows(self).length) {
            var dc = self.dc;
            var header = dc.header1.add(dc.header2);
            header.find("input[type=checkbox]")._propAttr("checked", true);
        }
        var row = opts.finder.getRow(self, index);
        if (opts.idField) {
            _7(self.checkedRows, opts.idField, row);
        }
        opts.onCheck.call(self, index, row);
    }

    function uncheckRow(self,index,hasChecked){
        var opts = self.options;
        if (!hasChecked && opts.selectOnCheck) {
            unselectRow(self, index, true);
        }
        var tr = opts.finder.getTr(self, index).removeClass("datagrid-row-checked");
        var ck = tr.find("div.datagrid-cell-check input[type=checkbox]");
        ck._propAttr("checked", false);
        var dc = self.dc;
        var header = dc.header1.add(dc.header2);
        header.find("input[type=checkbox]")._propAttr("checked", false);
        var row = opts.finder.getRow(self, index);
        if (opts.idField) {
            _4(self.checkedRows, opts.idField, row[opts.idField]);
        }
        opts.onUncheck.call(self, index, row);
    }

    function uncheckAll(self,hasChecked){
        var opts = self.options;
        var rows = opts.finder.getRows(self);
        if (!hasChecked && opts.selectOnCheck) {
            unselectAll(self, true);
        }
        var dc = self.dc;
        var hck = dc.header1.add(dc.header2).find("input[type=checkbox]");
        var bck = opts.finder.getTr(self, "", "checked")
            .removeClass("datagrid-row-checked")
            .find("div.datagrid-cell-check input[type=checkbox]");
        hck.add(bck)._propAttr("checked", false);

        if (opts.idField) {
            for (var i = 0; i < rows.length; i++) {
                _4(self.checkedRows, opts.idField, rows[i][opts.idField]);
            }
        }
        opts.onUncheckAll.call(self, rows);
    }

    function selectAll(self,hasChecked){
        var opts = self.options;
        var rows = opts.finder.getRows(self);
        var selectedRows = self.selectedRows;
        if (!hasChecked && opts.checkOnSelect) {
            checkAll(self, true);
        }
        opts.finder.getTr(self, "", "allbody").addClass("datagrid-row-selected");
        if (opts.idField) {
            for (var i = 0; i < rows.length; i++) {
                _7(selectedRows, opts.idField, rows[i]);
            }
        }
        opts.onSelectAll.call(self, rows);
    }

    function checkAll(self,hasChecked){
        var opts = self.options;
        var rows = opts.finder.getRows(self);
        if (!hasChecked && opts.selectOnCheck) {
            selectAll(self, true);
        }
        var dc = self.dc;
        var hck = dc.header1.add(dc.header2).find("input[type=checkbox]");
        var bck = opts.finder.getTr(self, "", "allbody")
            .addClass("datagrid-row-checked")
            .find("div.datagrid-cell-check input[type=checkbox]");
        hck.add(bck)._propAttr("checked", true);
        if (opts.idField) {
            for (var i = 0; i < rows.length; i++) {
                _7(self.checkedRows, opts.idField, rows[i]);
            }
        }
        opts.onCheckAll.call(self, rows);
    }

    function mergeCells(self,options){
        var opts = self.options;
        options.rowspan = options.rowspan || 1;
        options.colspan = options.colspan || 1;
        if (options.rowspan == 1 && options.colspan == 1) {
            return;
        }
        var tr = opts.finder.getTr(self, (options.index != undefined ? options.index : options.id));
        if (!tr.length) {
            return;
        }
        var row = opts.finder.getRow(self, tr);
        var _181 = row[options.field];

        var td = tr.find("td[field=\"" + options.field + "\"]");
        td.attr("rowspan", options.rowspan).attr("colspan", options.colspan);
        td.addClass("datagrid-td-merged");
        for (var i = 1; i < options.colspan; i++) {
            td = td.next();
            td.hide();
            row[td.attr("field")] = _181;
        }
        for (var i = 1; i < options.rowspan; i++) {
            tr = tr.next();
            if (!tr.length) {
                break;
            }
            var row = opts.finder.getRow(self, tr);
            var td = tr.find("td[field=\"" + options.field + "\"]").hide();
            row[td.attr("field")] = _181;
            for (var j = 1; j < options.colspan; j++) {
                td = td.next();
                td.hide();
                row[td.attr("field")] = _181;
            }
        }
        updateMergeCells(self);
    }

    function updateMergeCells(self) {
        var dc = self.dc;
        dc.body1.add(dc.body2).find("td.datagrid-td-merged").each(function() {
            var td = $(this);
            var _bd = td.attr("colspan") || 1;
            var width = getColumnOption(self, td.attr("field")).width;
            for (var i = 1; i < _bd; i++) {
                td = td.next();
                width += getColumnOption(self, td.attr("field")).width + 1;
            }
            $(this).children("div.datagrid-cell")._outerWidth(width);
        });
    }

    function appendRow(self, row) {
        var data = self.data;
        var view = self.options.view;
        var insertedRows = self.insertedRows;
        view.insertRow.call(view, self, null, row);
        insertedRows.push(row);
        var pager = self.getPager();
        if(pager)
            pager.refresh({
                total : data.total
            });
    }

    function insertRow(self,param){
        var data = self.data;
        var view = self.options.view;
        var insertedRows = self.insertedRows;
        view.insertRow.call(view, self, param.index, param.row);
        insertedRows.push(param.row);
        var pager = self.getPager();
        if(pager)
            pager.refresh({
                total : data.total
            });
    }

    function deleteRow(self,index){
        var opts = self.options;
        var data = self.data;
        var insertedRows = self.insertedRows;
        var deletedRows = self.deletedRows;

        self.cancelEdit(index);
        var row = opts.finder.getRow(self, index);
        if (indexOf(insertedRows, row) >= 0) {
            _4(insertedRows, row);
        } else {
            deletedRows.push(row);
        }

        _4(self.selectedRows, opts.idField, row[opts.idField]);
        _4(self.checkedRows, opts.idField, row[opts.idField]);
        opts.view.deleteRow.call(opts.view, self, index);
        if (opts.height == "auto") {
            fixRowHeight(self);
        }
        var pager = self.getPager();
        if(pager)
            pager.refresh({
                total : data.total
            });
    }

    function getChanges(self, type) {
        var insertedRows = self.insertedRows;
        var deletedRows = self.deletedRows;
        var updatedRows = self.updatedRows;
        if (!type) {
            var rows = [];
            rows = rows.concat(insertedRows);
            rows = rows.concat(deletedRows);
            rows = rows.concat(updatedRows);
            return rows;
        } else {
            if (type == "inserted") {
                return insertedRows;
            } else {
                if (type == "deleted") {
                    return deletedRows;
                } else {
                    if (type == "updated") {
                        return updatedRows;
                    }
                }
            }
        }
        return [];
    }

    function acceptChanges(self){
        var data = self.data;
        var ok = true;
        for (var i = 0, len = data.rows.length; i < len; i++) {
            if (validateRow(self, i)) {
                processEditRow(self, i, false);
            } else {
                ok = false;
            }
        }
        if (ok) {
            history(self);
        }
    }

    function rejectChanges(self){
        var opts = self.options;
        var originalRows = self.originalRows;
        var insertedRows = self.insertedRows;
        var deletedRows = self.deletedRows;
        var selectedRows = self.selectedRows;
        var checkedRows = self.checkedRows;
        var data = self.data;
        function getIds(a) {
            var ids = [];
            for (var i = 0; i < a.length; i++) {
                ids.push(a[i][opts.idField]);
            }
            return ids;
        };
        function backStatus(ids, type) {
            for (var i = 0; i < ids.length; i++) {
                var _176 = _e3(self, ids[i]);
                if (_176 >= 0) {
                    (type == "s" ? selectRow : checkRow)(self, _176, true);
                }
            }
        };
        for (var i = 0; i < data.rows.length; i++) {
            processEditRow(self, i, true);
        }
        var srIds = getIds(selectedRows);
        var ckIds = getIds(checkedRows);
        selectedRows.splice(0, selectedRows.length);
        checkedRows.splice(0, checkedRows.length);
        data.total += deletedRows.length - insertedRows.length;
        data.rows = originalRows;
        loadData(self, data);
        backStatus(srIds, "s");
        backStatus(ckIds, "c");
        history(self);
    }

    function validateRow(self,index){
        var tr = self.options.finder.getTr(self, index);
        if (!tr.hasClass("datagrid-row-editing")) {
            return true;
        }

        var invalid = tr.find(".validatebox-invalid");
        return invalid.length == 0;
    }

    function initEditor(self, index) {
        var opts = self.options;
        var tr = opts.finder.getTr(self, index);
        tr.children("td").each(function() {
            var cell = $(this).find("div.datagrid-cell");
            var field = $(this).attr("field");
            var col = getColumnOption(self, field);
            if (col && col.editor) {
                var type, options;
                if ( typeof col.editor == "string") {
                    type = col.editor;
                } else {
                    type = col.editor.type;
                    options = col.editor.options;
                }
                var editor = opts.editors[type];
                if (editor) {
                    var html = cell.html();
                    var width = cell._outerWidth();
                    cell.addClass("datagrid-editable");
                    cell._outerWidth(width);
                    cell.html("<table border=\"0\" cellspacing=\"0\" cellpadding=\"1\"><tr><td></td></tr></table>");
                    cell.children("table").bind("click dblclick contextmenu", function(e) {
                        e.stopPropagation();
                    });

                    $.data(cell[0], "datagrid.editor", {
                        actions : editor,
                        component : editor.init(cell.find("td"), options),
                        field : field,
                        type : type,
                        oldHtml : html
                    });
                }
            }
        });
        fixRowHeight(self, index, true);
    }

    function beginEdit(self,index){
        var opts = self.options;
        var tr = opts.finder.getTr(self, index);
        var row = opts.finder.getRow(self, index);
        if (tr.hasClass("datagrid-row-editing")) {
            return;
        }
        if (opts.onBeforeEdit.call(self, index, row) == false) {
            return;
        }
        tr.addClass("datagrid-row-editing");
        initEditor(self, index);
        fixEditable(self);
        tr.find("div.datagrid-editable").each(function() {
            var field = $(this).parent().attr("field");
            var ed = $.data(this, "datagrid.editor");
            ed.actions.setValue(ed.component, row[field]);
        });
        validateRow(self, index);
        opts.onBeginEdit.call(self, index, row);
    }

    function processEditRow(self, index, canel) {
        var opts = self.options;
        var updatedRows = self.updatedRows;
        var insertedRows = self.insertedRows;
        var tr = opts.finder.getTr(self, index);
        var row = opts.finder.getRow(self, index);
        if (!tr.hasClass("datagrid-row-editing")) {
            return;
        }
        if (!canel) {
            if (!validateRow(self, index)) {
                return;
            }
            var changed = false;
            var changes = {};
            tr.find("div.datagrid-editable").each(function() {
                var field = $(this).parent().attr("field");
                var ed = $.data(this, "datagrid.editor");
                var value = ed.actions.getValue(ed.component);
                if (row[field] != value) {
                    row[field] = value;
                    changed = true;
                    changes[field] = value;
                }
            });
            if (changed) {
                if (indexOf(insertedRows, row) == -1) {
                    if (indexOf(updatedRows, row) == -1) {
                        updatedRows.push(row);
                    }
                }
            }
            opts.onEndEdit.call(self, index, row, changes);
        }
        tr.removeClass("datagrid-row-editing");
        destroyEdit(self, index);
        self.refreshRow(index);
        if (!canel) {
            opts.onAfterEdit.call(self, index, row, changes);
        } else {
            opts.onCancelEdit.call(self, index, row);
        }
    }

    function destroyEdit(self, index) {
        var opts = self.options;
        var tr = opts.finder.getTr(self,index);
        tr.children("td").each(function() {
            var cell = $(this).find("div.datagrid-editable");
            if (cell.length) {
                var ed = $.data(cell[0], "datagrid.editor");
                if (ed.actions.destroy) {
                    ed.actions.destroy(ed.component);
                }
                cell.html(ed.oldHtml);
                $.removeData(cell[0], "datagrid.editor");
                cell.removeClass("datagrid-editable");
                cell.css("width", "");
            }
        });
    }

    function getEditors(self,index) {
        var opts = self.options;
        var tr = opts.finder.getTr(self, index);
        var editers = [];
        tr.children("td").each(function() {
            var cell = $(this).find("div.datagrid-editable");
            if (cell.length) {
                var ed = $.data(cell[0], "datagrid.editor");
                editers.push(ed);
            }
        });
        return editers;
    }

    function getEditor(self, options) {
        var editers = getEditors(self, options.index != undefined ? options.index : options.id);
        for (var i = 0; i < editers.length; i++) {
            if (editers[i].field == options.field) {
                return editers[i];
            }
        }
        return null;
    };

    erajs.ui.Datagrid = function(options,customOptions){
        options = options || {};
        customOptions = customOptions || {};
        var target = options.target;
        var opts;
        if (!target) {
            var contentEl = options.contentEl;
            if (contentEl) {
                target = $(contentEl);
            }
        }

        if(target){
            this.target = target;
            opts = $.extend({},$.extend({}, erajs.ui.Datagrid.defaults,{
                queryParams : {}
            }),customOptions,erajs.ui.Datagrid.parseOptions(target),options);

            $(target).css("width", "").css("height", "");

            //初始化columns、frozenColumns、panel等
            var dg = init(this, opts);

            if (!opts.columns) {
                opts.columns = dg.columns;
            }
            if (!opts.frozenColumns) {
                opts.frozenColumns = dg.frozenColumns;
            }
            opts.columns = $.extend(true, [], opts.columns);
            opts.frozenColumns = $.extend(true, [], opts.frozenColumns);
            opts.view = $.extend({}, opts.view);

            this.options = opts;
            this.panel = dg.panel;
            this.dc = dg.dc;
            this.ss = null;
            this.selectedRows = [];
            this.checkedRows = [];
            this.data = {
                total : 0,
                rows : []
            };
            this.originalRows = [];
            this.updatedRows = [];
            this.insertedRows = [];
            this.deletedRows = [];
            this.id = this.options.id;
        }
        this._render(target);
    };

    erajs.ui.Datagrid.prototype = {

        /**
         * @member erajs.ui.Datagrid
         * 更新配置项.
         * @param {erajs.ui.Datagrid.defaults} options
         */
        datagrid : function(options){
            var opts = $.extend(this.options, options);
            this.options = opts;
            this._render();
        },

        setSelectionState : function(){
            setSelectionState(this);
        },

        createStyleSheet : function(){
            return createStyleSheet(this);
        },

        /**
         * @member erajs.ui.Datagrid
         * 返回面板对象.
         * @returns {erajs.ui.Panel}
         */
        getPanel : function(){
            return this.panel.panel;
        },

        /**
         * @member erajs.ui.Datagrid
         * 返回分页对象.
         *  @returns {erajs.ui.Pagination}
         */
        getPager : function(){
            return this.pager;
        },

        /**
         * @member erajs.ui.Datagrid
         * 返回列字段.
         * @param {Boolean} frozen 是否获取固定列
         * @returns {Array} 如果{@link #frozen}属性为true，将返回固定列的字段名.
         */
        getColumnFields : function(frozen){
            return getColumnFields(this,frozen);
        },

        /**
         * @member erajs.ui.Datagrid
         * 返回指定列属性.
         * @param {String} field 列名
         * @returns {Object}
         */
        getColumnOption : function(field){
            return getColumnOption(this,field);
        },

        /**
         * @member erajs.ui.Datagrid
         * 改变表格大小,重新布局.
         * @param {Object} param
         * @param {Number} [param.width] 新的宽度.
         * @param {Number} [param.height] 新的高度.
         */
        resize : function(param){
            setSize(this,param);
        },

        /**
         * @member erajs.ui.Datagrid
         * 加载和显示第一页的所有行;
         * 如果指定了'param'，它将取代'queryParams'属性;
         * 通常可以通过传递一些参数执行一次查询，通过调用这个方法从服务器加载新数据.
         *
         * 用法如下：
         *
         *      var dg = erajs.getCmp('dg');
         *      dg.load({
         *          code: '01',
         *          name: 'name01'
         *      });
         *
         * @param {Object} param 请求参数
         */
        load : function(param){
            var opts = this.options;
            opts.pageNumber = 1;
            var pager = this.getPager();
            if(pager)
                pager.refresh({
                    pageNumber : 1
                });
            request(this, param);
        },

        /**
         * @member erajs.ui.Datagrid
         * 重新加载，等同于{@ling #load}方法，但是它将保持在当前页.
         * @param {Object} param 请求参数
         */
        reload : function(param){
            request(this,param);
        },

        /**
         * @member erajs.ui.Datagrid
         * 更新页脚行的值并刷新.
         * 用法如下：
         *
         *      var dg = erajs.getCmp('dg');
         *      var rows = dg.getFooterRows();
         *      rows[0]['name'] = 'new name';
         *      rows[0]['salary'] = 60000;
         *      dg.reloadFooter();

         *  页脚加载新的数据：
         *      dg.reloadFooter([
         *          {name: 'name1', salary: 60000},
         *          {name: 'name2', salary: 65000}
         *      ]);
         *
         * @param {Array} footer 数据数组.
         */
        reloadFooter : function(footer){
            var opts = this.options;
            var dc = this.dc;
            if (footer) {
                this.footer = footer;
            }
            if (opts.showFooter) {
                opts.view.renderFooter.call(opts.view, this, dc.footer2, false);
                opts.view.renderFooter.call(opts.view, this, dc.footer1, true);
                if (opts.view.onAfterRender) {
                    opts.view.onAfterRender.call(opts.view, this);
                }
                this.fixRowHeight();
            }
        },

        /**
         * @member erajs.ui.Datagrid
         * 返回第一个被选中的行或如果没有选中的行则返回null.
         */
        getSelected : function(){
            var rows = getSelections(this);
            return rows.length > 0 ? rows[0] : null;
        },

        /**
         * @member erajs.ui.Datagrid
         * 返回所有被选中的行，当没有记录被选中的时候将返回一个空数组.
         */
        getSelections : function(){
            return getSelections(this);
        },

        /**
         * @member erajs.ui.Datagrid
         * 自动调整列宽度以适应内容.
         * @param {String} field 列字段名.
         */
        autoSizeColumn : function(field){
            autoSizeColumn(this,field);
        },

        /**
         * @member erajs.ui.Datagrid
         * 固定指定行高度。如果'index'参数未配置，所有行高度都是固定的.
         * @param {Number} index 行索引.
         */
        fixRowHeight : function(index){
            fixRowHeight(this,index);
        },

        /**
         * @member erajs.ui.Datagrid
         * 固定列大小,如果'field'参数未配置，所有列大小将都是固定的.
         * @param {String} field 列字段名.
         */
        fixColumnSize : function(field){
            fixColumnSize(this,field);
        },

        /**
         * @private
         * @member erajs.ui.Datagrid
         * 使列自动展开/收缩到合适的DataGrid宽度.
         */
        fitColumns : function(){
            fitColumns(this);
        },

        /**
         * @member erajs.ui.Datagrid
         * 滚动到指定的行.
         * @param {Number} index 行索引.
         */
        scrollTo : function(index){
            scrollTo(this,index);
        },

        /**
         * @member erajs.ui.Datagrid
         * 冻结指定行,当dataGrid表格向下滚动的时候始终保持被冻结的行显示在顶部.
         */
        freezeRow : function(index){
            freezeRow(this,index);
        },

        /**
         * @member erajs.ui.Datagrid
         * 高亮显示指定行.
         * @param {Number} index 行索引.
         */
        highlightRow : function(index){
            highlightRow(this,index);
            scrollTo(this,index);
        },

        /**
         * @member erajs.ui.Datagrid
         * 加载本地数据，旧的行将被移除.
         * @param {Array/Object} data 数据集.
         */
        loadData : function(data){
            loadData(this,data);
            history(this);
        },

        /**
         * @member erajs.ui.Datagrid
         * 返回当前页的所有行.
         */
        getRows : function(){
            return this.data.rows;
        },

        /**
         * @member erajs.ui.Datagrid
         * 返回页脚行.
         */
        getFooterRows : function(){
            return this.footer;
        },

        /**
         * @member erajs.ui.Datagrid
         * 返回指定行的索引号.
         * @param {Object/String} row 一行记录或一个ID字段值.
         */
        getRowIndex : function(row) {
            return getRowIndex(this,row);
        },

        /**
         * @member erajs.ui.Datagrid
         * 在复选框被选中的时候返回所有行.
         * @returns {Array}
         */
        getChecked : function(){
            return getChecked(this);
        },

        /**
         * @member erajs.ui.Datagrid
         * 清除所有勾选的行.
         */
        clearChecked : function(){
            var self = this;
            var selectedRows = self.selectedRows;
            var checkedRows = self.checkedRows;
            checkedRows.splice(0, checkedRows.length);
            uncheckAll(self);
            if (self.options.selectOnCheck) {
                selectedRows.splice(0, selectedRows.length);
            }
        },

        /**
         * @member erajs.ui.Datagrid
         * 返回加载完毕后的数据.
         * @returns {Object}
         */
        getData : function(){
            return this.data;
        },

        /**
         * @member erajs.ui.Datagrid
         * 显示载入状态.
         */
        loading : function(){
            var opts = this.options;
            var pager = this.getPager();
            if(pager)
                pager.loading();
            if (opts.loadMsg) {
                var ptarget = this.panel.getBody();
                if (!ptarget.children("div.datagrid-mask").length) {
                    $("<div class=\"datagrid-mask\" style=\"display:block\"></div>")
                        .appendTo(ptarget);

                    var msg = $("<div class=\"datagrid-mask-msg\" style=\"display:block;left:50%\"></div>")
                        .html(opts.loadMsg)
                        .appendTo(ptarget);
                    msg._outerHeight(40);
                    msg.css({
                        marginLeft : (-msg.outerWidth() / 2),
                        lineHeight : (msg.height() + "px")
                    });
                }
            }
        },

        /**
         * @member erajs.ui.Datagrid
         * 隐藏载入状态.
         */
        loaded : function(){
            var pager = this.getPager();
            if(pager){
                pager.loaded();
            }
            var ptarget = this.panel.getBody();
            ptarget.children("div.datagrid-mask-msg").remove();
            ptarget.children("div.datagrid-mask").remove();
        },

        /**
         * @member erajs.ui.Datagrid
         * 排序.
         *
         * 示例如下：
         *
         *      datagrid.sort('itemid');
         *      datagrid.sort({sortName: 'productid',sortOrder: 'desc'});
         *
         * @param {Object} param
         */
        sort : function(param){
            sort(this,param);
        },

        /**
         * @member erajs.ui.Datagrid
         * 选择一行，行索引从0开始.
         * @param {Number} index 行索引.
         */
        selectRow : function(index){
            selectRow(this,index);
        },

        /**
         * @member erajs.ui.Datagrid
         * 通过ID值参数选择一行.
         * @param {String} idValue
         */
        selectRecord : function(idValue){
            var opts = this.options;
            if (opts.idField) {
                var index = getRowIndex(this, idValue);
                if (index >= 0) {
                    this.selectRow(index);
                }
            }
        },

        /**
         * @member erajs.ui.Datagrid
         * 取消选择一行.
         * @param {Number} index
         */
        unselectRow : function(index){
            unselectRow(this,index);
        },

        /**
         * @member erajs.ui.Datagrid
         * 选择当前页中所有的行.
         */
        selectAll : function(){
            selectAll(this);
        },

        /**
         * @member erajs.ui.Datagrid
         * 取消选择所有当前页中所有的行.
         */
        unselectAll : function(){
            unselectAll(this);
        },

        /**
         * @member erajs.ui.Datagrid
         * 取消勾选当前页中的所有行.
         */
        uncheckAll : function(){
            uncheckAll(this);
        },

        /**
         * @member erajs.ui.Datagrid
         * 取消勾选一行，行索引从0开始.
         * @param {Number} index
         */
        uncheckRow : function(index){
            uncheckRow(this,index);
        },

        /**
         * @member erajs.ui.Datagrid
         * 勾选一行，行索引从0开始.
         * @param {Number} index 行索引.
         */
        checkRow : function(index){
            checkRow(this,index);
        },

        /**
         * @member erajs.ui.Datagrid
         * 勾选当前页中的所有行.
         */
        checkAll : function(){
            checkAll(this);
        },

        /**
         * @member erajs.ui.Datagrid
         * 清除所有选择的行.
         */
        clearSelections : function(){
            var self = this;
            var selectedRows = self.selectedRows;
            var checkedRows = self.checkedRows;
            selectedRows.splice(0, selectedRows.length);
            unselectAll(this);
            if (self.options.checkOnSelect) {
                checkedRows.splice(0, checkedRows.length);
            }
        },

        /**
         * @member erajs.ui.Datagrid
         * 开始编辑一行.
         * @param {Number} index 行索引.
         */
        beginEdit : function(index){
            beginEdit(this,index);
        },

        /**
         * @member erajs.ui.Datagrid
         * 结束编辑.
         * @param {Number} index 行索引.
         */
        endEdit : function(index){
            processEditRow(this,index,false);
        },

        /**
         * @member erajs.ui.Datagrid
         * 退出编辑行.
         * @param {Number} index 行索引.
         */
        cancelEdit : function(index){
            processEditRow(this,index,true);
        },

        /**
         * @member erajs.ui.Datagrid
         * 获取指定行的编辑器，每个编辑器有如下属性:
         * actions: 编辑器可以做的行为.
         * target: 目标编辑器jQuery对象.
         * field: 字段名.
         * type: 编辑器类型,比如：'text','combobox','datebox'等.
         * @param {Number} index 行索引.
         */
        getEditors : function(index){
            return getEditors(this,index);
        },

        /**
         * @member erajs.ui.Datagrid
         * 获取特定的编辑器,options参数有2个属性:
         * @param {Object} options
         * @param {Number} [options.index] 行索引.
         * @param {String} [options.field] 字段名.
         */
        getEditor : function(options){
            return getEditor(this,options);
        },

        /**
         * @member erajs.ui.Datagrid
         * 刷新行.
         * @param index
         */
        refreshRow : function(index){
            var opts = this.options;
            opts.view.refreshRow.call(opts.view, this, index);
        },

        validateRow : function(index){
            return  validateRow(this,index);
        },

        /**
         * @member erajs.ui.Datagrid
         * 更新指定行，参数包含下列属性:
         * @param {Object} param
         * @param {Object} [param.index] 更新行的索引.
         * @param {Object} [param.row] 行新的数据.
         */
        updateRow : function(param){
            var opts = this.options;
            opts.view.updateRow.call(opts.view, this, param.index, param.row);
        },

        /**
         * @member erajs.ui.Datagrid
         * 追加一个新行。新行将被添加到最后的位置.
         * @param {Number} row 行数据.
         */
        appendRow : function(row){
            appendRow(this,row);
        },

        /**
         * @member erajs.ui.Datagrid
         * 插入一个新行，参数包括一下属性:
         * @param {Object} param
         * @param {Number} [param.index] 要插入的行索引，如果该索引值未定义，则追加新行.
         * @param {Number} [param.row] 行数据.
         */
        insertRow : function(param){
            insertRow(this,param);
        },

        /**
         * @member erajs.ui.Datagrid
         * 删除行.
         * @param {Number} index 行索引.
         */
        deleteRow : function(index){
            deleteRow(this,index);
        },

        /**
         * @member erajs.ui.Datagrid
         * 从上一次的提交获取改变的所有行;类型参数指明用哪些类型改变的行，
         * 可以使用的值有：inserted,deleted,updated等。
         * 当类型参数未配置的时候返回所有改变的行.
         * @param {String} type 类型
         *
         * - 'inserted'
         * - 'deleted'
         * - 'updated'
         */
        getChanges : function(type){
            return getChanges(this,type);
        },

        /**
         * @member erajs.ui.Datagrid
         * 提交所有从加载或者上一次调用acceptChanges函数后更改的数据.
         */
        acceptChanges : function(){
            acceptChanges(this);
        },

        /**
         * @member erajs.ui.Datagrid
         * 回滚所有从创建或者上一次调用acceptChanges函数后更改的数据.
         */
        rejectChanges : function(){
            rejectChanges(this);
        },

        /**
         * @member erajs.ui.Datagrid
         * 合并单元格，options包含以下属性:
         *
         * 示例用法：
         *
         *     datagrid.mergeCells({
         *          index: 1,
         *          field: 'name',
         *          colspan: 2,
         *          type: 'footer'
         *     });
         *
         * @param {Object} options
         * @param {Number} [options.index] 行索引.
         * @param {String} [options.field] 字段名.
         * @param {Number} [options.rowspan] 整合单元格要跨的行数.
         * @param {Number} [options.colspan] 整合单元格要跨的列数.
         */
        mergeCells : function(options){
            mergeCells(this,options);
        },

        /**
         * @member erajs.ui.Datagrid
         * 显示指定的列.
         * @param {String} field 列字段名.
         */
        showColumn : function(field){
            var panel = this.panel.getPanel();
            panel.find("td[field=\"" + field + "\"]").show();
            this.getColumnOption(field).hidden = false;
            this.fitColumns();
        },

        /**
         * @member erajs.ui.Datagrid
         * 隐藏指定列.
         * @param {String} field 列字段名.
         */
        hideColumn : function(field){
            var panel = this.panel.getPanel();
            panel.find("td[field=\"" + field + "\"]").hide();
            this.getColumnOption(field).hidden = true;
            this.fitColumns();
        },

        /**
         * @member erajs.ui.Datagrid
         * 在'forceDestroy'为true的时，销毁面板时将跳过{@link #onBeforeDestory}回调函数.
         * @param {Boolean} forceDestroy 是否强行销毁.
         */
        destroy: function (forceDestroy) {
            var me = this;
            me.panel.destroy(forceDestroy);
            erajs.destroy(this);
        },

        _render : function(target){
            var opts = this.options;
            _58(this);
            bindEvents(this);
            setSize(this);
            //如果data属性有值，那么直接加载，否则从dom元素解析判断是否有数据
            if (opts.data) {
                loadData(this, opts.data);
                history(this);
            } else {
                var data = erajs.ui.Datagrid.parseData(this);
                if (data.total > 0) {
                    loadData(this, data);
                    history(this);
                }
            }

            if(opts.autoLoad){
                //如果上述2种方式都没有数据，那么判断是否需要从远程通过ajax获取
                request(this);
            }
        }
    };

    var editors = {
        text: {
            init: function (container, options) {
                var input = $('<input type="text" class="datagrid-editable-input">').appendTo(container);
                return input;
            },
            destroy: function (target) {
                $(target).remove();
            },
            getValue: function (target) {
                return $(target).val();
            },
            setValue: function (target, value) {
                $(target).val(value);
            },
            resize: function (target, width) {
                $(target)._outerWidth(width);
            }
        },
        checkbox : {
            init : function(container, options) {
                var input = $("<input type=\"checkbox\">").appendTo(container);
                input.val(options.on);
                input.attr("offval", options.off);
                return input;
            },
            getValue : function(target) {
                if ($(target).is(":checked")) {
                    return $(target).val();
                } else {
                    return $(target).attr("offval");
                }
            },
            setValue : function(target, value) {
                var checked = false;
                if ($(target).val() == value) {
                    checked = true;
                }
                $(target)._propAttr("checked", checked);
            }
        },
        textarea : {
            init : function(container, options) {
                var textarea = $("<textarea class=\"datagrid-editable-input\"></textarea>").appendTo(container);
                return textarea;
            },
            getValue : function(target) {
                return $(target).val();
            },
            setValue : function(target, value) {
                $(target).val(value);
            },
            resize : function(target, width) {
                $(target)._outerWidth(width);
            }
        },
        numberbox : {
            init : function(container, options) {
                var input = $("<input type=\"text\" class=\"datagrid-editable-input\">").appendTo(container);
                options = $.extend({
                    target : input[0]
                },options);
                var numberbox = new erajs.ui.Numberbox(options);
                return numberbox;
            },
            destroy : function(self) {
                self.destroy();
            },
            getValue : function(self) {
                var target = self.target;
                $(target).blur();
                return self.getValue();
            },
            setValue : function(self,value) {
                self.setValue(value);
            },
            resize : function(self, width) {
                self.resize(width);
            }
        },
        datebox : {
            init : function(container, options) {
                var input = $("<input type=\"text\">").appendTo(container);
                options = $.extend({
                    target : input[0]
                },options);

                var datebox = new erajs.ui.Datebox(options);
                return datebox;
            },
            destroy : function(self) {
                self.destroy();
            },
            getValue : function(self) {
                return self.getValue();
            },
            setValue : function(self,value) {
                self.setValue(value);
            },
            resize : function(self,width) {
                self.resize(width);
            }
        },
        combobox : {
            init : function(container, options) {
                var input = $("<input type=\"text\">").appendTo(container);
                options = options || {};
                options = $.extend({
                    target : input[0]
                },options);
                var combobox = new erajs.ui.Combobox(options);
                return combobox;
            },
            destroy : function(self) {
                self.destroy();
            },
            getValue : function(self) {
                var opts = self.options;
                if (opts.multiple) {
                    return self.getValues().join(opts.separator);
                } else {
                    return self.getValue();
                }
            },
            setValue : function(self, value) {
                var opts = self.options;
                if (opts.multiple) {
                    if (value) {
                        self.setValues(value.split(opts.separator));
                    } else {
                        self.clear();
                    }
                } else {
                    self.setValue(value);
                }
            },
            resize : function(self,width) {
                self.resize(width);
            }
        }
    };

    /**
     * @class erajs.ui.Datagrid.View
     */
    var view = {

        /**
         * 渲染组件,数据加载时调用.
         * @param {erajs.ui.Datagrid} self DataGrid对象
         * @param {HTMLElement} container 行容器
         * @param {Boolean} frozen 是否冻结容器
         */
        render : function(self, container, frozen) {
            var opts = self.options;
            var rows = self.data.rows;
            var fields = self.getColumnFields(frozen);

            if (frozen) {
                if (!(opts.rownumbers || (opts.frozenColumns && opts.frozenColumns.length))) {
                    return;
                }
            }

            var btable = ["<table class=\"datagrid-btable\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><tbody>"];
            for (var i = 0; i < rows.length; i++) {
                var css = opts.rowStyler ? opts.rowStyler.call(self, i, rows[i]) : "";
                var clas = "";
                var style = "";
                if ( typeof css == "string") {
                    style = css;
                } else {
                    if (css) {
                        clas = css["class"] || "";
                        style = css["style"] || "";
                    }
                }
                var cls = "class=\"datagrid-row " + (i % 2 && opts.striped ? "datagrid-row-alt " : " ") + clas + "\"";
                var _20d = style ? "style=\"" + style + "\"" : "";
                var _20e = self.rowIdPrefix + "-" + ( frozen ? 1 : 2) + "-" + i;
                btable.push("<tr id=\"" + _20e + "\" datagrid-row-index=\"" + i + "\" " + cls + " " + _20d + ">");
                btable.push(this.renderRow.call(this, self, fields, frozen, i, rows[i]));
                btable.push("</tr>");
            }
            btable.push("</tbody></table>");
            //解决大数据加载慢问题
            $(container).html(btable.join(""));
            // $(container)[0].innerHTML = btable.join("");
        },

        /**
         * 渲染行页脚.
         * @param {erajs.ui.Datagrid} self DataGrid对象
         * @param {HTMLElement} container 页脚容器
         * @param {Boolean} frozen 是否冻结容器
         */
        renderFooter : function(self, container, frozen) {
            var opts = self.options;
            var rows = self.footer || [];
            var fields = self.getColumnFields(frozen);
            var ftable = ["<table class=\"datagrid-ftable\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><tbody>"];
            for (var i = 0; i < rows.length; i++) {
                ftable.push("<tr class=\"datagrid-row\" datagrid-row-index=\"" + i + "\">");
                ftable.push(this.renderRow.call(this, self, fields, frozen, i, rows[i]));
                ftable.push("</tr>");
            }
            ftable.push("</tbody></table>");
            $(container).html(ftable.join(""));
        },

        /**
         * 这是一个属性功能，将调用render函数.
         * @param {erajs.ui.Datagrid} self DataGrid对象
         * @param {Array} fields 字段数组
         * @param {Boolean} frozen 是否冻结容器
         * @param {Number} rowIndex 行索引
         * @param {Object} rowData 行记录数据
         * @returns {string}
         */
        renderRow : function(self, fields, frozen, rowIndex, rowData) {
            var opts = self.options;
            var cc = [];
            if (frozen && opts.rownumbers) {
                var rindex = rowIndex + 1;
                if (opts.pagination) {
                    rindex += (opts.pageNumber - 1) * opts.pageSize;
                }
                cc.push("<td class=\"datagrid-td-rownumber\"><div class=\"datagrid-cell-rownumber\">" + rindex + "</div></td>");
            }
            for (var i = 0; i < fields.length; i++) {
                var field = fields[i];
                var col = self.getColumnOption(field);
                if (col) {
                    var value = rowData[field];
                    var css = col.styler ? (col.styler(value, rowData, rowIndex) || "") : "";
                    var clas = "";
                    var style = "";
                    if ( typeof css == "string") {
                        style = css;
                    } else {
                        if (css) {
                            clas = css["class"] || "";
                            style = css["style"] || "";
                        }
                    }
                    var cls = clas ? "class=\"" + clas + "\"" : "";
                    var styleHtml = col.hidden ? "style=\"display:none;" + style + "\"" : ( style ? "style=\"" + style + "\"" : "");
                    cc.push("<td field=\"" + field + "\" " + cls + " " + styleHtml + ">");
                    var styleHtml = "";
                    if (!col.checkbox) {
                        if (col.align) {
                            styleHtml += "text-align:" + col.align + ";";
                        }
                        if (!opts.nowrap) {
                            styleHtml += "white-space:normal;height:auto;";
                        } else {
                            if (opts.autoRowHeight) {
                                styleHtml += "height:auto;";
                            }
                        }
                    }
                    cc.push("<div style=\"" + styleHtml + "\" ");
                    cc.push(col.checkbox ? "class=\"datagrid-cell-check\"" : "class=\"datagrid-cell " + col.cellClass + "\"");
                    cc.push(">");
                    if (col.checkbox) {
                        cc.push("<input type=\"checkbox\" " + (rowData.checked ? "checked=\"checked\"" : ""));
                        cc.push(" name=\"" + field + "\" value=\"" + (value != undefined ? value : "") + "\">");
                    } else {
                        if (col.formatter) {
                            cc.push(col.formatter(value, rowData, rowIndex));
                        } else {
                            cc.push(value);
                        }
                    }
                    cc.push("</div>");
                    cc.push("</td>");
                }
            }
            return cc.join("");
        },

        /**
         * 刷新指定的行.
         * @param {erajs.ui.Datagrid} self DataGrid对象
         * @param {Number} rowIndex 行索引
         */
        refreshRow : function(self, rowIndex) {
            this.updateRow.call(this, self, rowIndex, {});
        },

        /**
         * 更新指定行.
         * @param {erajs.ui.Datagrid} self DataGrid对象
         * @param {Number} rowIndex 行索引
         * @param {Object} row 行记录
         */
        updateRow : function(self, rowIndex, row) {
            var opts = self.options;
            var rows = self.getRows();
            $.extend(rows[rowIndex], row);
            var css = opts.rowStyler ? opts.rowStyler.call(self, rowIndex, rows[rowIndex]) : "";
            var cls = "";
            var style = "";
            if ( typeof css == "string") {
                style = css;
            } else {
                if (css) {
                    cls = css["class"] || "";
                    style = css["style"] || "";
                }
            }
            var cls = "datagrid-row " + (rowIndex % 2 && opts.striped ? "datagrid-row-alt " : " ") + cls;

            function _225(frozen) {
                var columns = self.getColumnFields(frozen);
                var tr = opts.finder.getTr(self, rowIndex, "body", ( frozen ? 1 : 2));
                var checked = tr.find("div.datagrid-cell-check input[type=checkbox]").is(":checked");
                tr.html(this.renderRow.call(this, self, columns, frozen, rowIndex, rows[rowIndex]));
                tr.attr("style", style)
                    .attr("class", tr.hasClass("datagrid-row-selected") ? cls + " datagrid-row-selected" : cls);
                if (checked) {
                    tr.find("div.datagrid-cell-check input[type=checkbox]")._propAttr("checked", true);
                }
            };
            _225.call(this, true);
            _225.call(this, false);
            self.fixRowHeight(rowIndex);
        },

        /**
         * 插入行.
         * @param {erajs.ui.Datagrid} self DataGrid对象
         * @param {Number} index 索引
         * @param {Object} row 行记录
         */
        insertRow : function(self, index, row) {
            var opts = self.options;
            var dc = self.dc;
            var data = self.data;
            if (index == undefined || index == null) {
                index = data.rows.length;
            }
            if (index > data.rows.length) {
                index = data.rows.length;
            }

            function updateNumber(frozen) {
                var type = frozen ? 1 : 2;
                for (var i = data.rows.length - 1; i >= index; i--) {
                    var tr = opts.finder.getTr(self, i, "body", type);
                    tr.attr("datagrid-row-index", i + 1);
                    tr.attr("id", self.rowIdPrefix + "-" + type + "-" + (i + 1));
                    if (frozen && opts.rownumbers) {
                        var num = i + 2;
                        if (opts.pagination) {
                            num += (opts.pageNumber - 1) * opts.pageSize;
                        }
                        tr.find("div.datagrid-cell-rownumber").html(num);
                    }
                    if (opts.striped) {
                        tr.removeClass("datagrid-row-alt").addClass((i + 1) % 2 ? "datagrid-row-alt" : "");
                    }
                }
            };

            function insertTr(frozen) {
                var type = frozen ? 1 : 2;
                var rid = self.rowIdPrefix + "-" + type + "-" + index;
                var tr = "<tr id=\"" + rid + "\" class=\"datagrid-row\" datagrid-row-index=\"" + index + "\"></tr>";
                if (index >= data.rows.length) {
                    if (data.rows.length) {
                        opts.finder.getTr(self, "", "last", type).after(tr);
                    } else {
                        var cc = frozen ? dc.body1 : dc.body2;
                        cc.html("<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><tbody>" + tr + "</tbody></table>");
                    }
                } else {
                    opts.finder.getTr(self, index + 1, "body", type).before(tr);
                }
            };

            updateNumber.call(this, true);
            updateNumber.call(this, false);
            insertTr.call(this, true);
            insertTr.call(this, false);
            data.total += 1;
            data.rows.splice(index, 0, row);
            this.refreshRow.call(this, self, index);
        },

        /**
         * 删除行.
         * @param {erajs.ui.Datagrid} self DataGrid对象
         * @param {Number} index 索引
         */
        deleteRow : function(self, index) {
            var opts = self.options;
            var data = self.data;

            function updateNumber(frozen) {
                var type = frozen ? 1 : 2;
                for (var i = index + 1; i < data.rows.length; i++) {
                    var tr = opts.finder.getTr(self, i, "body", type);
                    tr.attr("datagrid-row-index", i - 1);
                    tr.attr("id", self.rowIdPrefix + "-" + type + "-" + (i - 1));
                    if (frozen && opts.rownumbers) {
                        var num = i;
                        if (opts.pagination) {
                            num += (opts.pageNumber - 1) * opts.pageSize;
                        }
                        tr.find("div.datagrid-cell-rownumber").html(num);
                    }
                    if (opts.striped) {
                        tr.removeClass("datagrid-row-alt").addClass((i - 1) % 2 ? "datagrid-row-alt" : "");
                    }
                }
            };
            opts.finder.getTr(self, index).remove();
            updateNumber.call(this, true);
            updateNumber.call(this, false);
            data.total -= 1;
            data.rows.splice(index, 1);
        },

        /**
         * @event
         * 在视图被呈现之前触发.
         * @param {erajs.ui.Datagrid} self DataGrid对象
         * @param {Array} rows 所有记录集.
         */
        onBeforeRender : function(self, rows) {
        },

        /**
         * @event
         * 在视图被呈现之后触发.
         * @param {erajs.ui.Datagrid} self DataGrid对象
         */
        onAfterRender : function(self) {
            var opts = self.options;
            if (opts.showFooter) {
                var footer = self.panel.getPanel().find("div.datagrid-footer");
                footer.find("div.datagrid-cell-rownumber,div.datagrid-cell-check").css("visibility", "hidden");
            }
        }
    };

    /**
     * @class erajs.ui.Datagrid.defaults
     * @extends erajs.ui.Panel.defaults
     */
    erajs.ui.Datagrid.defaults = $.extend({}, erajs.ui.Panel.defaults, {

        /**
         * @property {Boolean} 当url有值时，为true自动加载数据.
         */
        autoLoad : true,

        sharedStyleSheet : false,

        /**
         * @property {Array}
         * 同列属性，但是这些列将会被冻结在左侧.
         */
        frozenColumns : undefined,

        /**
         * @property {Array}
         * 列配置对象，详见列属性说明中更多的细节.
         */
        columns : undefined,

        /**
         * @property {Boolean}
         * 自动展开/收缩列的大小，以适应网格的宽度，防止水平滚动.
         */
        fitColumns : false,

        /**
         * @property {String}
         * 调整列的位置,在使用'right'的时候用户可以通过拖动右侧边缘的列标题调整列,可用的值有:
         *
         * - 'left'
         * - 'right'
         * - 'both'
         */
        resizeHandle : "right",

        /**
         * @property {Boolean}
         * 定义是否基于某行的内容设置行的高度.设置为false改善加载数据的性能.因为这个操作是在数据加载之后完成的.添加了true会增加加载的时间.
         */
        autoRowHeight : true,

        /**
         * @property {Array/String}
         * 顶部工具栏的DataGrid面板,可能的值：
         *
         * - '一个数组，每个工具属性都和linkbutton一样'
         * - '选择器指定的工具栏'
         *
         */
        toolbar : null,

        /**
         * @property {Boolean}
         * 是否显示斑马线效果.
         */
        striped : false,

        /**
         * @property {String}
         * 请求远程数据方法类型.
         */
        method : "post",

        /**
         * @property {Boolean}
         * 是否禁止文字自动换行.
         * 如果为true，则在同一行中显示数据,设置为true可以提高加载性能.
         */
        nowrap : true,

        /**
         * @property {Object}
         * 指明标识字段.
         */
        idField : null,

        /**
         * @property {Object}
         * 请求数据的地址.
         */
        url : null,

        /**
         * @property {Object/Array}
         * 加载的数据.
         */
        data : null,

        /**
         * @property {String}
         * 加载数据的时显示提示消息.
         */
        loadMsg : "Processing, please wait ...",

        /**
         * @property {Boolean}
         * 是否显示序号列.
         *
         */
        rownumbers : false,

        /**
         * @property {Boolean}
         * 是否只能单选行.
         */
        singleSelect : false,

        /**
         * @property {Boolean}
         * 在启用多行选择{@link #singleSelect}的时候允许使用Ctrl键+鼠标点击的方式进行多选操作.
         */
        ctrlSelect : false,

        /**
         * @property {Boolean}
         * 如果为true，单击复选框将永远选择行。
         * 如果为false，选择行将不选中复选框.
         */
        selectOnCheck : true,

        /**
         * @property {Boolean}
         * 如果为true，当用户点击行的时候该复选框就会被选中或取消选中。
         * 如果为false，当用户仅在点击该复选框的时候才会呗选中或取消.
         */
        checkOnSelect : true,

        /**
         * @property {Boolean}
         * 是否显示分页工具栏.
         */
        pagination : false,

        /**
         * @property {String}
         * 分页工具栏的位置，可用值：
         *
         * - 'bottom'
         * - 'top'
         */
        pagePosition : "bottom",

        /**
         * @property {Number}
         * 在设置分页属性的时候初始化页码.
         */
        pageNumber : 1,

        /**
         * @property {Number}
         * 在设置分页属性的时候初始化页面大小.
         */
        pageSize : 10,

        /**
         * @property {Array}
         * 在设置分页属性的时候 初始化页面大小选择列表.
         */
        pageList : [10, 20, 30, 40, 50],

        /**
         * @property {Object}
         * 在请求远程数据的时候发送额外的参数.
         */
        queryParams : {},

        /**
         * @property {Object}
         * 定义哪些列可以进行排序.
         */
        sortName : null,

        /**
         * @property {String}
         * 定义列的排序顺序，只能是'asc'或'desc'.
         */
        sortOrder : "asc",

        /**
         * @property {Boolean}
         * 定义是否允许多列排序.
         */
        multiSort : false,

        /**
         * @property {Boolean}
         * 定义从服务器对数据进行排序.
         */
        remoteSort : false,

        /**
         * @property {Boolean}
         * 定义是否显示行头.
         */
        showHeader : true,

        /**
         * @property {Boolean}
         * 定义是否显示行脚.
         */
        showFooter : false,

        /**
         * @property {Number}
         * 滚动条的宽度(当滚动条是垂直的时候)或高度(当滚动条是水平的时候).
         */
        scrollbarSize : 18,

        /**
         * @property {Function}
         * 返回样式如'background:red'.
         * @param {Number} index 该行索引从0开始
         * @param {Object} row 与此相对应的记录行
         */
        rowStyler : function(index,row) {
        },

        /**
         * @property {Function}
         * 定义如何从远程服务器加载数据.
         * @param {Object} param 参数对象传递给远程服务器.
         * @param {Function} success 当检索数据成功的时候会调用该回调函数.
         * @param {Function} error 当检索数据失败的时候会调用该回调函数.
         * @returns {boolean} 返回false可以放弃本次请求动作.
         */
        loader : function(param, success, error) {
            var opts = this.options;
            if (!opts.url) {
                return false;
            }
            $.ajax({
                type : opts.method,
                url : opts.url,
                data : param,
                dataType : "json",
                success : function(data) {
                    success(data);
                },
                error : function() {
                    error.apply(this, arguments);
                }
            });
        },

        /**
         * @property {Function}
         * 返回过滤数据显示,该函数带一个参数'data'用来指向源数据（即：获取的数据源，比如Json对象);
         * 您可以改变源数据的标准数据格式。这个函数必须返回包含'total'和'rows'属性的标准数据对象
         * @param {Array/Object}
         */
        loadFilter : function(data) {
            if ( typeof data.length == "number" && typeof data.splice == "function") {
                return {
                    total : data.length,
                    rows : data
                };
            } else {
                return data;
            }
        },

        /**
         * @private
         * @property {Function}
         */
        finder : {
            getTr : function(self, index, type, num) {
                type = type || "body";
                num = num || 0;
                var dc = self.dc;
                var opts = self.options;
                if (num == 0) {
                    var tr1 = opts.finder.getTr(self, index, type, 1);
                    var tr2 = opts.finder.getTr(self, index, type, 2);
                    return tr1.add(tr2);
                } else {
                    if (type == "body") {
                        var tr = $("#" + self.rowIdPrefix + "-" + num + "-" + index);
                        if (!tr.length) {
                            tr = (num == 1 ? dc.body1 : dc.body2).find(">table>tbody>tr[datagrid-row-index=" + index + "]");
                        }
                        return tr;
                    } else {
                        if (type == "footer") {
                            return (num == 1 ? dc.footer1 : dc.footer2).find(">table>tbody>tr[datagrid-row-index=" + index + "]");
                        } else {
                            if (type == "selected") {
                                return (num == 1 ? dc.body1 : dc.body2).find(">table>tbody>tr.datagrid-row-selected");
                            } else {
                                if (type == "highlight") {
                                    return (num == 1 ? dc.body1 : dc.body2).find(">table>tbody>tr.datagrid-row-over");
                                } else {
                                    if (type == "checked") {
                                        return (num == 1 ? dc.body1 : dc.body2).find(">table>tbody>tr.datagrid-row-checked");
                                    } else {
                                        if (type == "last") {
                                            return (num == 1 ? dc.body1 : dc.body2).find(">table>tbody>tr[datagrid-row-index]:last");
                                        } else {
                                            if (type == "allbody") {
                                                return (num == 1 ? dc.body1 : dc.body2).find(">table>tbody>tr[datagrid-row-index]");
                                            } else {
                                                if (type == "allfooter") {
                                                    return (num == 1 ? dc.footer1 : dc.footer2).find(">table>tbody>tr[datagrid-row-index]");
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },

            getRow : function(self, index) {
                var index = ( typeof index == "object") ? index.attr("datagrid-row-index") : index;
                return self.data.rows[parseInt(index)];
            },

            getRows : function(self) {
                return self.getRows();
            }
        },

        editors : editors,

        /**
         * @property {erajs.ui.Datagrid.View}
         * 定义DataGrid的视图.
         */
        view : view,

        /**
         * @event
         * 在载入请求数据数据之前触发，如果返回false可终止载入数据操作.
         * @param {Object} param
         */
        onBeforeLoad : function(param) {
        },

        /**
         * @event
         * @param {Object/Array} data 表格的数据.
         * 在数据加载成功的时候触发.
         */
        onLoadSuccess : function(data) {
        },

        /**
         * @event
         * 在载入远程数据产生错误的时候触发.
         */
        onLoadError : function() {
        },

        /**
         * @event
         * 在用户点击一行的时候触发.
         * @param {Number} rowIndex 点击的行的索引值,该索引值从0开始.
         * @param {Object} rowData 对应于点击行的记录.
         */
        onClickRow : function(rowIndex,rowData) {
        },

        /**
         * @event
         * 在用户双击一行的时候触发.
         * @param {Number} rowIndex 点击的行的索引值，该索引值从0开始.
         * @param {Object} rowData 对应于点击行的记录.
         */
        onDblClickRow : function(rowIndex,rowData) {
        },

        /**
         * @event
         * 在用户点击一个单元格的时候触发.
         * @param {Number} rowIndex 行索引.
         * @param {Object} field 字段名.
         * @param {Object/String} value 单元格值.
         */
        onClickCell : function(rowIndex,field,value) {
        },

        /**
         * @event
         * 在用户双击一个单元格的时候触发.
         * @param {Number} rowIndex 行索引.
         * @param {Object} field 字段名.
         * @param {Object/String} value 单元格值.
         */
        onDblClickCell : function(rowIndex,field,value) {
        },

        /**
         * @event
         * 在用户点击列排序时触发,返回false将退出方法.
         * @param {String} sort  排序列字段名称.
         * @param {String} order 排序列的顺序(ASC或DESC).
         */
        onBeforeSortColumn : function(sort, order) {
        },

        /**
         * @event
         * 在用户排序一列的时候触发.
         * @param {String} sort  排序列字段名称.
         * @param {String} order 排序列的顺序(ASC或DESC).
         */
        onSortColumn : function(sort,order) {
        },

        /**
         * @event
         * 在用户调整列大小的时候触发.
         * @param {String} field 列字段名.
         * @param {Number} width 列宽
         */
        onResizeColumn : function(field,width) {
        },

        /**
         * @event
         * 在用户选择一行的时候触发.
         * @param {Number} rowIndex 择的行的索引值，索引从0开始.
         * @param {Object} rowData 对应于所选行的记录.
         */
        onSelect : function(rowIndex, rowData) {
        },

        /**
         * @event
         * 在用户取消选择一行的时候触发.
         * @param {Number} rowIndex 择的行的索引值，索引从0开始.
         * @param {Object} rowData 对应于所选行的记录.
         */
        onUnselect : function(rowIndex, rowData) {
        },

        /**
         * @event
         * 在用户选择所有行的时候触发.
         * @param {Array} rows 行记录集.
         */
        onSelectAll : function(rows) {
        },

        /**
         * @event
         * 在用户取消选择所有行的时候触发.
         * @param {Array} rows 行记录集.
         */
        onUnselectAll : function(rows) {
        },

        /**
         * @event
         * 在用户勾选一行的时候触发.
         * @param {Number} rowIndex 选中的行索引，索引从0开始.
         * @param {Object} rowData 对应于所选行的记录.
         */
        onCheck : function(rowIndex,rowData) {
        },

        /**
         * @event
         * 在用户取消勾选一行的时候触发.
         * @param {Number} rowIndex 取消选中行的索引.
         * @param {Object} rowData 取消选中行的记录.
         */
        onUncheck : function(rowIndex,rowData) {
        },

        /**
         * @event
         * 在用户勾选所有行的时候触发.
         * @param {Array} rows 选中行记录集.
         */
        onCheckAll : function(rows) {
        },

        /**
         * @event
         * 在用户取消勾选所有行的时候触发.
         * @param {Array} rows 取消选中行记录集.
         */
        onUncheckAll : function(rows) {
        },

        /**
         * @event
         * 当用户开始编辑一行触发.
         * @param {Number} rowIndex 正在编辑的行索引，从0开始.
         * @param {Object} rowData 于正在编辑的行的记录.
         */
        onBeforeEdit : function(rowIndex, rowData) {
        },

        /**
         * @event
         * 当用户进入编辑模式时触发.
         * @param {Number} rowIndex 正在编辑的行索引，从0开始.
         * @param {Object} rowData 正在编辑的行的记录.
         */
        onBeginEdit : function(rowIndex, rowData) {
        },

        /**
         * @event
         *
         * @param rowIndex
         * @param rowData
         * @param changes
         */
        onEndEdit : function(rowIndex, rowData, changes) {
        },

        /**
         * @event
         * 完成编辑，但销毁editors前触发.
         * @param {Number} rowIndex 正在编辑的行索引，从0开始.
         * @param {Object} rowData 正在编辑的行的记录.
         * @param {Array} changes 被改变的字段内容，对应字段/值对.
         */
        onAfterEdit : function(rowIndex, rowData, changes) {
        },

        /**
         * @event
         * 当用户取消编辑行时触发.
         * @param {Number} rowIndex 正在编辑的行索引，从0开始.
         * @param {Object} rowData 正在编辑的行的记录.
         */
        onCancelEdit : function(rowIndex, rowData) {
        },

        onHeaderContextMenu : function(e, field) {
        },

        /**
         * @event 行右击显示工具栏面板事件
         * @param {Object} e
         * @param {Number} rowIndex
         * @param {Object} rowData
         */
        onRowContextMenu : function(e, rowIndex, rowData) {
        }
    });

    erajs.ui.Datagrid.parseData = function(self){
        var t = $(self.target);
        var data = {
            total : 0,
            rows : []
        };
        var fields = getColumnFields(self,true).concat(getColumnFields(self,false));
        t.find("tbody tr").each(function() {
            data.total++;
            var row = {};
            var tt = $(this);
            $.extend(row, erajs.ui.parser.parseOptions(tt, ["iconCls", "state"]));
            for (var i = 0; i < fields.length; i++) {
                row[fields[i]] = tt.find("td:eq(" + i + ")").html();
            }
            data.rows.push(row);
        });
        return data;
    }

    erajs.ui.Datagrid.parseOptions = function(target){
        var t = $(target);
        return $.extend({}, erajs.ui.Panel.parseOptions(target), erajs.ui.parser.parseOptions(t,
            ["url", "toolbar", "idField", "sortName", "sortOrder", "pagePosition", "resizeHandle", {
                sharedStyleSheet : "boolean",
                fitColumns : "boolean",
                autoRowHeight : "boolean",
                striped : "boolean",
                nowrap : "boolean"
            }, {
                rownumbers : "boolean",
                singleSelect : "boolean",
                ctrlSelect : "boolean",
                checkOnSelect : "boolean",
                selectOnCheck : "boolean"
            }, {
                pagination : "boolean",
                pageSize : "number",
                pageNumber : "number"
            }, {
                multiSort : "boolean",
                remoteSort : "boolean",
                showHeader : "boolean",
                showFooter : "boolean"
            }, {
                scrollbarSize : "number"
            }]), {
            pageList : (t.attr("pageList") ? eval(t.attr("pageList")) : undefined),
            loadMsg : (t.attr("loadMsg") != undefined ? t.attr("loadMsg") : undefined),
            rowStyler : (t.attr("rowStyler") ? eval(t.attr("rowStyler")) : undefined)
        });
    };
})();
/*
 * Copyright (c) 2014 www.erayt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 **/
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.ui.Tree
 * @extends erajs.ui.Tree.defaults
 * @since 1.2
 *
 * 使用{@link erajs.ui.Tree.defaults}重写默认值对象.
 *
 * 树控件在web页面中一个将分层数据以树形结构进行显示。它提供用户展开、折叠、编辑和异步加载等功能。
 *
 * {@img erajs.ui.Tree/tree.png}
 *
 * ##使用案列
 *
 * 1、树控件使用`<ul>`元素定义,标签能够定义分支和子节点.节点都定义在`<ul>`列表内的`<li>`元素中.
 * 以下显示的元素将被用作树节点嵌套在`<ul>`元素中.
 *
 *      @example
 *       <ul xtype="tree">
 *          <li>
 *              <span>My Documents</span>
 *              <ul>
 *                <li data-options="state:'closed'">
 *                      <span>Photos</span>
 *              <ul>
 *                  <li>
 *                      <span>Friend</span>
 *                  </li>
 *                  <li>
 *                      <span>Wife</span>
 *                  </li>
 *                  <li>
 *                      <span>Company</span>
 *                  </li>
 *               </ul>
 *           </li>
 *           <li>
 *                <span>Program Files</span>
 *                <ul>
 *                      <li>Intel</li>
 *                      <li>Java</li>
 *                      <li>Microsoft Office</li>
 *                      <li>Games</li>
 *                </ul>
 *            </li>
 *            <li>index.html</li>
 *            <li>about.html</li>
 *            <li>welcome.html</li>
 *           </ul>
 *          </li>
 *       </ul>
 *
 * 2、树控件也可以定义在一个空`<ul>`元素中并使用Javascript加载数据.
 *
 * Html代码：
 *
 *      <ul id="tt"></ul>
 *
 * JS代码：
 *
 *      erajs.create('tree',{
 *          contentEl : '#tt',
 *          url:'tree_data1.json'
 *      });
 *
 * 3、使用loadFilter函数处理来自Web Services的JSON数据.
 *
 *      <ul xtype="tree"
 *           data-options="
 *              url:'tree_data1.json',
 *              method:'get',
 *              animate:true,
 *              loadFilter: function(data){
 *                  if (data.d){
 *                      return data.d;
 *                  } else {
 *                      return data;
 *                  }
 *              }
 *       "></ul>
 *
 * ## 树控件数据格式化
 *
 *  每个节点都具备以下属性：
 *
 *  - id ：节点ID，对加载远程数据很重要.
 *  - text：显示节点文本.
 *  - state：节点状态，'open' 或 'closed'，默认：'open'。如果为'closed'的时候，将不自动展开该节点.
 *  - checked：表示该节点是否被选中.
 *  - attributes: 被添加到节点的自定义属性.
 *  - children: 一个节点数组声明了若干节点.
 *
 *  示例JSON数据：
 *
 *      [{
 *          "id":1,
 *          "text":"Folder1",
 *          "iconCls":"icon-save",
 *          "children":[{
 *              "text":"File1",
 *              "checked":true
 *          },{
 *              "text":"Books",
 *              "state":"open",
 *              "attributes":{
 *                  "url":"/demo/book/abc",
 *                  "price":100
 *              },
 *              "children":[{
 *                  "text":"PhotoShop",
 *                  "checked":true
 *              },{
 *                  "id": 8,
 *                  "text":"Sub Bookds",
 *                  "state":"closed"
 *              }]
 *          }]
 *      },{
 *          "text":"Languages",
 *          "state":"closed",
 *          "children":[{
 *              "text":"Java"
 *          },{
 *              "text":"C#"
 *          }]
 *      }]
 *
 * ## 异步树控件
 *
 * 树控件内建异步加载模式的支持，用户先创建一个空的树，然后指定一个服务器端，执行检索后动态返回JSON数据来填充树并完成异步请求。例子如下：
 *
 *      <ul class="easyui-tree" data-options="url:'get_data.do'"></ul>
 *
 *  树控件读取URL。子节点的加载依赖于父节点的状态。当展开一个封闭的节点，
 *  如果节点没有加载子节点，它将会把节点id的值作为http请求参数并命名为'id'，
 *  通过URL发送到服务器上面检索子节点。
 *
 *  下面是从服务器端返回的数据。
 *
 *        [{
 *              "id": 1,
 *              "text": "Node 1",
 *              "state": "closed",
 *              "children": [{
 *                  "id": 11,
 *                  "text": "Node 11"
 *              },{
 *                  "id": 12,
 *                  "text": "Node 12"
 *              }]
 *          },{
 *              "id": 2,
 *              "text": "Node 2",
 *              "state": "closed"
 *          }]
 *
 *  节点1和节点2是封闭的，当展开节点1的时候将直接显示它的子节点。
 *  当展开节点2的时候它将发送值(2)到服务器获取子节点。
 *
 */
(function(){

    function initTree(target){
        var t = $(target);
        t.addClass("tree");
        return t;
    }

    function bindEvents(self) {
        var opts = self.options,
            target = self.target;

        $(target).unbind().bind("mouseover", function (e) {
            var tt = $(e.target);
            var treeNode = tt.closest("div.tree-node");
            if (!treeNode.length) {
                return;
            }
            treeNode.addClass("tree-node-hover");
            if (tt.hasClass("tree-hit")) {
                if (tt.hasClass("tree-expanded")) {
                    tt.addClass("tree-expanded-hover");
                } else {
                    tt.addClass("tree-collapsed-hover");
                }
            }
            e.stopPropagation();
        }).bind("mouseout", function (e) {
            var tt = $(e.target);
            var treeNode = tt.closest("div.tree-node");
            if (!treeNode.length) {
                return;
            }
            treeNode.removeClass("tree-node-hover");
            if (tt.hasClass("tree-hit")) {
                if (tt.hasClass("tree-expanded")) {
                    tt.removeClass("tree-expanded-hover");
                } else {
                    tt.removeClass("tree-collapsed-hover");
                }
            }
            e.stopPropagation();
        }).bind("click", function (e) {
            var tt = $(e.target);
            var treeNode = tt.closest("div.tree-node");
            if (!treeNode.length) {
                return;
            }
            if (tt.hasClass("tree-hit")) {
                toggle(self, treeNode[0]);
                return false;
            } else {
                if (tt.hasClass("tree-checkbox")) {
                    check(self, treeNode[0], !tt.hasClass("tree-checkbox1"));
                    return false;
                } else {
                    select(self, treeNode[0]);
                    opts.onClick.call(self, getNode(self, treeNode[0]));
                }
            }
            e.stopPropagation();
        }).bind("dblclick", function (e) {
            var treeNode = $(e.target).closest("div.tree-node");
            if (!treeNode.length) {
                return;
            }
            select(self, treeNode[0]);
            opts.onDblClick.call(self, getNode(self, treeNode[0]));
            e.stopPropagation();
        }).bind("contextmenu", function (e) {
            var treeNode = $(e.target).closest("div.tree-node");
            if (!treeNode.length) {
                return;
            }
            opts.onContextMenu.call(self, e, getNode(self, treeNode[0]));
            e.stopPropagation();
        });
    };

    function toggle(self,target){
        var hit = $(target).children("span.tree-hit");
        if (hit.length == 0) {
            return;
        }
        if (hit.hasClass("tree-expanded")) {
            collapse(self, target);
        } else {
            expand(self, target);
        }
    }

    function collapse(self,target){
        var opts = self.options;
        var hit = $(target).children("span.tree-hit");
        if (hit.length == 0) {
            return;
        }
        if (hit.hasClass("tree-collapsed")) {
            return;
        }
        var node = getNode(self, target);
        if (opts.onBeforeCollapse.call(self, node) == false) {
            return;
        }
        hit.removeClass("tree-expanded tree-expanded-hover").addClass("tree-collapsed");
        hit.next().removeClass("tree-folder-open");
        var ul = $(target).next();
        if (opts.animate) {
            ul.slideUp("normal", function () {
                node.state = "closed";
                opts.onCollapse.call(self, node);
            });
        } else {
            ul.css("display", "none");
            node.state = "closed";
            opts.onCollapse.call(self, node);
        }
    }

    function expand(self,target,callback){
        var opts = self.options;
        var hit = $(target).children("span.tree-hit");
        if (hit.length == 0) {
            return;
        }
        if (hit.hasClass("tree-expanded")) {
            return;
        }
        var node = getNode(self, target);
        if (opts.onBeforeExpand.call(self, node) == false) {
            return;
        }
        hit.removeClass("tree-collapsed tree-collapsed-hover").addClass("tree-expanded");
        hit.next().addClass("tree-folder-open");
        var ul = $(target).next();
        if (ul.length) {
            if (opts.animate) {
                ul.slideDown("normal", function () {
                    node.state = "open";
                    opts.onExpand.call(self, node);
                    if (callback) {
                        callback();
                    }
                });
            } else {
                ul.css("display", "block");
                node.state = "open";
                opts.onExpand.call(self, node);
                if (callback) {
                    callback();
                }
            }
        } else {
            var ulDom = $("<ul style=\"display:none\"></ul>").insertAfter(target);
            reload(self, ulDom[0], {id: node.id}, function () {
                if (ulDom.is(":empty")) {
                    ulDom.remove();
                }
                if (opts.animate) {
                    ulDom.slideDown("normal", function () {
                        node.state = "open";
                        opts.onExpand.call(self, node);
                        if (callback) {
                            callback();
                        }
                    });
                } else {
                    ulDom.css("display", "block");
                    node.state = "open";
                    opts.onExpand.call(self, node);
                    if (callback) {
                        callback();
                    }
                }
            });
        }
    }

    function expandTo(self, target) {
        var nodes = [];
        var p = getParent(self, target);
        while (p) {
            nodes.unshift(p);
            p = getParent(self, p.target);
        }
        for (var i = 0; i < nodes.length; i++) {
            expand(self, nodes[i].target);
        }
    }

    function scrollTo(self,target){
        var targetDom = self.target;

        var c = $(targetDom).parent();
        while (c[0].tagName != "BODY" && c.css("overflow-y") != "auto") {
            c = c.parent();
        }
        var n = $(target);
        var top = n.offset().top;
        if (c[0].tagName != "BODY") {
            var ctop = c.offset().top;
            if (top < ctop) {
                c.scrollTop(c.scrollTop() + top - ctop);
            } else {
                if (top + n.outerHeight() > ctop + c.outerHeight() - 18) {
                    c.scrollTop(c.scrollTop() + top + n.outerHeight() - ctop - c.outerHeight() + 18);
                }
            }
        } else {
            c.scrollTop(top);
        }
    }

    function toggle(self,target){
        var hit = $(target).children("span.tree-hit");
        if (hit.length == 0) {
            return;
        }
        if (hit.hasClass("tree-expanded")) {
            collapse(self, target);
        } else {
            expand(self, target);
        }
    }

    function append(self,param){
        var t = $(param.parent);
        var data = param.data;
        if (!data) {
            return;
        }
        data = $.isArray(data) ? data : [data];
        if (!data.length) {
            return;
        }
        var ul;
        if (t.length == 0) {
            ul = $(self.target);
        } else {
            if (isLeaf(self, t[0])) {
                var treeIcon = t.find("span.tree-icon");
                treeIcon.removeClass("tree-file").addClass("tree-folder tree-folder-open");
                var hit = $("<span class=\"tree-hit tree-expanded\"></span>").insertBefore(treeIcon);
                if (hit.prev().length) {
                    hit.prev().remove();
                }
            }
            ul = t.next();
            if (!ul.length) {
                ul = $("<ul></ul>").insertAfter(t);
            }
        }
        loadData(self, ul[0], data, true);
        cascadeLeaf(self, ul.prev());
    }

    function cascadeLeaf(self, target) {
        var opts = self.options;
        if (!opts.checkbox) {
            return;
        }
        var t = $(target);
        if (isLeaf(self, target)) {
            var ck = t.find(".tree-checkbox");
            if (ck.length) {
                if (ck.hasClass("tree-checkbox1")) {
                    check(self, target, true);
                } else {
                    check(self, target, false);
                }
            } else {
                if (opts.onlyLeafCheck) {
                    $("<span class=\"tree-checkbox tree-checkbox0\"></span>").insertBefore(t.find(".tree-title"));
                }
            }
        } else {
            var ck = t.find(".tree-checkbox");
            if (opts.onlyLeafCheck) {
                ck.remove();
            } else {
                if (ck.hasClass("tree-checkbox1")) {
                    check(self, target, true);
                } else {
                    if (ck.hasClass("tree-checkbox2")) {
                        var _49 = true;
                        var _4a = true;
                        var children = getChildren(self, target);
                        for (var i = 0; i < children.length; i++) {
                            if (children[i].checked) {
                                _4a = false;
                            } else {
                                _49 = false;
                            }
                        }
                        if (_49) {
                            check(self, target, true);
                        }
                        if (_4a) {
                            check(self, target, false);
                        }
                    }
                }
            }
        }
    }

    function insert(self, param) {
        var ref = param.before || param.after;
        var target = self.target;
        var pnode = getParent(self, ref);
        var data = param.data;
        if (!data) {
            return;
        }
        data = $.isArray(data) ? data : [data];
        if (!data.length) {
            return;
        }
        append(self, {parent: (pnode ? pnode.target : null), data: data});
        var children = pnode ? pnode.children : self.getRoots();
        for (var i = 0; i < children.length; i++) {
            if (children[i].domId == $(ref).attr("id")) {
                for (var j = data.length - 1; j >= 0; j--) {
                    children.splice((param.before ? i : (i + 1)), 0, data[j]);
                }
                children.splice(children.length - data.length, data.length);
                break;
            }
        }
        var li = $();
        for (var i = 0; i < data.length; i++) {
            li = li.add($("#" + data[i].domId).parent());
        }
        if (param.before) {
            li.insertBefore($(ref).parent());
        } else {
            li.insertAfter($(ref).parent());
        }
    }

    function remove(self, target) {
        var pNode = del(target);
        $(target).parent().remove();

        if (pNode) {
            if (!pNode.children || !pNode.children.length) {
                var pTarget = $(pNode.target);
                pTarget.find(".tree-icon").removeClass("tree-folder").addClass("tree-file");
                pTarget.find(".tree-hit").remove();
                $("<span class=\"tree-indent\"></span>").prependTo(pTarget);
                pTarget.next().remove();
            }
            update(self, pNode);
            cascadeLeaf(self, pNode.target);
        }
        showLineAndIndent(self, self.target);

        function del(target) {
            var id = $(target).attr("id");
            var parentNode = getParent(self, target);
            var cc = parentNode ? parentNode.children : self.data;
            for (var i = 0; i < cc.length; i++) {
                if (cc[i].domId == id) {
                    cc.splice(i, 1);
                    break;
                }
            }
            return parentNode;
        }
    }

    function collapseAll(self,target){
        var children = getChildren(self, target);
        if (target) {
            children.unshift(getNode(self, target));
        }
        for (var i = 0; i < children.length; i++) {
            collapse(self, children[i].target);
        }
    }

    function expandAll(self,target) {
        var children = getChildren(self, target);
        if (target) {
            children.unshift(getNode(self, target));
        }
        for (var i = 0; i < children.length; i++) {
            expand(self, children[i].target);
        }
    }

    function select(self,target){
        var opts = self.options,
            target_ = self.target;

        var node = getNode(self, target);
        if (opts.onBeforeSelect.call(self, node) == false) {
            return;
        }
        $(target_).find("div.tree-node-selected").removeClass("tree-node-selected");
        $(target).addClass("tree-node-selected");
        opts.onSelect.call(self, node);
    }

    function loadData(self, ul, data, _50) {
        var opts = self.options,
            nodes = $(ul).prevAll("div.tree-node:first");
        data = opts.loadFilter.call(self, data, nodes[0]);

        var node = getNodeByAtr(self, "domId", nodes.attr("id"));

        if (!_50) {
            node ? node.children = data : self.data = data;
            $(ul).empty();
        } else {
            if (node) {
                node.children ? node.children = node.children.concat(data) : node.children = data;
            } else {
                self.data = self.data.concat(data);
            }
        }
        opts.view.render.call(opts.view, self, ul, data);
        if (opts.dnd) {
            //todo 允许拖动
            enableDnd(self);
        }
        if (node) {
            update(self, node);
        }
        var rows = [];
        var checkNodes = [];
        for (var i = 0; i < data.length; i++) {
            var row = data[i];
            if (!row.checked) {
                rows.push(row);
            }
        }
        recursionArray(data, function (node) {
            if (node.checked) {
                checkNodes.push(node);
            }
        });
        var onCheck = opts.onCheck;
        opts.onCheck = function () {
        };
        if (rows.length) {
            check(self, $("#" + rows[0].domId)[0], false);
        }
        for (var i = 0; i < checkNodes.length; i++) {
            check(self, $("#" + checkNodes[i].domId)[0], true);
        }
        opts.onCheck = onCheck;
        setTimeout(function () {
            showLineAndIndent(self, self.target);
        }, 0);
        opts.onLoadSuccess.call(self, node, data);
    }

    function enableDnd(self){
        var opts = self.options;
        var tree = self.tree;
        self.disabledNodes = [];
        opts.dnd = true;
        tree.find("div.tree-node").draggable({
            disabled: false,
            revert: true,
            cursor: "pointer",
            proxy: function (_16) {
                var p = $("<div class=\"tree-node-proxy\"></div>").appendTo("body");
                p.html("<span class=\"tree-dnd-icon tree-dnd-no\">&nbsp;</span>" + $(_16).find(".tree-title").html());
                p.hide();
                return p;
            },
            deltaX: 15,
            deltaY: 15,
            onBeforeDrag: function (e) {
                if (opts.onBeforeDrag.call(self, getNode(self, this)) == false) {
                    return false;
                }
                if ($(e.target).hasClass("tree-hit") || $(e.target).hasClass("tree-checkbox")) {
                    return false;
                }
                if (e.which != 1) {
                    return false;
                }
                $(this).next("ul").find("div.tree-node").droppable({accept: "no-accept"});
                var _17 = $(this).find("span.tree-indent");
                if (_17.length) {
                    e.data.offsetWidth -= _17.length * _17.width();
                }
            },
            onStartDrag: function () {
                $(this).draggable("proxy").css({left: -10000, top: -10000});
                opts.onStartDrag.call(self, getNode(self, this));
                var _18 = getNode(self, this);
                if (_18.id == undefined) {
                    _18.id = "erajs_tree_node_id_temp";
                    update(self, _18);
                }
                self.draggingNodeId = _18.id;
            }, onDrag: function (e) {
                var x1 = e.pageX,
                    y1 = e.pageY,
                    x2 = e.data.startX,
                    y2 = e.data.startY;

                var d = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
                if (d > 3) {
                    $(this).draggable("proxy").show();
                }
                this.pageY = e.pageY;
            }, onStopDrag: function () {
                $(this).next("ul").find("div.tree-node").droppable({accept: "div.tree-node"});
                for (var i = 0; i < self.disabledNodes.length; i++) {
                    $(self.disabledNodes[i]).droppable("enable");
                }
                self.disabledNodes = [];
                var _19 = find(self, self.draggingNodeId);
                if (_19 && _19.id == "erajs_tree_node_id_temp") {
                    _19.id = "";
                    update(self, _19);
                }
                opts.onStopDrag.call(self, _19);
            }
        }).droppable({
            accept: "div.tree-node",
            onDragEnter: function (e, _1a) {
                if (opts.onDragEnter.call(self, this, _1b(self)) == false) {
                    _1c(self, false);
                    $(this).removeClass("tree-node-append tree-node-top tree-node-bottom");
                    $(this).droppable("disable");
                    self.disabledNodes.push(this);
                }
            }, onDragOver: function (e, _1d) {
                if ($(this).droppable("options").disabled) {
                    return;
                }
                var _1e = _1d.pageY;
                var top = $(this).offset().top;
                var _1f = top + $(this).outerHeight();
                _1c(self, true);
                $(this).removeClass("tree-node-append tree-node-top tree-node-bottom");
                if (_1e > top + (_1f - top) / 2) {
                    if (_1f - _1e < 5) {
                        $(this).addClass("tree-node-bottom");
                    } else {
                        $(this).addClass("tree-node-append");
                    }
                } else {
                    if (_1e - top < 5) {
                        $(this).addClass("tree-node-top");
                    } else {
                        $(this).addClass("tree-node-append");
                    }
                }
                if (opts.onDragOver.call(self, this, _1b(self)) == false) {
                    _1c(self, false);
                    $(this).removeClass("tree-node-append tree-node-top tree-node-bottom");
                    $(this).droppable("disable");
                    self.disabledNodes.push(this);
                }
            }, onDragLeave: function (e, _20) {
                _1c(self, false);
                $(this).removeClass("tree-node-append tree-node-top tree-node-bottom");
                opts.onDragLeave.call(self, this, _1b(self));
            }, onDrop: function (e, _21) {
                var _22 = this;
                var _23, _24;
                if ($(this).hasClass("tree-node-append")) {
                    _23 = _25;
                    _24 = "append";
                } else {
                    _23 = _26;
                    _24 = $(this).hasClass("tree-node-top") ? "top" : "bottom";
                }
                if (opts.onBeforeDrop.call(self, _22, _1b(self), _24) == false) {
                    $(this).removeClass("tree-node-append tree-node-top tree-node-bottom");
                    return;
                }
                _23(self, _22, _24);
                $(this).removeClass("tree-node-append tree-node-top tree-node-bottom");
            }
        });
        function _1b(self, pop) {
            var target = self.target;
            return pop ? self.pop(target) : self.getData(target);
        };
        function _1c(self, _29) {
            var target = self.target;
            var dndIcon = $(target).draggable("proxy").find("span.tree-dnd-icon");
            dndIcon.removeClass("tree-dnd-yes tree-dnd-no").addClass(_29 ? "tree-dnd-yes" : "tree-dnd-no");
        };
        function _25(self, _2c) {
            if (getNode(self, _2c).state == "closed") {
                expand(self, _2c, function () {
                    _2d();
                });
            } else {
                _2d();
            }
            function _2d() {
                var _2e = _1b(self, true);
                self.append({parent: _2c, data: [_2e]});
                opts.onDrop.call(self, _2c, _2e, "append");
            };
        };
        function _26(self, _30, _31) {
            var _32 = {};
            if (_31 == "top") {
                _32.before = _30;
            } else {
                _32.after = _30;
            }
            var _33 = _1b(self, true);
            _32.data = _33;
            self.insert(_32);
            opts.onDrop.call(self, _30, _33, _31);
        };
    }

    function disableDnd(self) {
        var opts = self.options,
            target = self.target;

        opts.dnd = false;
        var treeNode = $(target).find("div.tree-node");
        treeNode.draggable("disable");
        treeNode.css("cursor", "pointer");
    }

    function beginEdit(self,target){
        var opts = self.options;
        var node = getNode(self, target);
        if (opts.onBeforeEdit.call(self, node) == false) {
            return;
        }
        $(target).css("position", "relative");
        var nt = $(target).find(".tree-title");
        var width = nt.outerWidth();
        nt.empty();
        var _e8 = $("<input class=\"tree-editor\">").appendTo(nt);
        _e8.val(node.text).focus();
        _e8.width(width + 20);
        _e8.height(document.compatMode == "CSS1Compat" ? (18 - (_e8.outerHeight() - _e8.height())) : 18);
        _e8.bind("click", function (e) {
            return false;
        }).bind("mousedown", function (e) {
            e.stopPropagation();
        }).bind("mousemove", function (e) {
            e.stopPropagation();
        }).bind("keydown", function (e) {
            if (e.keyCode == 13) {
                endEdit(self, target);
                return false;
            } else {
                if (e.keyCode == 27) {
                    cancelEdit(self, target);
                    return false;
                }
            }
        }).bind("blur", function (e) {
            e.stopPropagation();
            endEdit(self, target);
        });
    }

    function endEdit(self,target) {
        var opts = self.options;
        $(target).css("position", "");
        var _ed = $(target).find("input.tree-editor");
        var val = _ed.val();
        _ed.remove();
        var node = getNode(self, target);
        node.text = val;
        update(self, node);
        opts.onAfterEdit.call(self, node);
    }

    function cancelEdit(self,target){
        var opts = self.options;
        $(target).css("position", "");
        $(target).find("input.tree-editor").remove();
        var node = getNode(self, target);
        update(self, node);
        opts.onCancelEdit.call(self, node);
    }

    function update(self,param){
        var opts = self.options;
        var t = $(param.target);
        var node = getNode(self, param.target);
        var checked = node.checked;
        if (node.iconCls) {
            t.find(".tree-icon").removeClass(node.iconCls);
        }
        $.extend(node, param);
        t.find(".tree-title").html(opts.formatter.call(self, node));
        if (node.iconCls) {
            t.find(".tree-icon").addClass(node.iconCls);
        }
        if (checked != node.checked) {
            check(self, param.target, node.checked);
        }
    }

    function check(self,target,isCheck){
        var opts = self.options;
        if (!opts.checkbox) {
            return;
        }
        var node = getNode(self, target);
        if (opts.onBeforeCheck.call(self, node, isCheck) == false) {
            return;
        }
        var t = $(target);
        var ck = t.find(".tree-checkbox");
        ck.removeClass("tree-checkbox0 tree-checkbox1 tree-checkbox2");
        if (isCheck) {
            ck.addClass("tree-checkbox1");
        } else {
            ck.addClass("tree-checkbox0");
        }
        if (opts.cascadeCheck) {
            cascadeParent(t);
            cascadeChildren(t);
        }
        opts.onCheck.call(self, node, isCheck);
        function cascadeChildren(tdom) {
            var treeCk = tdom.next().find(".tree-checkbox");
            treeCk.removeClass("tree-checkbox0 tree-checkbox1 tree-checkbox2");
            if (tdom.find(".tree-checkbox").hasClass("tree-checkbox1")) {
                treeCk.addClass("tree-checkbox1");
            } else {
                treeCk.addClass("tree-checkbox0");
            }
        };
        function cascadeParent(tdom) {
            var pnode = getParent(self, tdom[0]);
            if (pnode) {
                var ck = $(pnode.target).find(".tree-checkbox");
                ck.removeClass("tree-checkbox0 tree-checkbox1 tree-checkbox2");
                if (_41(tdom)) {
                    ck.addClass("tree-checkbox1");
                } else {
                    if (_42(tdom)) {
                        ck.addClass("tree-checkbox0");
                    } else {
                        ck.addClass("tree-checkbox2");
                    }
                }
                cascadeParent($(pnode.target));
            }
            function _41(n) {
                var ck = n.find(".tree-checkbox");
                if (ck.hasClass("tree-checkbox0") || ck.hasClass("tree-checkbox2")) {
                    return false;
                }
                var b = true;
                n.parent().siblings().each(function () {
                    if (!$(this).children("div.tree-node").children(".tree-checkbox").hasClass("tree-checkbox1")) {
                        b = false;
                    }
                });
                return b;
            };
            function _42(n) {
                var ck = n.find(".tree-checkbox");
                if (ck.hasClass("tree-checkbox1") || ck.hasClass("tree-checkbox2")) {
                    return false;
                }
                var b = true;
                n.parent().siblings().each(function () {
                    if (!$(this).children("div.tree-node").children(".tree-checkbox").hasClass("tree-checkbox0")) {
                        b = false;
                    }
                });
                return b;
            };
        };
    }

    function getChildren(self, target) {
        var children = [];
        var n = getNode(self, target);
        var data = n ? n.children : self.data;
        recursionArray(data, function (node) {
            children.push(getNodeAttrs(node));
        });
        return children;
    }

    function getParent(self, target) {
        var p = $(target).closest("ul").prevAll("div.tree-node:first");
        return getNode(self, p[0]);
    };

    function getNode(self,target){
        return getNodeByAtr(self, "domId", $(target).attr("id"));
    }

    function getChecked(self,state){
        state = state || "checked";
        var target = self.target;

        if (!$.isArray(state)) {
            state = [state];
        }
        var checkeds = [];
        for (var i = 0; i < state.length; i++) {
            var s = state[i];
            if (s == "checked") {
                checkeds.push("span.tree-checkbox1");
            } else {
                if (s == "unchecked") {
                    checkeds.push("span.tree-checkbox0");
                } else {
                    if (s == "indeterminate") {
                        checkeds.push("span.tree-checkbox2");
                    }
                }
            }
        }
        var nodes = [];
        $(target).find(checkeds.join(",")).each(function () {
            var parent = $(this).parent();
            nodes.push(getNode(self, parent[0]));
        });
        return nodes;
    }

    function getSelected(self){
        var target = self.target;
        var selected = $(target).find("div.tree-node-selected");
        return selected.length ? getNode(self, selected[0]) : null;
    }

    function isLeaf(self,target){
        return $(target).children("span.tree-hit").length == 0;
    }

    function find(self,id){
        return getNodeByAtr(self, "id", id);
    }

    function getNodeByAtr(self, attribute, id) {
        var data = self.data;
        var _d4 = null;
        recursionArray(data, function (node) {
            if (node[attribute] == id) {
                _d4 = getNodeAttrs(node);
                return false;
            }
        });
        return _d4;
    }

    function showLineAndIndent(self, ul, _5f) {
        var opts = self.options,
            target = self.target;

        if (opts.lines) {
            $(target).addClass("tree-lines");
        } else {
            $(target).removeClass("tree-lines");
            return;
        }
        if (!_5f) {
            _5f = true;
            $(target).find("span.tree-indent").removeClass("tree-line tree-join tree-joinbottom");
            $(target).find("div.tree-node").removeClass("tree-node-last tree-root-first tree-root-one");
            var root = self.getRoots();
            if (root.length > 1) {
                $(root[0].target).addClass("tree-root-first");
            } else {
                if (root.length == 1) {
                    $(root[0].target).addClass("tree-root-one");
                }
            }
        }
        $(ul).children("li").each(function () {
            var treeNode = $(this).children("div.tree-node");
            var ul = treeNode.next("ul");
            if (ul.length) {
                if ($(this).next().length) {
                    showLine(treeNode);
                }
                showLineAndIndent(self, ul, _5f);
            } else {
                showIndent(treeNode);
            }
        });

        var nodeDom = $(ul).children("li:last").children("div.tree-node").addClass("tree-node-last");
        nodeDom.children("span.tree-join").removeClass("tree-join").addClass("tree-joinbottom");

        function showIndent(treeNode) {
            var ticon = treeNode.find("span.tree-icon");
            ticon.prev("span.tree-indent").addClass("tree-join");
        };

        function showLine(tnode) {
            var leng = tnode.find("span.tree-indent, span.tree-hit").length;
            tnode.next().find("div.tree-node").each(function () {
                $(this).children("span:eq(" + (leng - 1) + ")").addClass("tree-line");
            });
        };
    }

    function getNodeAttrs(node) {
        var d = $("#" + node.domId);
        node.target = d[0];
        node.checked = d.find(".tree-checkbox").hasClass("tree-checkbox1");
        return node;
    }

    function recursionArray(data, fn) {
        var temp = [];
        //todo 数组之间的拷贝
        for (var i = 0; i < data.length; i++) {
            temp.push(data[i]);
        }
        while (temp.length) {
            var _da = temp.shift();
            if (fn(_da) == false) {
                return;
            }
            if (_da.children) {
                for (var i = _da.children.length - 1; i >= 0; i--) {
                    temp.unshift(_da.children[i]);
                }
            }
        }
    }

    function reload(self,ul,queryParams, callback){
        var opts = self.options,
            target = self.target;

        queryParams = $.extend({}, opts.queryParams, queryParams || {});

        var node = null;
        if (target != ul) {
            var ulTarget = $(ul).prev();
            node = getNode(self, ulTarget[0]);
        }
        if (opts.onBeforeLoad.call(self, node, queryParams) == false) {
            return;
        }

        var treeFloder = $(ul).prev().children("span.tree-folder");
        treeFloder.addClass("tree-loading");

        var flag = opts.loader.call(self, queryParams, function (data) {
            treeFloder.removeClass("tree-loading");
            loadData(self, ul, data);
            if (callback) {
                callback();
            }
        }, function () {
            treeFloder.removeClass("tree-loading");
            opts.onLoadError.apply(self, arguments);
            if (callback) {
                callback();
            }
        });
        if (flag == false) {
            treeFloder.removeClass("tree-loading");
        }
    }

    function getData(self,target){
        var node = getNode(self, target);
        if (node && node.children) {
            recursionArray(node.children, function (child) {
                getNodeAttrs(child);
            });
        }
        return node;
    }

    function getRoot(self, target) {
        if (target) {
            var p = getParent(self, target);
            while (p) {
                target = p.target;
                p = getParent(self, target);
            }
            return getNode(self, target);
        } else {
            var roots = getRoots(self);
            return roots.length ? roots[0] : null;
        }
    }

    function getRoots(self){
        var data = self.data;
        for (var i = 0; i < data.length; i++) {
            getNodeAttrs(data[i]);
        }
        return data;
    }

    erajs.ui.Tree = function(options){
        options = options || {};
        var target = options.target;

        if(!target){
            var contentEl = options.contentEl;
            if(contentEl){ target = $(contentEl)[0];}
        }

        if(target){
            this.target = target;
            this.options = $.extend({}, erajs.ui.Tree.defaults,
                erajs.ui.Tree.parseOptions(target),options);

            this.data = [];
            this.tree = initTree(target);
            this.id = this.options.id;

            var data = erajs.ui.Tree.parseData(this);
            if(data.length){
                loadData(this, target, data);
            }
        }

        this._render(target);
    };

    erajs.ui.Tree.prototype = {

        /**
         * 更新树配置项.
         * @param {Object} options
         */
        updateTree: function (options) {
            var me = this;
            var opts = $.extend(me.options, options);
            me.options = opts;
            me._render();
        },

        /**
         * 加载树数据.
         * @param {Array} data
         */
        loadData : function(data){
            var self = this,
                target = self.target;

            loadData(self,target,data);
        },

        /**
         * 取指定节点对象.
         * @param {HtmlElement} target
         * @returns {Object}
         */
        getNode : function(target){
            return getNode(this,target);
        },

        /**
         * 获取指定节点数据，包含它的子节点.
         * @param {HtmlElement} target
         * @returns {Object}
         */
        getData : function(target){
            return getData(this,target);
        },

        /**
         * 重新载入树控件数据.
         * @param {HtmlElement} target
         */
        reload : function(target){
            var self = this,
                targetD = self.target;

            if (target) {
                var _fd = $(target);
                var hit = _fd.children("span.tree-hit");
                hit.removeClass("tree-expanded tree-expanded-hover").addClass("tree-collapsed");
                _fd.next().remove();
                expand(self, target);
            } else {
                $(targetD).empty();
                reload(self, targetD);
            }
        },

        /**
         * 获取根节点，返回节点对象.
         * @param {HtmlElement} target
         * @returns {Object}
         */
        getRoot: function (target) {
            return getRoot(this,target);
        },

        /**
         * 获取所有根节点，返回节点数组.
         * @returns {Array}
         */
        getRoots : function(){
            return getRoots(this);
        },

        /**
         * 获取父节点.
         * @param {HtmlElement} target 参数代表节点的DOM对象
         * @returns {Object}
         */
        getParent : function(target){
            return getParent(this,target);
        },

        /**
         * 获取所有子节点.
         *  @param {HtmlElement} target 参数代表节点的DOM对象
         * @returns {Array}
         */
        getChildren : function(target){
            return getChildren(this,target);
        },

        /**
         * 获取所有选中的节点.
         * @param state 可用值有:'checked'、'unchecked'、'indeterminate'.
         *
         *      var tree = erajs.getCmp('tt');
         *      var nodes = tree.getChecked();	// 获取选中节点
         *      var nodes = tree.getChecked('unchecked');	// 获取未选择节点
         *      var nodes = tree.getChecked('indeterminate'); // 获取不确定的节点
         *      var nodes = tree.getChecked(['unchecked','indeterminate']);
         *
         * @returns {Array}
         */
        getChecked: function (state) {
            return getChecked(this,state);
        },

        /**
         * 获取选择节点，如果未选择则返回null.
         * @returns {Object}
         */
        getSelected: function () {
            return getSelected(this);
        },

        /**
         * 判断指定的节点是否是叶子节点.
         * @param {HtmlElement} target 节点DOM对象.
         * @returns {Boolean}
         */
        isLeaf: function (target) {
            return isLeaf(this,target);
        },

        /**
         * 查找指定节点并返回节点对象.
         * @param {String} id
         * @returns {Object}
         */
        find: function (id) {
            return find(this, id);
        },

        /**
         * 选择一个节点.
         * @param {HtmlElement} target 节点的DOM对象
         */
        select: function (target) {
            select(this, target);
        },

        /**
         * 选中指定节点.
         * @param {HtmlElement} target 节点的DOM对象
         */
        check: function (target) {
            check(this, target, true);
        },

        /**
         * 取消选中指定节点.
         * @param {HtmlElement} target
         */
        uncheck : function (target) {
            check(this, target, false);
        },

        /**
         * 折叠一个节点.
         * @param {HtmlElement} target
         */
        collapse: function (target){
            collapse(this,target);
        },

        /**
         * 展开一个节点.在节点关闭且没有子节点的时候，节点ID的值(名为'id'的参数)将会发送给服务器
         * 请求子节点的数据.
         * @param {HtmlElement} target
         */
        expand: function (target) {
            expand(this,target);
        },

        /**
         * 折叠所有节点.
         * @param {HtmlElement} target (optional)
         */
        collapseAll: function (target) {
            collapseAll(this, target);
        },

        /**
         * 展开所有节点.
         * @param {HtmlElement} target Optional
         */
        expandAll: function (target) {
            expandAll(this, target);
        },

        /**
         * 打开从根节点到指定节点之间的所有节点.
         * @param {HtmlElement} target
         */
        expandTo: function (target) {
            expandTo(this, target);
        },

        /**
         * 滚动到指定节点.
         * @param {HtmlElement} target
         */
        scrollTo: function (target) {
            scrollTo(this, target);
        },

        /**
         * 打开或关闭节点的触发器.
         * @param {HtmlElement} target
         */
        toggle : function(target){
            toggle(this, target);
        },

        /**
         * 追加若干子节点到一个父节点.
         * @param param 参数.
         * @param param.parent DOM对象，将要被追加子节点的父节点，如果未指定，子节点将被追加至根节点.
         * @param param.data 数组，节点数据.
         *
         * 示例代码：
         *
         *      var tree = erajs.getCmp('tt');
         *      var selected = tree.getSelected();
         *      tree.append({
         *          parent: selected.target,
         *          data: [{
         *              id: 23,
         *              text: 'node23'
         *          },{
         *              text: 'node24',
         *              state: 'closed',
         *              children: [{
         *                  text: 'node241'
         *              },{
         *                  text: 'node242'
         *              }]
         *          }]
         *       });
         *
         */
        append : function(param){
            append(this,param);
        },

        /**
         * 在一个指定节点之前或之后插入节点.
         * @param {Object} param 含如下属性:
         *
         * - before : DOM对象，在某个节点之前插入
         * - after : DOM对象，在某个节点之后插入
         * - data : 数组，节点数据.
         *
         * 示例代码：
         *
         *      var tree = erajs.getCmp('tt');
         *      var selected = tree.getSelected();
         *      if (node){
	     *          tree.insert({
		 *              before: node.target,
		 *              data: {
		 *	                id: 21,
		 *	                text: 'node text'
		 *              }
	     *          });
         *      }
         *
         */
        insert: function (param) {
            insert(this, param);
        },

        /**
         * 移除一个节点和它的子节点.
         * @param {HtmlElement} target
         */
        remove : function(target){
            remove(this,target);
        },

        /**
         * 移除一个节点和它的子节点，该方法跟remove方法一样，不同的是它将返回被移除的节点数据.
         * @param {HtmlElement} target
         * @returns {Object/Array}
         */
        pop: function (target) {
            var node = this.getData(target);
            this.remove(target);
            return node;
        },

        /**
         * 更新指定节点.
         * @param {Object} param 'param'参数包含以下属性：target(DOM对象，将被更新的目标节点)，
         * id，text，iconCls，checked等.
         */
        update : function(param){
            update(this,param);
        },

        enableDnd : function(){
            enableDnd(this);
        },

        disableDnd : function(){
            disableDnd(this);
        },

        /**
         * 开始编辑一个节点.
         * @param {HtmlElement} target
         */
        beginEdit : function(target){
            beginEdit(this,target);
        },

        /**
         * 结束编辑一个节点.
         * @param {HtmlElement} target
         */
        endEdit : function(target){
            endEdit(this,target);
        },

        /**
         * 取消编辑一个节点.
         * @param {HtmlElement} target
         */
        cancelEdit : function(target){
            cancelEdit(this,target);
        },

        /**
         * 销毁组件.
         */
        destroy : function(){
            this.tree.remove();
            erajs.destroy(this);
        },

        _render : function(target){
            var self = this,
                opts = self.options,
                target = target || self.target;

            bindEvents(self);
            if (opts.data) {
                loadData(self,target, $.extend(true, [], opts.data));
            }
            reload(self, target);
        }
    };

    erajs.ui.Tree.parseData = function (self) {
        var data = [],
            target = self.target;

        recursionNode(data, $(target));

        return data;

        function recursionNode(aa, tree) {
            tree.children("li").each(function () {
                var node = $(this);
                var item = $.extend({}, erajs.ui.parser.parseOptions(node, ["id", "iconCls", "state"]), {
                    checked: (node.attr("checked") ? true : undefined)
                });
                item.text = node.children("span").html();
                if (!item.text) {
                    item.text = node.html();
                }
                var ul = node.children("ul");
                if (ul.length) {
                    item.children = [];
                    recursionNode(item.children, ul);
                }
                aa.push(item);
            });
        };
    };

    var index = 1;
    var view = {
        render: function (self, ul, data) {
            var opts = self.options;
            var length = $(ul).prev("div.tree-node").find("span.tree-indent, span.tree-hit").length;
            var cc = renderFormat(length, data);
            $(ul).append(cc.join(""));
            function renderFormat(leng, rows) {
                var cc = [];
                for (var i = 0; i < rows.length; i++) {
                    var item = rows[i];
                    if (item.state != "open" && item.state != "closed") {
                        item.state = "open";
                    }
                    item.domId = "_erajs_tree_" + index++;
                    cc.push("<li>");
                    cc.push("<div id=\"" + item.domId + "\" class=\"tree-node\">");
                    for (var j = 0; j < leng; j++) {
                        cc.push("<span class=\"tree-indent\"></span>");
                    }
                    var flag = false;
                    if (item.state == "closed") {
                        cc.push("<span class=\"tree-hit tree-collapsed\"></span>");
                        cc.push("<span class=\"tree-icon tree-folder " + (item.iconCls ? item.iconCls : "") + "\"></span>");
                    } else {
                        if (item.children && item.children.length) {
                            cc.push("<span class=\"tree-hit tree-expanded\"></span>");
                            cc.push("<span class=\"tree-icon tree-folder tree-folder-open " + (item.iconCls ? item.iconCls : "") + "\"></span>");
                        } else {
                            cc.push("<span class=\"tree-indent\"></span>");
                            cc.push("<span class=\"tree-icon tree-file " + (item.iconCls ? item.iconCls : "") + "\"></span>");
                            flag = true;
                        }
                    }
                    if (opts.checkbox) {
                        if ((!opts.onlyLeafCheck) || flag) {
                            cc.push("<span class=\"tree-checkbox tree-checkbox0\"></span>");
                        }
                    }
                    cc.push("<span class=\"tree-title\">" + opts.formatter.call(self, item) + "</span>");
                    cc.push("</div>");
                    if (item.children && item.children.length) {
                        var tmp = renderFormat(leng + 1, item.children);
                        cc.push("<ul style=\"display:" + (item.state == "closed" ? "none" : "block") + "\">");
                        cc = cc.concat(tmp);
                        cc.push("</ul>");
                    }
                    cc.push("</li>");
                }
                return cc;
            };
        }
    };

    /**
     * @class erajs.ui.Tree.defaults
     */
    erajs.ui.Tree.defaults = {

        /**
         * @property {String} 组件唯一标识.
         */
        id : null,

        /**
         * @property {String} 检索远程数据的URL地址.
         */
        url: null,

        /**
         * @property {String} 检索数据的HTTP方法.(POST / GET)
         */
        method: "post",

        /**
         * @property {Boolean} 定义节点在展开或折叠的时候是否显示动画效果.
         */
        animate: false,

        /**
         * @property {Boolean} 定义是否在每一个借点之前都显示复选框.
         */
        checkbox: false,

        /**
         * @property {Boolean} 定义是否级联选中状态.
         */
        cascadeCheck: true,

        /**
         * @property {Boolean} 定义是否只在末级节点显示复选框.
         */
        onlyLeafCheck: false,

        /**
         * @property {Boolean} 定义是否显示树控件上的虚线.
         */
        lines: false,

        dnd: false,

        /**
         * @property {Array} 节点加载数据.
         */
        data: null,

        /**
         * @property {Object} 请求远程数据时将被发送到服务器额外的参数.
         */
        queryParams: {},

        /**
         * @property {Function} 定义如何渲染节点的文本.
         * @param {Object} node 节点对象
         * @returns {String}
         */
        formatter: function (node) {
            return node.text;
        },

        /**
         * @property {Function} 定义如何从远程服务器加载数据.
         *
         * @param {Object} param 发送到远程服务器的参数对象.
         * @param {Function} success 当检索数据成功的时候调用的回调函数.
         * @param {Object} success.data 远程返回的数据.
         * @param {Function} error 当检索数据失败的时候调用的回调函数.
         * @returns {boolean} 返回false可以终止本操作
         */
        loader: function (param,success,error) {
            var self = this,
                opts = self.options;

            if (!opts.url) {
                return false;
            }
            $.ajax({
                type: opts.method,
                url: opts.url,
                data: param,
                dataType: "json",
                success: function (data) {
                    success(data);
                }, error: function () {
                    error.apply(this, arguments);
                }
            });
        },

        /**
         * @property {Function} 返回过滤过的数据进行展示,返回数据是标准树格式.
         *
         * @param {Array} data 加载的原始数据.
         * @param {HtmlElement} parent DOM对象，代表父节点.
         * @returns {Array} 过滤后的数组数据.
         */
        loadFilter: function (data,parent) {
            return data;
        },

        view: view,

        /**
         * @event 在请求加载远程数据之前触发,返回false可以取消加载操作.
         *
         * @param {Object} node 当前节点.
         * @param {Object} param 请求参数.
         */
        onBeforeLoad: function (node, param) {
        },

        /**
         * @event 在数据加载成功以后触发
         *
         * @param {Object} node 当前节点.
         * @param {Array} data 下级节点数据.
         */
        onLoadSuccess: function (node, data) {
        },

        /**
         * @event 在数据加载失败的时候触发，arguments参数和jQuery的$.ajax()函数里面的'error'回调函数的参数相同.
         */
        onLoadError: function () {
        },

        /**
         * @event 在用户点击一个节点的时候触发.
         *
         * @param {Object} node 点击节点数据.
         */
        onClick: function (node) {
        },

        /**
         * @event 在用户双击一个节点的时候触发.
         *
         * @param {Object} node 点击节点对象.
         */
        onDblClick: function (node) {
        },

        /**
         * @event 在节点展开之前触发，返回false可以取消展开操作.
         *
         * @param {Object} node
         */
        onBeforeExpand: function (node) {
        },

        /**
         * @event 在节点展开的时候触发.
         *
         * @param {Object} node
         */
        onExpand: function (node) {
        },

        /**
         * @event 在节点折叠之前触发，返回false可以取消折叠操作.
         *
         * @param {Object} node
         */
        onBeforeCollapse: function (node) {
        },

        /**
         * @event 在节点折叠的时候触发.
         *
         * @param {Object} node
         */
        onCollapse: function (node) {
        },

        /**
         * @event
         *
         * @param node
         * @param checked
         */
        onBeforeCheck: function (node, checked) {
        },

        /**
         * @event 在用户点击勾选复选框之前触发，返回false可以取消选择动作.
         *
         * @param {Object} node
         * @param {Boolean} checked
         */
        onCheck: function (node, checked) {
        },

        /**
         * @event 在用户选择一个节点之前触发，返回false可以取消选择动作.
         *
         * @param {Object} node
         */
        onBeforeSelect: function (node) {
        },

        /**
         * @event 在用户选择节点的时候触发.
         *
         * @param {Object} node
         */
        onSelect: function (node) {
        },

        /**
         *
         * @event 在右键点击节点的时候触发.
         *
         * @param {event} e
         * @param {Object} node 选中节点
         *
         *
         *      <ul id="tt" xtype="tree" data-options="
         *          url: 'tree_data1.json',
         *          method: 'get',
         *          animate: true,
         *          onContextMenu: function(e,node){
         *              e.preventDefault();
         *              this.select(node.target);
         *              erajs.getCmp('mm').show({
         *                  left: e.pageX,
         *                  top: e.pageY
         *              });
         *           }
         *      "></ul>
         *      <div id="mm" xtype="menu" style="width:120px;">
         *          <div onclick="append()" data-options="iconCls:'icon-add'">Append</div>
         *          <div onclick="removeit()" data-options="iconCls:'icon-remove'">Remove</div>
         *          <div class="menu-sep"></div>
         *          <div onclick="expand()">Expand</div>
         *          <div onclick="collapse()">Collapse</div>
         *     </div>
         */
        onContextMenu: function (e, node) {
        },

        onBeforeDrag: function (node) {
        },

        onStartDrag: function (node) {
        },

        onStopDrag: function (node) {
        },

        onDragEnter: function (self, source) {
        },

        onDragOver: function (self, source) {
        },

        onDragLeave: function (self, source) {
        },
        onBeforeDrop: function (self,source,point) {
        },
        onDrop: function (self,source,point) {
        },

        /**
         * @event 在编辑节点之前触发.
         *
         * @param {Object} node
         */
        onBeforeEdit: function (node) {
        },

        /**
         * @event 在编辑节点之后触发.
         *
         * @param {Object} node
         */
        onAfterEdit: function (node) {
        },

        /**
         * @event 在取消编辑操作的时候触发.
         *
         * @param {Object} node
         */
        onCancelEdit: function (node) {
        }
    };

    erajs.ui.Tree.parseOptions = function(target){
        var t = $(target);
        return $.extend({},erajs.ui.parser.parseOptions(t, ["id","url", "method", {
                checkbox: "boolean",
                cascadeCheck: "boolean",
                onlyLeafCheck: "boolean"
            }, {
                animate: "boolean",
                lines: "boolean",
                dnd: "boolean"
            }
        ]));
    };

})();
/*
 * Copyright (c) 2014 www.erayt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 **/
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.ui.Treegrid
 * @extends erajs.ui.Treegrid.defaults
 * @since 1.2
 *
 * 扩展自{@link erajs.ui.Datagrid.defaults}。使用{@link erajs.ui.Treegrid.defaults}重写默认值对象。
 *
 * 树形表格用于显示分层数据表格。它是基于数据表格、组合树控件和可编辑表格。
 * 树形表格允许用户创建可定制的、异步展开行和显示在多列上的分层数据。
 *
 * {@img erajs.ui.Treegrid/treegrid-report.png}
 *
 * ##使用案列
 *
 * 1、使用HTML标签创建树形表格。在大多数情况下，树形表格遵循数据表格的结构。
 *  可参考示例： [Basic TreeGrid](../examples/treegrid/basic.html)
 *
 *      @example
 *      <table title="Folder Browser"  id="dg2" xtype="treegrid" style="width:700px;height:250px"
 *           data-options="
 *                  url: 'json/treegrid_data1.json',
 *                  method: 'get',
 *                  rownumbers: true,
 *                  idField: 'id',
 *                  treeField: 'name',
 *                  onDblClickCell : function(field,row){
 *                       console.info(row);
 *                  }
 *            ">
 *            <thead>
 *                  <tr>
 *                      <th data-options="field:'name'" width="220">Name</th>
 *                      <th data-options="field:'size'" width="100" align="right">Size</th>
 *                      <th data-options="field:'date'" width="150">Modified Date</th>
 *                  </tr>
 *            </thead>
 *        </table>
 *
 * 2、使用Javascript创建树形表格,详情可查看[TreeGrid with Footer][1]示例.
 *
 * [1]: ../examples/treegrid/footer.html
 *
 * Html代码：
 *
 *        <table id="tg"></table>
 *
 * JS代码：
 *
 *        erajs.create('treegrid',{
 *               contentEl : '#tg',
 *               title:'TreeGrid with Footer',
 *               iconCls:'icon-ok',
 *               width:700,
 *               height:250,
 *               rownumbers: true,
 *               animate:true,
 *               collapsible:true,
 *               fitColumns:true,
 *                url:'json/treegrid_data2.json',
 *               method: 'get',
 *               idField:'id',
 *               treeField:'name',
 *               showFooter:true,
 *               columns:[[
 *                   {title:'Task Name',field:'name',width:180},
 *                   {field:'persons',title:'Persons',width:60,align:'right'},
 *                   {field:'begin',title:'Begin Date',width:80},
 *                   {field:'end',title:'End Date',width:80},
 *                   {field:'progress',title:'Progress',width:120,
 *                       formatter:function(value){
 *                           if (value){
 *                               var s = '<div style="width:100%;border:1px solid #ccc">' +
 *                                       '<div style="width:' + value + '%;background:#cc0000;color:#fff">' +
 *                                       value + '%' + '</div>'
 *                                       '</div>';
 *                               return s;
 *                           } else {
 *                               return '';
 *                           }
 *                       }
 *                   }
 *               ]]
 *           });
 *
 */
(function(){

    function renderDataGrid(self){
        var opts = self.options,
            target = self.target;

        var datagrid = new erajs.ui.Datagrid($.extend({}, opts, {
            target : target,
            url: null,
            data: null,
            loader: function () {
                return false;
            },
            onBeforeLoad: function () {
                return false;
            },
            finder : {
                getTr : function(me, id, type, num){
                    type = type || "body";
                    num = num || 0;
                    var dc = self.dc,
                        dgrid = self.datagrid;
                    if (num == 0) {
                        var opts = self.options;
                        var tr1 = opts.finder.getTr(self, id, type, 1);
                        var tr2 = opts.finder.getTr(self, id, type, 2);
                        return tr1.add(tr2);
                    } else {
                        if (type == "body") {
                            var tr = $("#" + dgrid.rowIdPrefix + "-" + num + "-" + id);
                            if (!tr.length) {
                                tr = (num == 1 ? dc.body1 : dc.body2).find("tr[node-id=\"" + id + "\"]");
                            }
                            return tr;
                        } else {
                            if (type == "footer") {
                                return (num == 1 ? dc.footer1 : dc.footer2).find("tr[node-id=\"" + id + "\"]");
                            } else {
                                if (type == "selected") {
                                    return (num == 1 ? dc.body1 : dc.body2).find("tr.datagrid-row-selected");
                                } else {
                                    if (type == "highlight") {
                                        return (num == 1 ? dc.body1 : dc.body2).find("tr.datagrid-row-over");
                                    } else {
                                        if (type == "checked") {
                                            return (num == 1 ? dc.body1 : dc.body2).find("tr.datagrid-row-checked");
                                        } else {
                                            if (type == "last") {
                                                return (num == 1 ? dc.body1 : dc.body2).find("tr:last[node-id]");
                                            } else {
                                                if (type == "allbody") {
                                                    return (num == 1 ? dc.body1 : dc.body2).find("tr[node-id]");
                                                } else {
                                                    if (type == "allfooter") {
                                                        return (num == 1 ? dc.footer1 : dc.footer2).find("tr[node-id]");
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                getRow : function(me, p){
                    var id = (typeof p == "object") ? p.attr("node-id") : p;
                    return find(self,id);
                },
                getRows : function(me){
                    return getChildren(self);
                }
            },
            onLoadSuccess: function () {},
            onResizeColumn: function (field,width) {
                fixRowHeight(self);
                opts.onResizeColumn.call(self, field,width);
            },
            onSortColumn: function (sort,order) {
                opts.sortName = sort;
                opts.sortOrder = order;
                if (opts.remoteSort) {
                    getRemoteData(self);
                } else {
                    var data = self.getData();
                    loadData(self, 0, data);
                }
                opts.onSortColumn.call(self, sort, order);
            }, onBeforeEdit: function (index,row) {
                if (opts.onBeforeEdit.call(self, row) == false) {
                    return false;
                }
            }, onAfterEdit: function (index,row,changes) {
                opts.onAfterEdit.call(self,row,changes);
            }, onCancelEdit: function (index, row) {
                opts.onCancelEdit.call(self, row);
            }, onUnselect: function (index,row) {
                opts.onUnselect.call(self,row);
            }, onCheck: function (index,row) {
                opts.onCheck.call(self,row);
            }, onUncheck: function (index,row) {
                opts.onUncheck.call(self,row);
            }, onClickRow: function (index,row) {
                opts.onClickRow.call(self,row);
            }, onDblClickRow: function (index,row) {
                opts.onDblClickRow.call(self,row);
            }, onClickCell: function (index,field) {
                opts.onClickCell.call(self, field, find(self, index));
            }, onDblClickCell: function (index,field) {
                opts.onDblClickCell.call(self, field, find(self, index));
            }, onRowContextMenu: function (e,index,row) {
                opts.onContextMenu.call(self, e,row);
            }
        }));

        self.datagrid = datagrid;

        if (!opts.columns) {
            var dgOpts = datagrid.options;
            opts.columns = dgOpts.columns;
            opts.frozenColumns = dgOpts.frozenColumns;
        }
        self.dc = datagrid.dc;
        if (opts.pagination) {
            var pager = datagrid.getPager();
            if(pager){
                pager.pagination({
                    pageNumber: opts.pageNumber,
                    pageSize: opts.pageSize,
                    pageList: opts.pageList,
                    onSelectPage: function (pageNumber, pageSize) {
                        opts.pageNumber = pageNumber;
                        opts.pageSize = pageSize;
                        getRemoteData(self);
                    }
                });
                opts.pageSize = pager.options.pageSize;
            }
        }
    }

    function getRemoteData(self, id, queryParams, success, error) {
        var opts = self.options,
            dgrid = self.datagrid,
            panel = dgrid.getPanel();

        var dgBody = panel.find("div.datagrid-body");

        if (queryParams) {
            opts.queryParams = queryParams;
        }
        var qParams = $.extend({}, opts.queryParams);
        if (opts.pagination) {
            $.extend(qParams, {page: opts.pageNumber, rows: opts.pageSize});
        }
        if (opts.sortName) {
            $.extend(qParams, {sort: opts.sortName, order: opts.sortOrder});
        }
        var row = find(self, id);
        if (opts.onBeforeLoad.call(self, row, qParams) == false) {
            return;
        }

        var treeFolder = dgBody.find("tr[node-id=\"" + id + "\"] span.tree-folder");
        treeFolder.addClass("tree-loading");
        dgrid.loading();

        var flag = opts.loader.call(self, qParams, function (data) {
            treeFolder.removeClass("tree-loading");
            dgrid.loaded();
            loadData(self, id, data, success);
            if (error) {
                error();
            }
        }, function () {
            treeFolder.removeClass("tree-loading");
            dgrid.loaded();
            opts.onLoadError.apply(self, arguments);
            if (error) {
                error();
            }
        });
        if (flag == false) {
            treeFolder.removeClass("tree-loading");
            dgrid.loaded();
        }
    };

    function bindEvents(self) {
        var dc = self.dc;
        var _2e = dc.body1.add(dc.body2);
        var handler = ($.data(_2e[0], "events") || $._data(_2e[0], "events")).click[0].handler;
        dc.body1.add(dc.body2).bind("mouseover", function (e) {
            var tt = $(e.target);
            var tr = tt.closest("tr.datagrid-row");
            if (!tr.length) {
                return;
            }
            if (tt.hasClass("tree-hit")) {
                tt.hasClass("tree-expanded") ? tt.addClass("tree-expanded-hover") : tt.addClass("tree-collapsed-hover");
            }
        }).bind("mouseout", function (e) {
            var tt = $(e.target);
            var tr = tt.closest("tr.datagrid-row");
            if (!tr.length) {
                return;
            }
            if (tt.hasClass("tree-hit")) {
                tt.hasClass("tree-expanded") ? tt.removeClass("tree-expanded-hover") : tt.removeClass("tree-collapsed-hover");
            }
        }).unbind("click").bind("click", function (e) {
            var tt = $(e.target);
            var tr = tt.closest("tr.datagrid-row");
            if (!tr.length) {
                return;
            }
            if (tt.hasClass("tree-hit")) {
                toggle(self, tr.attr("node-id"));
            } else {
                handler(e);
            }
        });
    };

    function loadData(self,parentId,data,hasChild) {

        var opts = self.options,
            dc = self.dc,
            dgrid = self.datagrid;

        data = opts.loadFilter.call(self, data,parentId);
        var row = find(self, parentId),
            cc1,cc2;
        if (row) {
            var body1 = opts.finder.getTr(self, parentId, "body", 1);
            var body2 = opts.finder.getTr(self, parentId, "body", 2);
            cc1 = body1.next("tr.treegrid-tr-tree").children("td").children("div");
            cc2 = body2.next("tr.treegrid-tr-tree").children("td").children("div");
            if (!hasChild) {
                row.children = [];
            }
        } else {
            cc1 = dc.body1;
            cc2 = dc.body2
            if (!hasChild) {
                self.data = [];
            }
        }
        if (!hasChild) {
            cc1.empty();
            cc2.empty();
        }
        if (opts.view.onBeforeRender) {
            opts.view.onBeforeRender.call(opts.view, self, parentId, data);
        }
        opts.view.render.call(opts.view, self, cc1, true);
        opts.view.render.call(opts.view, self, cc2, false);
        if (opts.showFooter) {
            opts.view.renderFooter.call(opts.view, self, dc.footer1, true);
            opts.view.renderFooter.call(opts.view, self, dc.footer2, false);
        }
        if (opts.view.onAfterRender) {
            opts.view.onAfterRender.call(opts.view, dgrid);
        }
        if (!parentId && opts.pagination) {
            var total = self.total;

            var pager = dgrid.getPager();
            if (pager.options.total != total) {
                pager.pagination({total: total});
            }
        }

        fixRowHeight(self);
        showNumber(self);
        self.showLines();
        dgrid.setSelectionState();
        dgrid.autoSizeColumn();
        opts.onLoadSuccess.call(self, row, data);
    };

    function showNumber(self) {
        var dc = self.dc,
            opts = self.options;

        if (!opts.rownumbers) {
            return;
        }
        dc.body1.find("div.datagrid-cell-rownumber").each(function (i) {
            $(this).html(i + 1);
        });
    };

    function fixRowHeight(self, id) {
        var opts = self.options,
            dc = self.dc,
            dgrid = self.datagrid;

        if (!dc.body1.is(":empty") && (!opts.nowrap || opts.autoRowHeight)) {
            if (id != undefined) {
                var children = getChildren(self, id);
                for (var i = 0; i < children.length; i++) {
                    setHeight(children[i][opts.idField]);
                }
            }
        }
        dgrid.fixRowHeight(id);

        function setHeight(id) {
            var tr1 = opts.finder.getTr(self, id, "body", 1);
            var tr2 = opts.finder.getTr(self, id, "body", 2);
            tr1.css("height", "");
            tr2.css("height", "");
            var height = Math.max(tr1.height(), tr2.height());
            tr1.css("height", height);
            tr2.css("height", height);
        };
    };

    function showLines(self){
        var opts = self.options,
            dc = self.dc,
            t = $(self.target),
            dgrid = self.datagrid,
            panel = dgrid.panel.getBody();

        if (opts.lines) {
            panel.addClass("tree-lines");
        } else {
            panel.removeClass("tree-lines");
            return;
        }
        panel.find("span.tree-indent").removeClass("tree-line tree-join tree-joinbottom");
        panel.find("div.datagrid-cell").removeClass("tree-node-last tree-root-first tree-root-one");
        var roots = getRoots(self);
        if (roots.length > 1) {
            getCell(roots[0]).addClass("tree-root-first");
        } else {
            if (roots.length == 1) {
                getCell(roots[0]).addClass("tree-root-one");
            }
        }
        addNodeCss(roots);
        _a6(roots);
        function addNodeCss(nodes) {
            $.map(nodes, function (node) {
                if (node.children && node.children.length) {
                    addNodeCss(node.children);
                } else {
                    var cell = getCell(node);
                    cell.find(".tree-icon").prev().addClass("tree-join");
                }
            });
            var treeCell = getCell(nodes[nodes.length - 1]);
            treeCell.addClass("tree-node-last");
            treeCell.find(".tree-join").removeClass("tree-join").addClass("tree-joinbottom");
        };
        function _a6(_ab) {
            $.map(_ab, function (_ac) {
                if (_ac.children && _ac.children.length) {
                    _a6(_ac.children);
                }
            });
            for (var i = 0; i < _ab.length - 1; i++) {
                var _ad = _ab[i];
                var _ae = getLevel(self,_ad[opts.idField]);
                var tr = opts.finder.getTr(self, _ad[opts.idField]);
                var cc = tr.next().find("tr.datagrid-row td[field=\"" + opts.treeField + "\"] div.datagrid-cell");
                cc.find("span:eq(" + (_ae - 1) + ")").addClass("tree-line");
            }
        };

        function getCell(node) {
            var tr = opts.finder.getTr(self, node[opts.idField]);
            var _b0 = tr.find("td[field=\"" + opts.treeField + "\"] div.datagrid-cell");
            return _b0;
        };
    }

    function getChildren(self, id) {
        var opts = self.options,
            dgrid = self.datagrid;

        var children = [];
        if (id) {
            recursionNode(id);
        } else {
            var roots = getRoots(self);
            for (var i = 0; i < roots.length; i++) {
                children.push(roots[i]);
                recursionNode(roots[i][opts.idField]);
            }
        }
        function recursionNode(id) {
            var node = find(self, id);
            if (node && node.children) {
                for (var i = 0, len = node.children.length; i < len; i++) {
                    var nodes = node.children[i];
                    children.push(nodes);
                    recursionNode(nodes[opts.idField]);
                }
            }
        };
        return children;
    };

    function getRoots(self){
        return self.data;
    }

    function find(self, id) {
        var opts = self.options;
        var data = self.data;
        var cc = [data];
        while (cc.length) {
            var c = cc.shift();
            for (var i = 0; i < c.length; i++) {
                var _6d = c[i];
                if (_6d[opts.idField] == id) {
                    return _6d;
                } else {
                    if (_6d["children"]) {
                        cc.push(_6d["children"]);
                    }
                }
            }
        }
        return null;
    };

    function getParent(self, id) {
        var row = find(self, id);
        if (row._parentId) {
            return find(self, row._parentId);
        } else {
            return null;
        }
    };

    function getLevel(self,id){
        if (!id) {
            return 0;
        }
        var opts = self.options,
            dgrid = self.datagrid;

        var view = dgrid.panel.getBody().children("div.datagrid-view");
        var node = view.find("div.datagrid-body tr[node-id=\"" + id + "\"]").children("td[field=\"" + opts.treeField + "\"]");
        return node.find("span.tree-indent,span.tree-hit").length;
    };

    function toggle(self,id){
        var opts = self.options;
        var tr = opts.finder.getTr(self, id);
        var hit = tr.find("span.tree-hit");
        if (hit.hasClass("tree-expanded")) {
            collapse(self,id);
        } else {
            expand(self,id);
        }
    }

    function expand(self,id){
        var opts = self.options,
            dgrid = self.datagrid,
            tr = opts.finder.getTr(self,id);

        var hit = tr.find("span.tree-hit");
        var row = find(self, id);
        if (hit.length == 0) {
            return;
        }
        if (hit.hasClass("tree-expanded")) {
            return;
        }
        if (opts.onBeforeExpand.call(self, row) == false) {
            return;
        }
        hit.removeClass("tree-collapsed tree-collapsed-hover").addClass("tree-expanded");
        hit.next().addClass("tree-folder-open");
        var trTree = tr.next("tr.treegrid-tr-tree");
        if (trTree.length) {
            var cc = trTree.children("td").children("div");
            expandTree(cc);
        } else {
            insertTreeTr(self, row[opts.idField]);
            var trTree = tr.next("tr.treegrid-tr-tree");
            var cc = trTree.children("td").children("div");
            cc.hide();
            var qParams = $.extend({}, opts.queryParams || {});
            qParams.id = row[opts.idField];
            getRemoteData(self, row[opts.idField], qParams, true, function () {
                if (cc.is(":empty")) {
                    trTree.remove();
                } else {
                    expandTree(cc);
                }
            });
        }
        function expandTree(cc) {
            row.state = "open";
            if (opts.animate) {
                cc.slideDown("normal", function () {
                    dgrid.autoSizeColumn();
                    fixRowHeight(self, id);
                    opts.onExpand.call(self, row);
                });
            } else {
                cc.show();
                dgrid.autoSizeColumn();
                fixRowHeight(self, id);
                opts.onExpand.call(self, row);
            }
        };
    };

    function insertTreeTr(self, pid) {
        var opts = self.options,
            dgrid = self.datagrid;

        var tr1 = opts.finder.getTr(self, pid, "body", 1);
        var tr2 = opts.finder.getTr(self, pid, "body", 2);
        var size = dgrid.getColumnFields(true).length + (opts.rownumbers ? 1 : 0);
        var length = dgrid.getColumnFields(false).length;
        insertTr(tr1, size);
        insertTr(tr2, length);
        function insertTr(tr, size) {
            $("<tr class=\"treegrid-tr-tree\">" + "<td style=\"border:0px\" colspan=\"" + size + "\">" + "<div></div>" + "</td>" + "</tr>").insertAfter(tr);
        };
    };

    function collapse(self,id){
        var opts = self.options,
            row = find(self,id),
            dgrid = self.datagrid;

        var tr = opts.finder.getTr(self, id);
        var hit = tr.find("span.tree-hit");
        if (hit.length == 0) {
            return;
        }
        if (hit.hasClass("tree-collapsed")) {
            return;
        }
        if (opts.onBeforeCollapse.call(self, row) == false) {
            return;
        }
        hit.removeClass("tree-expanded tree-expanded-hover").addClass("tree-collapsed");
        hit.next().removeClass("tree-folder-open");
        row.state = "closed";
        tr = tr.next("tr.treegrid-tr-tree");
        var cc = tr.children("td").children("div");
        if (opts.animate) {
            cc.slideUp("normal", function () {
                dgrid.autoSizeColumn();
                fixRowHeight(self, id);
                opts.onCollapse.call(self, row);
            });
        } else {
            cc.hide();
            dgrid.autoSizeColumn();
            fixRowHeight(self, id);
            opts.onCollapse.call(self, row);
        }
    };

    function getRoot(self) {
        var roots = getRoots(self);
        if (roots.length) {
            return roots[0];
        } else {
            return null;
        }
    };

    function collapseAll(self,id){
        var opts = self.options;
        var children = getChildren(self, id);
        if (id) {
            children.unshift(find(self, id));
        }
        for (var i = 0; i < children.length; i++) {
            collapse(self, children[i][opts.idField]);
        }
    };

    function expandAll(self,id){
        var opts = self.options;
        var children = getChildren(self, id);
        if (id) {
            children.unshift(find(self, id));
        }
        for (var i = 0; i < children.length; i++) {
            expand(self, children[i][opts.idField]);
        }
    }

    function expandTo(self,id){
        var opts = self.options;
        var ids = [];
        var p = getParent(self, id);
        while (p) {
            var id = p[opts.idField];
            ids.unshift(id);
            p = getParent(self, id);
        }
        for (var i = 0; i < ids.length; i++) {
            expand(self, ids[i]);
        }
    };

    function append(self,param){
        var opts = self.options;
        if (param.parent) {
            var tr = opts.finder.getTr(self, param.parent);
            if (tr.next("tr.treegrid-tr-tree").length == 0) {
                insertTreeTr(self, param.parent);
            }
            var cell = tr.children("td[field=\"" + opts.treeField + "\"]").children("div.datagrid-cell");
            var icon = cell.children("span.tree-icon");
            if (icon.hasClass("tree-file")) {
                icon.removeClass("tree-file").addClass("tree-folder tree-folder-open");
                var hit = $("<span class=\"tree-hit tree-expanded\"></span>").insertBefore(icon);
                if (hit.prev().length) {
                    hit.prev().remove();
                }
            }
        }
        loadData(self, param.parent, param.data, true);
    };

    function insert(self, param) {
        var ref = param.before || param.after;
        var opts = self.options;
        var pNode = getParent(self, ref);
        append(self, {parent: (pNode ? pNode[opts.idField] : null), data: [param.data]});
        var nodes = pNode ? pNode.children : self.getRoots();
        for (var i = 0; i < nodes.length; i++) {
            if (nodes[i][opts.idField] == ref) {
                var _96 = nodes[nodes.length - 1];
                nodes.splice(param.before ? i : (i + 1), 0, _96);
                nodes.splice(nodes.length - 1, 1);
                break;
            }
        }

        insertNewTr(true);
        insertNewTr(false);
        showNumber(self);
        self.showLines();

        function insertNewTr(flag) {
            var num = flag ? 1 : 2;
            var tr = opts.finder.getTr(self, param.data[opts.idField], "body", num);
            var btable = tr.closest("table.datagrid-btable");
            tr = tr.parent().children();
            var newTr = opts.finder.getTr(self, ref, "body", num);
            if (param.before) {
                tr.insertBefore(newTr);
            } else {
                var sub = newTr.next("tr.treegrid-tr-tree");
                tr.insertAfter(sub.length ? sub : newTr);
            }
            btable.remove();
        };
    };

    function remove(self,id){
        var dgrid = self.datagrid;

        dgrid.deleteRow(id);

        showNumber(self);
        self.total -= 1;

        var pager = dgrid.getPager();
        if(pager){
            pager.refresh({total: self.total});
        }
        self.showLines();
    };

    erajs.ui.Treegrid = function(options){
        options = options || {};
        var target = options.target;

        if(!target){
            var contentEl = options.contentEl;
            if(contentEl){ target = $(contentEl)[0];}
        }

        if(target){
            this.target = target;
            this.options = $.extend({}, erajs.ui.Treegrid.defaults,
                erajs.ui.Treegrid.parseOptions(target),options);

            this.data = [];
            this.id = this.options.id;
        }

        this._render(target);
    };

    erajs.ui.Treegrid.prototype = {

        /**
         * 更新组件配置项.
         * @param {Object} options
         */
        updateTreegrid: function (options) {
            var me = this;
            var opts = $.extend(me.options, options);
            me.options = opts;
            me._render();
        },

        /**
         * 设置树形表格大小.
         * @param {Object} options
         * @param {Number} options.width 树形表格的新宽度
         * @param {Number} options.height 树形表格的新高度
         */
        resize : function(options){
            var self = this,
                dgrid = self.datagrid;

            dgrid.resize(options);
        },

        /**
         * 加载树形表格数据.
         * @param {Array} data
         */
        loadData : function(data){
            loadData(this,data.parent,data)
        },

        /**
         * 读取并显示首页内容.
         * @param {Object} param
         */
        load: function (param) {
            var self = this,
                opts = self.options,
                dgrid = self.datagrid;

            opts.pageNumber = 1;
            var pager = dgrid.getPager();
            if(pager){
                pager.pagination({pageNumber: 1});
            }
            self.reload(param);
        },

        /**
         * 重新加载树形表格数据.如果'id'属性有值，将重新载入指定树形行，否则重新载入所有行.
         * @param {String} id
         */
        reload: function (id) {
            var self = this,
                opts = self.options,
                dgrid = self.datagrid;

                var queryParams = {};
                if (typeof id == "object") {
                    queryParams = id;
                } else {
                    queryParams = $.extend({}, opts.queryParams);
                    queryParams.id = id;
                }
                if (queryParams.id) {
                    var node = self.find(queryParams.id);
                    if (node.children) {
                        node.children.splice(0, node.children.length);
                    }
                    opts.queryParams = queryParams;
                    var tr = opts.finder.getTr(self, queryParams.id);
                    tr.next("tr.treegrid-tr-tree").remove();
                    tr.find("span.tree-hit").removeClass("tree-expanded tree-expanded-hover").addClass("tree-collapsed");
                    expand(self, queryParams.id);
                } else {
                    getRemoteData(self, null, queryParams);
                }
        },

        /**
         * 重新载入页脚数据.
         * @param {Object} footer
         */
        reloadFooter: function (footer) {
            var self = this,
                opts = self.options,
                dgrid = self.datagrid;

                var dc = dgrid.dc;
                if (footer) {
                   self.footer = footer;
                }
                if (opts.showFooter) {
                    opts.view.renderFooter.call(opts.view, self, dc.footer1, true);
                    opts.view.renderFooter.call(opts.view, self, dc.footer2, false);
                    if (opts.view.onAfterRender) {
                        opts.view.onAfterRender.call(opts.view, dgrid);
                    }
                    self.fixRowHeight();
                }
        },

        /**
         * 获取载入数据.
         * @returns {Array}
         */
        getData : function(){
            return this.data;
        },

        /**
         * 获取页脚数据.
         * @returns {Object}
         */
        getFooterRows : function(){
            return this.footer;
        },

        /**
         * 获取根节点，返回节点对象.
         * @returns {Object}
         */
        getRoot : function(){
            return getRoot(this);
        },

        /**
         * 获取所有根节点，返回节点数组.
         * @returns {Array}
         */
        getRoots : function(){
            return getRoots(this);
        },

        /**
         * 获取父节点.
         * @param {String} id
         * @returns {Object}
         */
        getParent : function(id){
            return getParent(this,id);
        },

        /**
         * 获取子节点.
         * @param {String} id
         * @returns {Array}
         */
        getChildren : function(id){
            return getChildren(this,id);
        },

        /**
         * 获取指定节点等级.
         * @param {String} id
         * @returns {Number}
         */
        getLevel : function(id){
            return getLevel(this,id);
        },

        /**
         * 获取选择的节点并返回它，如果没有节点被选中则返回null.
         * @returns {Object}
         */
        getSelected : function(){
            var self = this,
                dgrid = self.datagrid;

            return dgrid.getSelected();
        },

        /**
         * 查找指定节点并返回节点数据.
         * @param {String} id
         * @returns {Object}
         */
        find : function(id){
            return find(this,id);
        },

        /**
         * 是否叶子节点.
         * @param {String} id
         * @returns {boolean}
         */
        isLeaf: function (id) {
            var self = this,
               opts = self.options;

            var tr = opts.finder.getTr(self, id);
            var hit = tr.find("span.tree-hit");
            return hit.length == 0;
        },

        /**
         * 选择一个节点.
         * @param {String} id
         */
        select: function (id) {
            var self = this,
                dgrid = self.datagrid;

            dgrid.selectRow(id);
        },

        /**
         * 反选一个节点.
         * @param {String} id
         */
        unselect: function (id) {
            var self = this,
                dgrid = self.datagrid;

            dgrid.unselectRow(id);
        },

        /**
         * 修正指定的行高.
         * @param {String} id
         */
        fixRowHeight : function(id){
            fixRowHeight(this,id);
        },

        /**
         * @private
         * 显示树虚线.
         */
        showLines : function(){
            showLines(this);
        },

        /**
         * 节点展开/折叠状态触发器.
         * @param {String} id
         */
        toggle : function(id){
            toggle(this,id);
        },

        /**
         * 展开一个节点.
         * @param {String} id
         */
        expand : function(id){
            expand(this,id);
        },

        /**
         * 折叠一个节点.
         * @param {String} id
         */
        collapse : function(id){
            collapse(this,id);
        },

        /**
         * 折叠所有节点.
         * @param {String} id
         */
        collapseAll : function(id){
            collapseAll(this, id);
        },

        /**
         * 展开所有节点.
         * @param {String} id
         */
        expandAll : function(id){
            expandAll(this,id);
        },

        /**
         * 打开从根节点到指定节点之间的所有节点.
         * @param {String} id
         */
        expandTo : function(id){
            expandTo(this,id);
        },

        /**
         * 追加节点到一个父节点.
         * @param {Object} param
         * @param {Object} param.parent 父节点ID，如果未指定则追加到根节点
         * @param {Object} param.data 数组，节点数据
         */
        append: function (param) {
            append(this, param);
        },

        /**
         * 插入一个新节点到指定节点.
         * @param param
         * @param {Object} param.before (optional) 插入指定节点ID值之前
         * @param {Object} param.after (optional) 插入指定节点ID值之后
         * @param {Object} param.data
         */
        insert : function(param){
            insert(this,param);
        },

        /**
         * 移除一个节点和他的所有子节点.
         * @param {String} id
         */
        remove : function(id){
            remove(this,id);
        },

        /**
         * 删除节点并返回节点数据以及它的子节点.
         * @param {String} id
         * @returns {Array}
         */
        pop : function(id){
            var self = this;
            var row = self.find(id);
            self.remove(id);
            return row;
        },

        /**
         * 刷新指定节点.
         * @param {String} id
         */
        refresh: function (id) {
            var self = this,
                opts = this.options;

            opts.view.refreshRow.call(opts.view, self, id);
        },

        /**
         * 更新指定节点
         * @param {Object} param
         * @param {String} param.id 要更新的节点的ID
         * @param {Object} param.row 新的行数据
         *
         * 示例代码：
         *
         *      var treegrid = erajs.getCmp('tt');
         *      treegrid.update({
	     *          id: 2,
	     *          row: {
		 *              name: '新名称',
		 *              iconCls: 'icon-save'
	     *          }
         *      });
         *
         */
        update: function (param) {
            var self = this,
              opts = self.options;

            opts.view.updateRow.call(opts.view, self, param.id, param.row);
        },

        /**
         * 开始编辑一个节点.
         * @param {String} id
         */
        beginEdit: function (id) {
            var self = this,
                dgrid = self.datagrid;

            dgrid.beginEdit(id);
            self.fixRowHeight(id);
        },

        /**
         * 结束编辑一个节点.
         * @param {String} id
         */
        endEdit: function (id) {
            var self = this,
                dgrid = self.datagrid;

            dgrid.endEdit(id);
        },

        /**
         * 取消编辑一个节点.
         * @param {String} id
         */
        cancelEdit: function (id) {
            var self = this,
                dgrid = self.datagrid;

            dgrid.cancelEdit(id);
        },

        /**
         * 在'forceDestroy'为true的时，销毁面板时将跳过{@link #onBeforeDestory}回调函数.
         * @param {Boolean} forceDestroy 是否强行销毁.
         */
        destroy: function (forceDestroy){
            var me = this;
            me.datagrid.destroy(forceDestroy);
        },

        _render : function(target){
            var self = this,
                target = target || self.target,
                opts = self.options;

            renderDataGrid(this);

            var data = opts.data;
            if(data){
                self.loadData(data);
            }
            getRemoteData(this);
            bindEvents(this);
        }
    };

    var treeview = $.extend({}, erajs.ui.Datagrid.defaults.view, {
        render: function (self, container, frozen) {
            self = self.xtype ? self : erajs.getCmp(self.id);
            var opts = self.options,
                dgrid = self.datagrid;

            var fields = dgrid.getColumnFields(frozen);
            var rowIdPrefix = dgrid.rowIdPrefix;
            if (frozen) {
                if (!(opts.rownumbers || (opts.frozenColumns && opts.frozenColumns.length))) {
                    return;
                }
            }
            var me = this;
            if (this.treeNodes && this.treeNodes.length) {
                var html =  recursionNodes(frozen, this.treeLevel, this.treeNodes);
                $(container).append(html.join(""));
            }

            function  recursionNodes(frozen, level, treeNodes) {
                var pnode = self.getParent(treeNodes[0][opts.idField]);
                var length = (pnode ? pnode.children.length : getRoots(self).length) - treeNodes.length;
                var tBodyHtml = ["<table class=\"datagrid-btable\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><tbody>"];
                for (var i = 0; i < treeNodes.length; i++) {
                    var row = treeNodes[i];
                    if (row.state != "open" && row.state != "closed") {
                        row.state = "open";
                    }
                    var css = opts.rowStyler ? opts.rowStyler.call(self, row) : "";
                    var _d5 = "";
                    var _d6 = "";
                    if (typeof css == "string") {
                        _d6 = css;
                    } else {
                        if (css) {
                            _d5 = css["class"] || "";
                            _d6 = css["style"] || "";
                        }
                    }
                    var cls = "class=\"datagrid-row " + (length++ % 2 && opts.striped ? "datagrid-row-alt " : " ") + _d5 + "\"";
                    var _d7 = _d6 ? "style=\"" + _d6 + "\"" : "";
                    var _d8 = rowIdPrefix + "-" + (frozen ? 1 : 2) + "-" + row[opts.idField];
                    tBodyHtml.push("<tr id=\"" + _d8 + "\" node-id=\"" + row[opts.idField] + "\" " + cls + " " + _d7 + ">");
                    tBodyHtml = tBodyHtml.concat(me.renderRow.call(me, self, fields, frozen, level, row));
                    tBodyHtml.push("</tr>");
                    if (row.children && row.children.length) {
                        var tt =  recursionNodes(frozen, level + 1, row.children);
                        var v = row.state == "closed" ? "none" : "block";
                        tBodyHtml.push("<tr class=\"treegrid-tr-tree\"><td style=\"border:0px\" colspan=" + (fields.length + (opts.rownumbers ? 1 : 0)) + "><div style=\"display:" + v + "\">");
                        tBodyHtml = tBodyHtml.concat(tt);
                        tBodyHtml.push("</div></td></tr>");
                    }
                }
                tBodyHtml.push("</tbody></table>");
                return tBodyHtml;
            };
        },
        renderFooter: function (self, container, frozen) {
            self = self.xtype ? self : erajs.getCmp(self.id);
            var opts = self.options;
                footer = self.footer || [],
                dgrid = self.datagrid;

            var fields = dgrid.getColumnFields(frozen);
            var tbodyHtml = ["<table class=\"datagrid-ftable\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><tbody>"];
            for (var i = 0; i < footer.length; i++) {
                var row = footer[i];
                row[opts.idField] = row[opts.idField] || ("foot-row-id" + i);
                tbodyHtml.push("<tr class=\"datagrid-row\" node-id=\"" + row[opts.idField] + "\">");
                tbodyHtml.push(this.renderRow.call(this, self, fields, frozen, 0, row));
                tbodyHtml.push("</tr>");
            }
            tbodyHtml.push("</tbody></table>");
            $(container).html(tbodyHtml.join(""));
        },
        renderRow: function (self, fields, frozen, rowIndex, row) {
            self = self.xtype ? self : erajs.getCmp(self.id);
            var opts = self.options,
                rNumbers = [],
                dgrid = self.datagrid;

            if (frozen && opts.rownumbers) {
                rNumbers.push("<td class=\"datagrid-td-rownumber\"><div class=\"datagrid-cell-rownumber\">0</div></td>");
            }
            for (var i = 0; i < fields.length; i++) {
                var field = fields[i];
                var col = dgrid.getColumnOption(field);
                if (col) {
                    var css = col.styler ? (col.styler(row[field], row) || "") : "";
                    var _e6 = "";
                    var _e7 = "";
                    if (typeof css == "string") {
                        _e7 = css;
                    } else {
                        if (rNumbers) {
                            _e6 = css["class"] || "";
                            _e7 = css["style"] || "";
                        }
                    }
                    var cls = _e6 ? "class=\"" + _e6 + "\"" : "";
                    var _e8 = col.hidden ? "style=\"display:none;" + _e7 + "\"" : (_e7 ? "style=\"" + _e7 + "\"" : "");
                    rNumbers.push("<td field=\"" + field + "\" " + cls + " " + _e8 + ">");
                    var _e8 = "";
                    if (!col.checkbox) {
                        if (col.align) {
                            _e8 += "text-align:" + col.align + ";";
                        }
                        if (!opts.nowrap) {
                            _e8 += "white-space:normal;height:auto;";
                        } else {
                            if (opts.autoRowHeight) {
                                _e8 += "height:auto;";
                            }
                        }
                    }
                    rNumbers.push("<div style=\"" + _e8 + "\" ");
                    if (col.checkbox) {
                        rNumbers.push("class=\"datagrid-cell-check ");
                    } else {
                        rNumbers.push("class=\"datagrid-cell " + col.cellClass);
                    }
                    rNumbers.push("\">");
                    if (col.checkbox) {
                        if (row.checked) {
                            rNumbers.push("<input type=\"checkbox\" checked=\"checked\"");
                        } else {
                            rNumbers.push("<input type=\"checkbox\"");
                        }
                        rNumbers.push(" name=\"" + field + "\" value=\"" + (row[field] != undefined ? row[field] : "") + "\">");
                    } else {
                        var val = null;
                        if (col.formatter) {
                            val = col.formatter(row[field], row);
                        } else {
                            val = row[field];
                        }
                        if (field == opts.treeField) {
                            for (var j = 0; j < rowIndex; j++) {
                                rNumbers.push("<span class=\"tree-indent\"></span>");
                            }
                            if (row.state == "closed") {
                                rNumbers.push("<span class=\"tree-hit tree-collapsed\"></span>");
                                rNumbers.push("<span class=\"tree-icon tree-folder " + (row.iconCls ? row.iconCls : "") + "\"></span>");
                            } else {
                                if (row.children && row.children.length) {
                                    rNumbers.push("<span class=\"tree-hit tree-expanded\"></span>");
                                    rNumbers.push("<span class=\"tree-icon tree-folder tree-folder-open " + (row.iconCls ? row.iconCls : "") + "\"></span>");
                                } else {
                                    rNumbers.push("<span class=\"tree-indent\"></span>");
                                    rNumbers.push("<span class=\"tree-icon tree-file " + (row.iconCls ? row.iconCls : "") + "\"></span>");
                                }
                            }
                            rNumbers.push("<span class=\"tree-title\">" + val + "</span>");
                        } else {
                            rNumbers.push(val);
                        }
                    }
                    rNumbers.push("</div>");
                    rNumbers.push("</td>");
                }
            }
            return rNumbers.join("");
        },
        refreshRow: function (self, id) {
            self = self.xtype ? self : erajs.getCmp(self.id);
            this.updateRow.call(this, self, id, {});
        },
        updateRow: function (self, id, row) {
            self = self.xtype ? self : erajs.getCmp(self.id);
            var opts = self.options,
                dgrid = self.datagrid;

            var node = self.find(id);
            $.extend(node, row);
            var level = self.getLevel(id) - 1;
            var rowStyler = opts.rowStyler ? opts.rowStyler.call(self, node) : "";
            var rowIdPrefix = dgrid.rowIdPrefix;
            var idVal = node[opts.idField];

            function _f1(frezen) {
                var fields = dgrid.getColumnFields( frezen);
                var tr = opts.finder.getTr(self, id, "body", (frezen ? 1 : 2));
                var number = tr.find("div.datagrid-cell-rownumber").html();
                var checked = tr.find("div.datagrid-cell-check input[type=checkbox]").is(":checked");
                tr.html(this.renderRow(self, fields, frezen, level, node));
                tr.attr("style", rowStyler || "");
                tr.find("div.datagrid-cell-rownumber").html(number);
                if (checked) {
                    tr.find("div.datagrid-cell-check input[type=checkbox]")._propAttr("checked", true);
                }
                if (idVal != id) {
                    tr.attr("id", rowIdPrefix + "-" + (frezen ? 1 : 2) + "-" + idVal);
                    tr.attr("node-id", idVal);
                }
            };
            _f1.call(this, true);
            _f1.call(this, false);
            self.fixRowHeight(id);
        },
        deleteRow: function (self, id) {
            self = self.xtype ? self : erajs.getCmp(self.id);
            var opts = self.options;
            var tr = opts.finder.getTr(self, id);
            tr.next("tr.treegrid-tr-tree").remove();
            tr.remove();
            var node = del(id);
            if (node) {
                if (node.children.length == 0) {
                    tr = opts.finder.getTr(self, node[opts.idField]);
                    tr.next("tr.treegrid-tr-tree").remove();
                    var cell = tr.children("td[field=\"" + opts.treeField + "\"]").children("div.datagrid-cell");
                    cell.find(".tree-icon").removeClass("tree-folder").addClass("tree-file");
                    cell.find(".tree-hit").remove();
                    $("<span class=\"tree-indent\"></span>").prependTo(cell);
                }
            }
            function del(id) {
                var cc;
                var pNode = self.getParent(id);
                if (pNode) {
                    cc = pNode.children;
                } else {
                    cc = self.getData();
                }
                for (var i = 0; i < cc.length; i++) {
                    if (cc[i][opts.idField] == id) {
                        cc.splice(i, 1);
                        break;
                    }
                }
                return pNode;
            };
        },
        onBeforeRender: function ( self, rows,data) {
            self = self.xtype ? self : erajs.getCmp(self.id);
            if ($.isArray(rows)) {
                data = {total: rows.length, rows: rows};
                rows = null;
            }
            if (!data) {
                return false;
            }

            var opts = self.options;
            if (data.length == undefined) {
                if (data.footer) {
                    self.footer = data.footer;
                }
                if (data.total) {
                    self.total = data.total;
                }
                data = this.transfer(self, rows, data.rows);
            } else {
                function _100(_101, _102) {
                    for (var i = 0; i < _101.length; i++) {
                        var row = _101[i];
                        row._parentId = _102;
                        if (row.children && row.children.length) {
                            _100(row.children, row[opts.idField]);
                        }
                    }
                };
                _100(data, rows);
            }
            var node = find(self, rows);
            if (node) {
                if (node.children) {
                    node.children = node.children.concat(data);
                } else {
                    node.children = data;
                }
            } else {
                self.data = self.data.concat(data);
            }
            this.sort(self, data);
            this.treeNodes = data;

            this.treeLevel = getLevel(self,rows);
        },
        sort: function (self, data) {
            self = self.xtype ? self : erajs.getCmp(self.id);
            var opts = self.options,
                dgrid = self.datagrid;

            if (!opts.remoteSort && opts.sortName) {
                var sortName = opts.sortName.split(",");
                var sortOrder = opts.sortOrder.split(",");
                reSort(data);
            }
            function reSort(rows) {
                rows.sort(function (r1, r2) {
                    var r = 0;
                    for (var i = 0; i < sortName.length; i++) {
                        var sn = sortName[i];
                        var so = sortOrder[i];
                        var col = dgrid.getColumnOption(sn);
                        var _107 = col.sorter || function (a, b) {
                            return a == b ? 0 : (a > b ? 1 : -1);
                        };
                        r = _107(r1[sn], r2[sn]) * (so == "asc" ? 1 : -1);
                        if (r != 0) {
                            return r;
                        }
                    }
                    return r;
                });
                for (var i = 0; i < rows.length; i++) {
                    var _108 = rows[i].children;
                    if (_108 && _108.length) {
                        reSort(_108);
                    }
                }
            };
        },
        transfer: function (self, parentId, data) {
            self = self.xtype ? self : erajs.getCmp(self.id);
            var opts = self.options;
            var rows = [];
            for (var i = 0; i < data.length; i++) {
                rows.push(data[i]);
            }
            var _10b = [];
            for (var i = 0; i < rows.length; i++) {
                var row = rows[i];
                if (!parentId) {
                    if (!row._parentId) {
                        _10b.push(row);
                        rows.splice(i, 1);
                        i--;
                    }
                } else {
                    if (row._parentId == parentId) {
                        _10b.push(row);
                        rows.splice(i, 1);
                        i--;
                    }
                }
            }
            var toDo = [];
            for (var i = 0; i < _10b.length; i++) {
                toDo.push(_10b[i]);
            }
            while (toDo.length) {
                var node = toDo.shift();
                for (var i = 0; i < rows.length; i++) {
                    var row = rows[i];
                    if (row._parentId == node[opts.idField]) {
                        if (node.children) {
                            node.children.push(row);
                        } else {
                            node.children = [row];
                        }
                        toDo.push(row);
                        rows.splice(i, 1);
                        i--;
                    }
                }
            }
            return _10b;
        }
    });

    /**
     * @class erajs.ui.Treegrid.defaults
     * @extend erajs.ui.Datagrid.defaults
     */
    erajs.ui.Treegrid.defaults = $.extend({},erajs.ui.Datagrid.defaults,{

        /**
         * @property {String} 定义树节点字段.
         */
        treeField: null,

        /**
         * @property {Boolean} 是否显示虚线.
         */
        lines: false,

        /**
         * @property {Boolean} 定义在节点展开或折叠的时候是否显示动画效果.
         */
        animate: false,

        /**
         * @property {Boolean} 是否只能单选.
         */
        singleSelect: true,

        view: treeview,

        /**
         * @private
         * @property {Function} 定义以何种方式从远程服务器读取数据.
         * @param {Object} param 传递到远程服务器的参数对象
         * @param {Function} success 当检索数据成功的时候调用的回调函数.
         * @param error 当检索数据失败的时候调用的回调函数
         * @returns {boolean} 返回false可以忽略该动作.
         */
        loader: function (param,success,error) {
            var opts = this.options;
            if (!opts.url) {
                return false;
            }
            $.ajax({
                type: opts.method,
                url: opts.url,
                data: param,
                dataType: "json",
                success: function (data) {
                    success(data);
                }, error: function () {
                    error.apply(this, arguments);
                }
            });
        },
        finder : {
            getTr : function(self, id, type, num){
                type = type || "body";
                num = num || 0;
                var dc = self.dc,
                    dgrid = self.datagrid;
                if (num == 0) {
                    var opts = self.options;
                    var tr1 = opts.finder.getTr(self, id, type, 1);
                    var tr2 = opts.finder.getTr(self, id, type, 2);
                    return tr1.add(tr2);
                } else {
                    if (type == "body") {
                        var tr = $("#" + dgrid.rowIdPrefix + "-" + num + "-" + id);
                        if (!tr.length) {
                            tr = (num == 1 ? dc.body1 : dc.body2).find("tr[node-id=\"" + id + "\"]");
                        }
                        return tr;
                    } else {
                        if (type == "footer") {
                            return (num == 1 ? dc.footer1 : dc.footer2).find("tr[node-id=\"" + id + "\"]");
                        } else {
                            if (type == "selected") {
                                return (num == 1 ? dc.body1 : dc.body2).find("tr.datagrid-row-selected");
                            } else {
                                if (type == "highlight") {
                                    return (num == 1 ? dc.body1 : dc.body2).find("tr.datagrid-row-over");
                                } else {
                                    if (type == "checked") {
                                        return (num == 1 ? dc.body1 : dc.body2).find("tr.datagrid-row-checked");
                                    } else {
                                        if (type == "last") {
                                            return (num == 1 ? dc.body1 : dc.body2).find("tr:last[node-id]");
                                        } else {
                                            if (type == "allbody") {
                                                return (num == 1 ? dc.body1 : dc.body2).find("tr[node-id]");
                                            } else {
                                                if (type == "allfooter") {
                                                    return (num == 1 ? dc.footer1 : dc.footer2).find("tr[node-id]");
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            getRow : function(self, p){
                var id = (typeof p == "object") ? p.attr("node-id") : p;
                return find(self,id);
            },
            getRows : function(self){
                return getChildren(self);
            }
        },

        /**
         * @property {Function} 返回过滤后的数据进行展示.
         * @param {Array} data
         * @param {String} parentId
         * @returns {Array}
         */
        loadFilter: function (data,parentId) {
            return data;
        },

        /**
         * @event 在请求数据加载之前触发，返回false可以取消加载动作.
         * @param {Object} row
         * @param {Object} param
         */
        onBeforeLoad: function (row, param) {
        },

        /**
         * @event 数据加载完成之后触发.
         * @param {Object} row
         * @param {Object} data
         */
        onLoadSuccess: function (row, data) {
        },

        /**
         * @event 数据加载失败的时候触发，参数和jQuery的$.ajax()函数的'error'回调函数一样.
         */
        onLoadError: function () {
        },

        /**
         * @event 在节点折叠之前触发，返回false可以取消折叠节点的动作.
         * @param {Object} row
         */
        onBeforeCollapse: function (row) {
        },

        /**
         * @event 在节点被折叠的时候触发.
         * @param {Object} row
         */
        onCollapse: function (row) {
        },

        /**
         * @event 在节点展开之前触发，返回false可以取消展开节点的动作.
         * @param {Object} row
         */
        onBeforeExpand: function (row) {
        },

        /**
         * @event 在节点被展开的时候触发.
         * @param {Object} row
         */
        onExpand: function (row) {
        },

        /**
         * @event 在用户点击节点的时候触发.
         * @param {Object} row
         */
        onClickRow: function (row) {
        },

        /**
         * @event 在用户双击节点的时候触发.
         * @param {Object} row
         */
        onDblClickRow: function (row) {
        },

        /**
         * @event 在用户点击单元格的时候触发.
         * @param {String} field
         * @param {Object} row
         */
        onClickCell: function (field, row) {
        },

        /**
         * @event 在用户双击单元格的时候触发.
         * @param {String} field
         * @param {Object} row
         */
        onDblClickCell: function (field, row) {
        },

        /**
         * @event 在右键点击节点的时候触发.
         * @param {Event} e
         * @param {Object} row
         */
        onContextMenu: function (e, row) {
        },

        /**
         * @event 在用户开始编辑节点的时候触发.
         * @param {Object} row
         */
        onBeforeEdit: function (row) {
        },

        /**
         * @event 在用户完成编辑的时候触发.
         * @param {Object} row
         * @param {Array} changes
         */
        onAfterEdit: function (row, changes) {
        },

        /**
         * @event 在用户取消编辑节点的时候触发.
         * @param {Object} row
         */
        onCancelEdit: function (row) {
        }
    });

    erajs.ui.Treegrid.parseOptions = function(target){
        var t = $(target);
        return $.extend({},erajs.ui.Datagrid.parseOptions(target),
            erajs.ui.parser.parseOptions(t, ["treeField", {
                animate: "boolean"
            }])
        );
    };
})();
/**
 * Created by Administrator on 2014/11/17.
 */
/*
 * Copyright (c) 2014 www.erayt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 **/
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.ui.Combotree
 * @extends erajs.ui.Combotree.defaults
 * @since 1.2
 *
 * 扩展自{@link erajs.ui.Combo.defaults Combo}和{@link erajs.ui.Tree.defaults Tree}。使用{@link erajs.ui.Combotree.defaults}重写默认值对象。
 *
 * 树形下拉框结合选择控件和下拉树控件。它与{@link erajs.ui.Combobox Combobox}(下拉列表框)类似，
 * 但是将下拉列表框的列表替换成了树形控件。该控件支持树状态复选框，方便多选操作。
 *
 * {@img erajs.ui.Combotree/combo_tree.png}
 *
 * ## 依赖关系
 *
 * - {@link erajs.ui.Combo Combo}
 * - {@link erajs.ui.Tree Tree}
 *
 * ##使用案列
 *
 * 1、使用标签创建树形下拉框。
 *
 *       <input id="cbtree" xtype="combotree"
 *          data-options="url:'tree_data1.json',method:'get'" style="width:200px;">
 *
 * 2、使用Javascript创建树形下拉框。
 *
 * Html代码:
 *
 *      <input id="cc" value="01">
 *
 * JS代码：
 *
 *      erajs.create('combotree',{
 *          contentEl : '#cc',
            url: 'tree_data1.json'
        });
 *
 */
(function(){

    function renderComboTree(self) {
        var opts = self.options,
            target = self.target,
            tree = self.tree,
            combo = self.combo;

        if(!combo){
            $(target).addClass("combotree-f");
            combo = new erajs.ui.Combo($.extend({},opts,{
                target : target
            }));
            self.combo = combo;
        }

        var treeOptions = $.extend({},opts,{
            checkbox: opts.multiple,
            onLoadSuccess: function (node, data) {
                var $self = this;
                var values = combo.getValues();
                if (opts.multiple) {
                    var checks = $self.getChecked();
                    for (var i = 0; i < checks.length; i++) {
                        var id = checks[i].id;
                        (function () {
                            for (var i = 0; i < values.length; i++) {
                                if (id == values[i]) {
                                    return;
                                }
                            }
                            values.push(id);
                        })();
                    }
                }
                var $opts = $self.options;
                var onCheck = $opts.onCheck;
                var onSelect = $opts.onSelect;
                $opts.onCheck = $opts.onSelect = function () {
                };
                self.setValues(values);
                $opts.onCheck = onCheck;
                $opts.onSelect = onSelect;
                opts.onLoadSuccess.call($self,node, data);
            }, onClick: function (_e) {
                var $self = this;
                if (opts.multiple) {
                    if(_e.checked){
                        $self.uncheck(_e.target);
                    }else{
                        $self.check(_e.target);
                    }
                } else {
                    combo.hidePanel();
                }
                setComboValue(self);
                opts.onClick.call(this, _e);
            }, onCheck: function (node, checked) {
                setComboValue(self);
                opts.onCheck.call(this,node, checked);
            }
        });

        var ptarget = combo.panel.getBody();
        if (!tree) {
            var _tree = $("<ul></ul>").appendTo(ptarget);
            tree = new erajs.ui.Tree($.extend({}, treeOptions, {
                target : _tree[0]
            }));
            self.tree = tree;
        }else{
            tree.updateTree(treeOptions);
        }
    };

    function setComboValue(self) {
        var opts = self.options,
            tree = self.tree,
            combo = self.combo,
            vv = [], ss = [];

        if (opts.multiple) {
            var checks = tree.getChecked();
            for (var i = 0; i < checks.length; i++) {
                vv.push(checks[i].id);
                ss.push(checks[i].text);
            }
        } else {
            var snode = tree.getSelected();
            if (snode) {
                vv.push(snode.id);
                ss.push(snode.text);
            }
        }
        combo.setValues(vv);
        combo.setText(ss.join(opts.separator));
    };

    function setValues(self,values){
        var opts = self.options,
            combo = self.combo,
            tree = self.tree,
            treeTarget = tree.tree;

        treeTarget.find("span.tree-checkbox").addClass("tree-checkbox0").removeClass("tree-checkbox1 tree-checkbox2");
        var vv = [], ss = [];
        for (var i = 0; i < values.length; i++) {
            var v = values[i];
            var s = v;
            var node = tree.find(v);
            if (node) {
                s = node.text;
                tree.check(node.target);
                tree.select(node.target);
            }
            vv.push(v);
            ss.push(s);
        }
        combo.setValues(vv);
        combo.setText(ss.join(opts.separator));
    }

    erajs.ui.Combotree = function(options){

        options = options || {};
        var target = options.target;

        if(!target){
            var contentEl = options.contentEl;
            if(contentEl){ target = $(contentEl)[0];}
        }

        if(target){
            this.target = target;
            this.options = $.extend(
                {},
                erajs.ui.Combotree.defaults,
                erajs.ui.Combotree.parseOptions(target), options
            );

            this.id = this.options.id;
        }

        renderComboTree(this);
    };

    erajs.ui.Combotree.prototype = {

        /**
         * 更新组件配置项.
         * @param options
         */
        updateCombotree : function(options){
            var me = this;
            var opts = $.extend({},me.options, options);
            me.options = opts;
            me._render();
        },

        /**
         * 获取下拉树对象.
         * @returns {erajs.ui.Tree} tree对象
         */
        getTree : function(){
            return this.tree;
        },

        /**
         * 加载本地树形数据.
         * @param {Array} data
         *
         * 示例代码：
         *
         *        var comboTree = erajs.getCmp('cc');
         *        comboTree.loadData([{
         *               id: 1,
         *               text: 'Languages',
         *               children: [{
         *                   id: 11,
         *                   text: 'Java'
         *               },{
         *                   id: 12,
         *                   text: 'C++'
         *               }]
         *           }]);
         *
         */
        loadData : function(data){
            var self = this,
                tree = self.tree;

            self.data = data;
            tree.loadData(data);
        },

        /**
         * 再次请求远程树数据,通过'url'参数重写原始URL值.
         * @param {String} url
         */
        reload : function(url){
            var self = this,
                opts = self.options,
                tree = self.tree;

            if (url) {
                opts.url = url;
            }
            tree.updateTree({url: opts.url});
        },

        /**
         * 设置组件值数组.
         * @param values
         *
         * 代码示例：
         *
         *      erajs.getCmp('cc').setValues([1,3,21]);
         */
        setValues : function(values){
            setValues(this,values);
        },

        /**
         * 设置组件值.
         * @param {String} value
         */
        setValue : function(value){
            setValues(this,[value]);
        },

        /**
         * 获取值.
         * @returns {String}
         */
        getValue : function(){
            return this.combo.getValue();
        },

        /**
         * 获取组件值的数组.
         * @returns {Array}
         */
        getValues : function(){
            return this.combo.getValues();
        },

        /**
         * 禁用组件.
         */
        disable : function(){
            this.combo.disable();
        },

        /**
         * 启用组件.
         */
        enable : function(){
            this.combo.enable();
        },

        /**
         * 隐藏下拉面板.
         */
        hidePanel : function(){
            this.combo.hidePanel();
        },

        /**
         * 销毁组件.
         */
        destroy : function(){
            this.combo.destroy();
            erajs.destroy(this);
        },

        _render : function(){
            renderComboTree(this);
        }
    };

    /**
     * @class erajs.ui.Combotree.defaults
     * @extends erajs.ui.Combo.defaults
     *
     * 树形下拉框属性/事件扩展自{@link erajs.ui.Combo.defaults combo}(自定义下拉框)
     * 和{@link erajs.ui.Tree.defaults Tree}(树形控件)，
     * 以下只列出继承的Combo属性和事件，更多查看{@link erajs.ui.Combo.defaults Combo}、{@link erajs.ui.Tree.defaults Tree}.
     *
     */
    erajs.ui.Combotree.defaults = $.extend({},
        erajs.ui.Combo.defaults,
        erajs.ui.Tree.defaults,{

        /**
         * @property {Boolean} 是否可编辑.
         */
        editable : false

    });

    erajs.ui.Combotree.parseOptions = function(target){
        return $.extend(
            {},
            erajs.ui.Combo.parseOptions(target),
            erajs.ui.Tree.parseOptions(target)
        );
    };
})();

/**
 * Created by Administrator on 2014/11/17.
 */
/*
 * Copyright (c) 2014 www.erayt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 **/
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.ui.Combogrid
 * @extends erajs.ui.Combogrid.defaults
 * @since 1.2
 *
 * 扩展自{@link erajs.ui.Combo.defaults Combo}和{@link erajs.ui.Datagrid.defaults Datagrid}。使用{@link erajs.ui.Combogrid.defaults}重写默认值对象。
 *
 * 数据表格下拉框结合了可编辑文本框控件和下拉数据表格面板控件，该控件允许用户快速查找和选择，并且该控件提供了键盘导航支持，对行进行筛选。
 *
 * {@img erajs.ui.Combogrid/combo_datagrid.png}
 *
 * ## 依赖关系
 *
 * - {@link erajs.ui.Combo Combo}
 * - {@link erajs.ui.Datagrid Datagrid}
 *
 * ## 使用案例
 *
 * ### 创建数据表格下拉框
 *
 * 1、使用标签创建一个数据表格下拉框。
 *
 *      <select xtype="combogrid" style="width:250px" data-options="
 *            panelWidth: 500,
 *            idField: 'itemid',
 *            textField: 'productname',
 *            url: 'datagrid_data1.json',
 *            autoLoad : false,
 *            method: 'get',
 *            columns: [[
 *                  {field:'itemid',title:'Item ID',width:80},
 *                  {field:'productname',title:'Product',width:120},
 *                  {field:'listprice',title:'List Price',width:80,align:'right'},
 *                  {field:'unitcost',title:'Unit Cost',width:80,align:'right'},
 *                  {field:'attr1',title:'Attribute',width:200},
 *                  {field:'status',title:'Status',width:60,align:'center'}
 *            ]],
 *            fitColumns: true
 *            ">
 *        </select>
 *
 * 2、使用Javascript通过已经定义的`<select>`或`<input>`标签来创建数据表格下拉框。
 *
 *  Html代码:
 *
 *          <input id="cc" name="dept" value="01" />
 *
 * JS代码：
 *
 *         erajs.create('combogrid',{
 *              contentEl : '#cc',
 *              panelWidth:450,
 *               value:'006',
 *               idField:'code',
 *               textField:'name',
 *               url:'datagrid_data.json',
 *               columns:[[
 *                   {field:'code',title:'Code',width:60},
 *                   {field:'name',title:'Name',width:100},
 *                   {field:'addr',title:'Address',width:120},
 *                   {field:'col4',title:'Col41',width:100}
 *               ]]
 *           });
 *
 * ### 自动完成功能
 *
 * 让我们为数据表格下拉框控件添加高级的自动完成功能{@link #mode}。下拉数据表格会根据用户输入显示适合的结果.
 *
 *      <select xtype="combogrid" style="width:250px" data-options="
 *            panelWidth: 500,
 *            idField: 'id',
 *            textField: 'name',
 *            url: 'get_data.do',
 *            method: 'post',
 *            mode: 'remote',
 *            columns: [[
 *                  {field:'code',title:'Code',width:80},
 *                  {field:'name',title:'Name',width:120}
 *            ]]
 *            ">
 *        </select>
 *
 *  在服务器端，参数'q'必须先检索。用户可以查询数据库，然后返回一个SQL查询结果的JSON格式给浏览器。
 *
 */
(function () {

    function nav(self, dir) {
        var opts = self.options,
            grid = self.grid;

        var size = grid.getRows().length;
        if (!size) {
            return;
        }

        var tr = opts.finder.getTr(grid, null, "highlight");
        if (!tr.length) {
            tr = opts.finder.getTr(grid, null, "selected");
        }
        var index;
        if (!tr.length) {
            index = (dir == "next" ? 0 : size - 1);
        } else {
            var index = parseInt(tr.attr("datagrid-row-index"));
            index += (dir == "next" ? 1 : -1);
            if (index < 0) {
                index = size - 1;
            }
            if (index >= size) {
                index = 0;
            }
        }
        grid.highlightRow(index);

        if (opts.selectOnNavigation) {
            self.remainText = false;
            grid.selectRow(index);
        }
    }

    function HandleEnterKey(self) {
        var opts = self.options,
            grid = self.grid;

        var tr = opts.finder.getTr(grid, null, "highlight");
        self.remainText = false;
        if (tr.length) {
            var index = parseInt(tr.attr("datagrid-row-index"));
            if (opts.multiple) {
                if (tr.hasClass("datagrid-row-selected")) {
                    grid.unselectRow(index);
                } else {
                    grid.selectRow(index);
                }
            } else {
                grid.selectRow(index);
            }
        }
        var vv = [];
        $.map(grid.getSelections(), function (row) {
            vv.push(row[opts.idField]);
        });

        self.setValues(vv);
        if (!opts.multiple) {
            self.hidePanel();
        }
    }

    function handleQueryKey(self, q) {
        var opts = self.options;
        var grid = self.grid;
        self.remainText = true;
        if (opts.multiple && !q) {
            setValues(self, [], true);
        } else {
            setValues(self, [q], true);
        }
        if (opts.mode == "remote") {
            grid.clearSelections();
            grid.load($.extend({}, opts.queryParams, {q: q}));
        } else {
            if (!q) {
                return;
            }
            grid.clearSelections();
            grid.highlightRow(-1);
            var rows = grid.getRows();
            var qq = opts.multiple ? q.split(opts.separator) : [q];
            $.map(qq, function (q) {
                q = $.trim(q);
                if (q) {
                    $.map(rows, function (row, i) {
                        if (q == row[opts.textField]) {
                            grid.selectRow(i);
                        } else {
                            if (opts.filter.call(self, q, row)) {
                                grid.highlightRow(i);
                            }
                        }
                    });
                }
            });
        }
    }

    function renderComboGrid(self) {
        var opts = self.options,
            target = self.target,
            grid = self.grid,
            combo = self.combo;

        if (!combo) {
            $(target).addClass("combogrid-f");
            combo = new erajs.ui.Combo($.extend({}, opts, {
                target: target,
                onShowPanel: function () {
                    var $self = this;
                    //判断是否显示面板时加载数据?
                    if (opts.autoLoad === false && self.loaded === false) {
                        grid.load();
                        self.loaded = true;
                    }
                    grid.resize();
                    opts.onShowPanel.call(self);
                },
                keyHandler: {
                    up: function (e) {
                        nav(self, "prev");
                        e.preventDefault();
                    }, down: function (e) {
                        nav(self, "next");
                        e.preventDefault();
                    }, left: function (e) {
                    }, right: function (e) {
                    }, enter: function (e) {
                        HandleEnterKey(self);
                    }, query: function (q, e) {
                        handleQueryKey(self, q);
                    }
                }
            }));
            self.combo = combo;
        }

        var gridOptions = $.extend({}, opts, {
            border: false,
            singleSelect: (!opts.multiple),
            onLoadSuccess: function (data) {
                var values = combo.getValues();
                var onSelect = opts.onSelect;
                opts.onSelect = function () {
                };
               setValues(self, values, self.remainText);
                opts.onSelect = onSelect;

                opts.onLoadSuccess.apply(self, arguments);
            },
            onClickRow: onClickRow,
            onSelect: function (rowIndex, rowData) {
                initValue();
                opts.onSelect.call(self, rowIndex, rowData);
            }, onUnselect: function (rowIndex, row) {
                initValue();
                opts.onUnselect.call(self, rowIndex, row);
            }, onSelectAll: function (rows) {
                initValue();
                opts.onSelectAll.call(self, rows);
            }, onUnselectAll: function (rows) {
                if (opts.multiple) {
                    initValue();
                }
                opts.onUnselectAll.call(self, rows);
            }
        });

        var ptarget = combo.panel.getBody();
        if (!grid) {
            var _grid = $("<table></table>").appendTo(ptarget);
            grid = new erajs.ui.Datagrid($.extend({}, gridOptions, {
                target: _grid[0],
                fit: true
            }));
            self.grid = grid;
        } else {
            grid.datagrid(gridOptions);
        }

        function onClickRow(rowIndex, row) {
            self.remainText = false;
            initValue();
            if (!opts.multiple) {
                combo.hidePanel();
            }
            opts.onClickRow.call(self, rowIndex, row);
        };
        function initValue() {
            var selects = grid.getSelections();
            var vv = [], ss = [];
            for (var i = 0; i < selects.length; i++) {
                vv.push(selects[i][opts.idField]);
                ss.push(selects[i][opts.textField]);
            }
            if (!opts.multiple) {
                combo.setValues((vv.length ? vv : [""]));
            } else {
                combo.setValues(vv);
            }

            if (!self.remainText) {
                combo.setText(ss.join(opts.separator));
            }
        };
    }

    function setValues(self, values, remainText) {
        var opts = self.options,
            grid = self.grid,
            combo = self.combo;

        var rows = grid.getRows();
        var ss = [];
        var vals = combo.getValues();
        var cbOptions = combo.options;
        var onChange = cbOptions.onChange;
        cbOptions.onChange = function () {
        };

        grid.clearSelections();
        for (var i = 0; i < values.length; i++) {
            var index = grid.getRowIndex(values[i]);
            if (index >= 0) {
                grid.selectRow(index);
                ss.push(rows[index][opts.textField]);
            } else {
                ss.push(values[i]);
            }
        }
        combo.setValues(vals);
        // opts.onChange = onChange;
        combo.setValues(values);
        if (!remainText) {
            var s = ss.join(opts.separator);
            if (combo.getText() != s) {
                combo.setText(s);
            }
        }
    }

    erajs.ui.Combogrid = function (options) {
        options = options || {};
        var target = options.target;

        if (!target) {
            var contentEl = options.contentEl;
            if (contentEl) {
                target = $(contentEl)[0];
            }
        }

        if (target) {
            this.target = target;
            this.options = $.extend(
                {},
                erajs.ui.Combogrid.defaults,
                erajs.ui.Combogrid.parseOptions(target), options
            );

            this.id = this.options.id;
            this.loaded = false;
        }

        renderComboGrid(this);
    };

    erajs.ui.Combogrid.prototype = {

        /**
         * 获取表格对象.
         * @returns {erajs.ui.Datagrid}
         */
        getGrid: function () {
            return this.grid;
        },

        /**
         * 设置组件值数组.
         * @param {Array} values
         */
        setValues: function (values) {
            setValues(this, values);
        },

        /**
         * 设置组件值.
         * @param {String} value
         */
        setValue: function (value) {
            setValues(this, [value]);
        },

        /**
         * 获取组件值数组.
         * @returns {Array}
         */
        getValues: function () {
            return this.combo.getValues();
        },

        /**
         * 获取组件值.
         * @returns {String}
         */
        getValue: function () {
            return this.combo.getValue();
        },

        /**
         * 禁用组件.
         */
        disable: function () {
            this.combo.disable();
        },

        /**
         * 启用组件.
         */
        enable: function () {
            this.combo.enable();
        },

        /**
         * 清空组件值.
         */
        clear: function () {
            var self = this,
                grid = self.grid,
                combo = self.combo;

            grid.clearSelections();
            combo.clear();
        },

        /**
         * 重置组件值.
         */
        reset: function () {
            var self = this,
                opts = self.options,
                grid = self.grid;

            if (opts.multiple) {
                self.setValues(opts.originalValue);
            } else {
                self.setValue(opts.originalValue);
            }
        },

        /**
         * 隐藏组件下拉面板.
         */
        hidePanel: function () {
            this.combo.hidePanel();
        },

        /**
         * 销毁组件.
         */
        destroy : function(){
            this.combo.destroy();
            erajs.destroy(this);
        },

        _render: function (target) {
            var self = this;
            renderComboGrid(self);
        }
    };

    /**
     * @class erajs.ui.Combogrid.defaults
     * @extends erajs.ui.Combo.defaults
     * @since 1.2
     *
     * 数据表格下拉框的属性/事件扩展自{@link erajs.ui.Combo.defaults combo}(自定义下拉框)和
     * {@link erajs.ui.Datagrid.defaults datagrid}(数据表格),
     * 以下只列出继承的Combo属性和事件，更多查看{@link erajs.ui.Combo.defaults Combo}、{erajs.ui.Datagrid.defaults Datagrid}.
     *
     */
    erajs.ui.Combogrid.defaults = $.extend(
        {},
        erajs.ui.Combo.defaults,
        erajs.ui.Datagrid.defaults, {

            /**
             * @property {String} 在数据表格加载远程数据的时候显示消息.
             */
            loadMsg: null,

            /**
             * @property {String} `ID`字段名称.
             */
            idField: null,

            /**
             * @property {String}
             */
            textField: null,

            /**
             * @property {String} 定义在文本改变的时候如何过滤数据.
             * 当设置为'remote'模式的时候，用户输入将会发送到名为'q'的http请求参数，向服务器检索新的数据.
             *
             * - 'remote' 据表格将从远程服务器加载数据
             * - 'local' 本地过滤数据.
             *
             */
            mode: "local",

            /**
             * @property {Function} 定义在'mode'设置为'local'的时候如何选择本地数据，返回true时则选择该行.
             * @param {String} q 输入的关键字
             * @param {Object} row 行记录数据
             * @returns {boolean}
             */
            filter: function (q, row) {
                var opts = this.options;
                return row[opts.textField].toLowerCase().indexOf(q.toLowerCase()) == 0;
            }
        });

    erajs.ui.Combogrid.parseOptions = function (target) {
        var t = $(target);
        return $.extend(
            {},
            erajs.ui.Combo.parseOptions(target),
            erajs.ui.Datagrid.parseOptions(target),
            erajs.ui.parser.parseOptions(t, ["idField", "textField", "mode"])
        );
    };
})();

/*
 * Copyright (c) 2014 www.erayt.com. All rights reserved.
 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
 * To use it on other terms please contact us: chengqiuhua@erayt.com
 **/
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.ui.Propertygrid
 * @extends erajs.ui.Propertygrid.defaults
 * @since 1.2
 *
 * 继承自{@link erajs.ui.Datagrid.defaults}。使用{@link erajs.ui.Propertygrid.defaults}重写默认值对象。
 *
 * 属性表格提供给用户浏览和编辑对象属性的一个接口。属性表格是一个行内可编辑数据表格。它使用起来相当简单。
 * 用户可以非常简单的创建一个分组的可编辑属性列表和表示任何数据类型的项。属性表格内建排序和分组功能。
 *
 * {@img erajs.ui.Propertygrid/property_grid.png}
 *
 * ## 依赖关系
 *
 * - {@link erajs.ui.Datagrid Datagrid}
 *
 * ##使用案列
 *
 * 使用标签创建一个属性表格。注意：列已经内置不需要再去声明它。
 *
 *       <table id="pg" xtype="propertygrid" style="width:300px"
 *          data-options="
 *            url:'propertygrid_data1.json',
 *            method:'get',
 *            showGroup:true,
 *            showHeader : true,
 *            scrollbarSize:0
 *            ">
 *        </table>
 *
 *  追加一个新行到属性表格。
 *
 *       //获取表格对象
 *       var pgrid = erajs.getCmp('pg').datagrid;
 *        var row = {
 *              name:'AddName',
 *              value:'',
 *              group:'Marketing Settings',
 *              editor:'text'
 *         };
 *        pgrid.appendRow(row);
 *
 * ## 行数据
 *
 * 属性表格扩展自{@link erajs.ui.Datagrid datagrid}(数据表格)。
 * 它的行数据格式和数据表格相同。作为一个属性行，以下字段是必须的。
 *
 * - name : 字段名称
 * - value ：字段值
 * - group ：分组字段值
 * - editor ：在编辑属性值的时候使用的编辑器对象
 *
 * 行数据示例：
 *
 *      {"total":7,"rows":[
 *           {"name":"Name","value":"Bill Smith","group":"ID Settings","editor":"text"},
 *           {"name":"Address","value":"","group":"ID Settings","editor":"text"},
 *           {"name":"Age","value":"40","group":"ID Settings","editor":"numberbox"},
 *           {"name":"Birthday","value":"2014/02/01","group":"ID Settings","editor":"datebox"},
 *           {"name":"SSN","value":"123-456-7890","group":"ID Settings","editor":"text"},
 *           {"name":"Email","value":"bill@gmail.com","group":"Marketing Settings","editor":"text"},
 *           {"name":"FrequentBuyer","value":"false","group":"Marketing Settings","editor":{
 *              "type":"checkbox",
 *              "options":{
 *                 "on":true,
 *                 "off":false
 *            }
 *        }}
 *      ]}
 *
 */
(function(){

    var currTarget;

    function buildGrid(self){
        var target = self.target,
            opts = self.options,
            dgrid = self.datagrid;

        var options = $.extend({}, opts, {
            cls:'propertygrid',
            view:(opts.showGroup ? opts.groupView : opts.view),
            onClickCell:function(index, field, value){
                var me = this;
                if (currTarget != target){
                    stopEditing(currTarget);
                    currTarget = this.target;
                }
                var row = me.getRows()[index];
                if (opts.editIndex != index && row.editor){
                    var col = me.getColumnOption('value');
                    col.editor = row.editor;
                    stopEditing(currTarget,self);
                    me.beginEdit(index);
                    var ed = me.getEditor({index:index,field:field});
                    if (!ed){
                        ed = me.getEditor({index:index,field:'value'});
                    }
                    if (ed){
                        getInputBox(ed).focus();
                        opts.editIndex = index;
                    }
                }
                opts.onClickCell.call(self, index, field, value);
            },
            loadFilter:function(data){
                stopEditing(target,self);
                return opts.loadFilter.call(this, data);
            }
        });

        if(dgrid){
            dgrid.datagrid(options);
        }else{
            dgrid = new erajs.ui.Datagrid($.extend({},options,{
                target : target
            }));
        }

        self.datagrid = dgrid;

        $(document).unbind('.propertygrid').bind('mousedown.propertygrid', function(e){
            var p = $(e.target).closest('div.datagrid-view,div.combo-panel');
            if (p.length){return;}
            stopEditing(currTarget,self);
            currTarget = undefined;
        });
    }

    function stopEditing(target,self){
        var t = $(target);
        if (!t.length){return}

        var datagrid = self.datagrid;
        var opts = self.options;
        var index = opts.editIndex;
        if (index == undefined){return;}
        var editors = datagrid.getEditors(index);

        if (editors.length){
            $.map(editors, function(ed){
                getInputBox(ed).blur();
            });
            //TODO 校验规则支持
            datagrid.endEdit(index);
        }
        opts.editIndex = undefined;
    }

    function getInputBox(editor){
        return $(editor.component);
    }

    erajs.ui.Propertygrid = function(options){
        options = options || {};
        var target = options.target;

        if(!target){
            var contentEl = options.contentEl;
            if(contentEl){ target = $(contentEl)[0];}
        }

        if(target){
            this.target = target;

            var opts = $.extend({}, erajs.ui.Propertygrid.defaults,
                erajs.ui.Propertygrid.parseOptions(target), options);

            opts.frozenColumns = $.extend(true, [], opts.frozenColumns);
            opts.columns = $.extend(true, [], opts.columns);

            this.options = opts;
            this.id = this.options.id;
        }

        this._render(target);
    };

    erajs.ui.Propertygrid.prototype = {

        /**
         * 更新组件的配置项.
         * @param {Object} options 配置项.
         */
        updateProgrid : function(options){
            var me = this;
            var opts = $.extend({},me.options, options);
            me.options = opts;
            me._render();
        },

        /**
         * 展开指定分组,如果'groupIndex'参数未指定，则展开所有分组.
         * @param {Number} groupIndex 组索引.
         */
        expandGroup:function(groupIndex){
            var state = this.datagrid,
                view = state.dc.view;

            var group = view.find(groupIndex!=undefined ? 'div.datagrid-group[group-index="'+groupIndex+'"]' : 'div.datagrid-group');
            var expander = group.find('span.datagrid-row-expander');
            if (expander.hasClass('datagrid-row-expand')){
                expander.removeClass('datagrid-row-expand').addClass('datagrid-row-collapse');
                group.next('table').show();
            }
            state.fixRowHeight();
        },

        /**
         * 折叠指定分组,如果'groupIndex'参数未指定，则折叠所有分组.
         * @param {Number} groupIndex 组索引.
         */
        collapseGroup:function(groupIndex){
            var state = this.datagrid,
                view = state.dc.view;

            var group = view.find(groupIndex!=undefined ? 'div.datagrid-group[group-index="'+groupIndex+'"]' : 'div.datagrid-group');
            var expander = group.find('span.datagrid-row-expander');
            if (expander.hasClass('datagrid-row-collapse')){
                expander.removeClass('datagrid-row-collapse').addClass('datagrid-row-expand');
                group.next('table').hide();
            }
            state.fixRowHeight();
        },

        /**
         * 在'forceDestroy'为true的时，销毁面板时将跳过{@link #onBeforeDestory}回调函数.
         * @param {Boolean} forceDestroy 是否强行销毁.
         */
        destroy: function (forceDestroy){
            var me = this;
            me.datagrid.destroy(forceDestroy);
        },

        _render : function(target){
            var self = this;
            buildGrid(self);
        }
    };

    var groupview = $.extend({}, erajs.ui.Datagrid.defaults.view, {

        render: function(self, container, frozen){
            self = self.xtype ? self : erajs.getCmp(self.id),
            table = [],
            groups = self.groups;

            for(var i=0; i<groups.length; i++){
                table.push(this.renderGroup.call(this, self, i, groups[i], frozen));
            }
            $(container).html(table.join(''));
        },

        renderGroup: function(self, groupIndex, group, frozen){
                self = self.xtype ? self : erajs.getCmp(self.id),
                opts = self.options,
                target = self.target,
                state = self.datagrid,
                fields = state.getColumnFields(frozen);

            var table = [];
            table.push('<div class="datagrid-group" group-index=' + groupIndex + '>');
            table.push('<table cellspacing="0" cellpadding="0" border="0" style="height:100%"><tbody>');
            table.push('<tr>');
            if ((frozen && (opts.rownumbers || opts.frozenColumns.length)) ||
                (!frozen && !(opts.rownumbers || opts.frozenColumns.length))){
                table.push('<td style="border:0;text-align:center;width:25px"><span class="datagrid-row-expander datagrid-row-collapse" style="display:inline-block;width:16px;height:16px;cursor:pointer">&nbsp;</span></td>');
            }
            table.push('<td style="border:0;">');
            if (!frozen){
                table.push('<span class="datagrid-group-title">');
                table.push(opts.groupFormatter.call(self, group.value, group.rows));
                table.push('</span>');
            }
            table.push('</td>');
            table.push('</tr>');
            table.push('</tbody></table>');
            table.push('</div>');

            table.push('<table class="datagrid-btable" cellspacing="0" cellpadding="0" border="0"><tbody>');
            var index = group.startIndex;
            for(var j=0; j<group.rows.length; j++) {
                var css = opts.rowStyler ? opts.rowStyler.call(self, index, group.rows[j]) : '';
                var classValue = '';
                var styleValue = '';
                if (typeof css == 'string'){
                    styleValue = css;
                } else if (css){
                    classValue = css['class'] || '';
                    styleValue = css['style'] || '';
                }

                var cls = 'class="datagrid-row ' + (index % 2 && opts.striped ? 'datagrid-row-alt ' : ' ') + classValue + '"';
                var style = styleValue ? 'style="' + styleValue + '"' : '';
                var rowId = state.rowIdPrefix + '-' + (frozen?1:2) + '-' + index;
                table.push('<tr id="' + rowId + '" datagrid-row-index="' + index + '" ' + cls + ' ' + style + '>');
                table.push(this.renderRow.call(this,state, fields, frozen, index, group.rows[j]));
                table.push('</tr>');
                index++;
            }
            table.push('</tbody></table>');
            return table.join('');
        },

        bindEvents: function(self){
            var state = self.datagrid,
                dc = state.dc,
                body = dc.body1.add(dc.body2);

            var clickHandler = ($.data(body[0],'events')||$._data(body[0],'events')).click[0].handler;
            body.unbind('click').bind('click', function(e){
                var tt = $(e.target);
                var expander = tt.closest('span.datagrid-row-expander');
                //如果点击收缩，展开
                if (expander.length){
                    var gindex = expander.closest('div.datagrid-group').attr('group-index');
                    if (expander.hasClass('datagrid-row-collapse')){
                        self.collapseGroup(gindex);
                    } else {
                        self.expandGroup(gindex);
                    }
                } else {
                    clickHandler(e);
                }
                e.stopPropagation();
            });
        },

        onBeforeRender: function(self, rows){
            self = self.xtype ? self : erajs.getCmp(self.id),
            state = self.datagrid,
            opts = self.options;

            initCss();

            var groups = [];
            for(var i=0; i<rows.length; i++){
                var row = rows[i];
                var group = getGroup(row[opts.groupField]);
                if (!group){
                    group = {
                        value: row[opts.groupField],
                        rows: [row]
                    };
                    groups.push(group);
                } else {
                    group.rows.push(row);
                }
            }

            var index = 0;
            var newRows = [];
            for(var i=0; i<groups.length; i++){
                var group = groups[i];
                group.startIndex = index;
                index += group.rows.length;
                newRows = newRows.concat(group.rows);
            }

            state.data.rows = newRows;
            self.groups = groups;

            var that = this;
            setTimeout(function(){
                that.bindEvents(self);
            },0);

            function getGroup(value){
                for(var i=0; i<groups.length; i++){
                    var group = groups[i];
                    if (group.value == value){
                        return group;
                    }
                }
                return null;
            }
            function initCss(){
                if (!$('#datagrid-group-style').length){
                    $('head').append(
                            '<style id="datagrid-group-style">' +
                            '.datagrid-group{height:25px;overflow:hidden;font-weight:bold;border-bottom:1px solid #ccc;}' +
                            '</style>'
                    );
                }
            }
        }
    });

    /**
     * @class erajs.ui.Propertygrid.defaults
     * @extends erajs.ui.Datagrid.defaults
     */
    erajs.ui.Propertygrid.defaults = $.extend({},erajs.ui.Datagrid.defaults,{

        /**
         * @removed
         * @property {String} cls
         * 面板添加的CSS类.
         */

        /**
         * @property {Boolean} 是否单选行.
         */
        singleSelect:true,

        remoteSort:false,

        /**
         * @property {Boolean} 自动展开/收缩列的大小，以适应网格的宽度，防止水平滚动.
         */
        fitColumns:true,

        /**
         * @property {String} 加载数据的时显示提示消息.
         */
        loadMsg:'',

        frozenColumns:[[
            {field:'f',width:16,resizable:false}
        ]],

        columns:[[
            {field:'name',title:'Name',width:100,sortable:true},
            {field:'value',title:'Value',width:100,resizable:false}
        ]],

        /**
         * @property {Boolean} 定义是否显示属性分组.
         */
        showGroup:false,

        groupView:groupview,

        /**
         * @property {String} 定义分组的字段名.
         */
        groupField:'group',

        /**
         * @property {Function} 定义如何格式化分组的值.
         * @param {String} fvalue 分组字段值
         * @param {Array} rows 属于该分组的所有行
         * @returns {String} 格式化后的值.
         */
        groupFormatter:function(fvalue,rows){return fvalue}
    });

    erajs.ui.Propertygrid.parseOptions = function(target){
        var t = $(target);
        return $.extend(
            {},
            erajs.ui.Datagrid.parseOptions(target),
            erajs.ui.parser.parseOptions(t,[{showGroup:'boolean'}])
        );
    };
})();

}));
/*!
 * EraJs Development Framework v1.2.1
 *
 * http://www.erayt.com/
 *
 * Copyright (c) 2015 SCM
 * Released under the MIT license
 */
(function( factory ) {
	if ( typeof define === "function" && define.amd ) {
		define( ["jquery"], factory );
	} else {
		factory( jQuery );
	}
}(function( $ ) {

$.extend($.fn, {
    // http://jqueryvalidation.org/validate/
    validate: function( options ) {

        // if nothing is selected, return nothing; can't chain anyway
        if ( !this.length ) {
            if ( options && options.debug && window.console ) {
                console.warn( "Nothing selected, can't validate, returning nothing." );
            }
            return;
        }

        // check if a validator for this form was already created
        var validator = $.data( this[ 0 ], "validator" );
        if ( validator ) {
            return validator;
        }

        // Add novalidate tag if HTML5.
        this.attr( "novalidate", "novalidate" );
        validator = new $.validator( options, this[ 0 ] );
        $.data( this[ 0 ], "validator", validator );

        if ( validator.settings.onsubmit ) {

            this.validateDelegate( ":submit", "click", function( event ) {
                if ( validator.settings.submitHandler ) {
                    validator.submitButton = event.target;
                }
                // allow suppressing validation by adding a cancel class to the submit button
                if ( $( event.target ).hasClass( "cancel" ) ) {
                    validator.cancelSubmit = true;
                }

                // allow suppressing validation by adding the html5 formnovalidate attribute to the submit button
                if ( $( event.target ).attr( "formnovalidate" ) !== undefined ) {
                    validator.cancelSubmit = true;
                }
            });

            // validate the form on submit
            this.submit( function( event ) {
                if ( validator.settings.debug ) {
                    // prevent form submit to be able to see console output
                    event.preventDefault();
                }
                function handle() {
                    var hidden;
                    if ( validator.settings.submitHandler ) {
                        if ( validator.submitButton ) {
                            // insert a hidden input as a replacement for the missing submit button
                            hidden = $( "<input type='hidden'/>" )
                                .attr( "name", validator.submitButton.name )
                                .val( $( validator.submitButton ).val() )
                                .appendTo( validator.currentForm );
                        }
                        validator.settings.submitHandler.call( validator, validator.currentForm, event );
                        if ( validator.submitButton ) {
                            // and clean up afterwards; thanks to no-block-scope, hidden can be referenced
                            hidden.remove();
                        }
                        return false;
                    }
                    return true;
                }

                // prevent submit for invalid forms or custom submit handlers
                if ( validator.cancelSubmit ) {
                    validator.cancelSubmit = false;
                    return handle();
                }
                if ( validator.form() ) {
                    if ( validator.pendingRequest ) {
                        validator.formSubmitted = true;
                        return false;
                    }
                    return handle();
                } else {
                    validator.focusInvalid();
                    return false;
                }
            });
        }
        return validator;
    },
    // http://jqueryvalidation.org/valid/
    valid: function() {
        var valid, validator;
        if ( $( this[ 0 ] ).is( "form" ) ) {
            valid = this.validate().form();
        } else {
            valid = true;
            validator = $( this[ 0 ].form ).validate();
            this.each( function() {
                valid = validator.element( this ) && valid;
            });
        }
        return valid;
    },
    // attributes: space separated list of attributes to retrieve and remove
    removeAttrs: function( attributes ) {
        var result = {},
            $element = this;
        $.each( attributes.split( /\s/ ), function( index, value ) {
            result[ value ] = $element.attr( value );
            $element.removeAttr( value );
        });
        return result;
    },
    // http://jqueryvalidation.org/rules/
    rules: function( command, argument ) {
        var element = this[ 0 ],
            settings, staticRules, existingRules, data, param, filtered;

        if ( command ) {
            settings = $.data( element.form, "validator" ).settings;
            staticRules = settings.rules;
            existingRules = $.validator.staticRules( element );
            switch ( command ) {
                case "add":
                    $.extend( existingRules, $.validator.normalizeRule( argument ) );
                    // remove messages from rules, but allow them to be set separately
                    delete existingRules.messages;
                    staticRules[ element.name ] = existingRules;
                    if ( argument.messages ) {
                        settings.messages[ element.name ] = $.extend( settings.messages[ element.name ], argument.messages );
                    }
                    break;
                case "remove":
                    if ( !argument ) {
                        delete staticRules[ element.name ];
                        return existingRules;
                    }
                    filtered = {};
                    $.each( argument.split( /\s/ ), function( index, method ) {
                        filtered[ method ] = existingRules[ method ];
                        delete existingRules[ method ];
                        if ( method === "required" ) {
                            $( element ).removeAttr( "aria-required" );
                        }
                    });
                    return filtered;
            }
        }

        data = $.validator.normalizeRules(
            $.extend(
                {},
                $.validator.classRules( element ),
                $.validator.attributeRules( element ),
                $.validator.dataRules( element ),
                $.validator.staticRules( element )
            ), element );
        // make sure required is at front
        if ( data.required ) {
            param = data.required;
            delete data.required;
            data = $.extend( { required: param }, data );
            $( element ).attr( "aria-required", "true" );
        }

        // make sure remote is at back
        if ( data.remote ) {
            param = data.remote;
            delete data.remote;
            data = $.extend( data, { remote: param });
        }
        return data;
    }
});

// Custom selectors
$.extend( $.expr[ ":" ], {
	// http://jqueryvalidation.org/blank-selector/
	blank: function( a ) {
		return !$.trim( "" + $( a ).val() );
	},
	// http://jqueryvalidation.org/filled-selector/
	filled: function( a ) {
		return !!$.trim( "" + $( a ).val() );
	},
	// http://jqueryvalidation.org/unchecked-selector/
	unchecked: function( a ) {
		return !$( a ).prop( "checked" );
	}
});

// constructor for validator
$.validator = function( options, form ) {
    this.settings = $.extend( true, {}, $.validator.defaults, options );
    this.currentForm = form;
    this.init();
};

// http://jqueryvalidation.org/jQuery.validator.format/
$.validator.format = function( source, params ) {
    if ( arguments.length === 1 ) {
        return function() {
            var args = $.makeArray( arguments );
            args.unshift( source );
            return $.validator.format.apply( this, args );
        };
    }
    if ( arguments.length > 2 && params.constructor !== Array  ) {
        params = $.makeArray( arguments ).slice( 1 );
    }
    if ( params.constructor !== Array ) {
        params = [ params ];
    }
    $.each( params, function( i, n ) {
        source = source.replace( new RegExp( "\\{" + i + "\\}", "g" ), function() {
            return n;
        });
    });
    return source;
};

$.extend( $.validator, {

    defaults: {
        messages: {},
        groups: {},
        rules: {},
        errorClass: "error",
        validClass: "valid",
        errorElement: "label",
        focusInvalid: true,
        errorContainer: $( [] ),
        errorLabelContainer: $( [] ),
        onsubmit: true,
        ignore: ":hidden",
        ignoreTitle: false,
        onfocusin: function( element ) {
            this.lastActive = element;

            // hide error label and remove error class on focus if enabled
            if ( this.settings.focusCleanup && !this.blockFocusCleanup ) {
                if ( this.settings.unhighlight ) {
                    this.settings.unhighlight.call( this, element, this.settings.errorClass, this.settings.validClass );
                }
                this.hideThese( this.errorsFor( element ) );
            }
        },
        onfocusout: function( element ) {
            if ( !this.checkable( element ) && ( element.name in this.submitted || !this.optional( element ) ) ) {
                this.element( element );
            }
        },
        onkeyup: function( element, event ) {
            if ( event.which === 9 && this.elementValue( element ) === "" ) {
                return;
            } else if ( element.name in this.submitted || element === this.lastElement ) {
                this.element( element );
            }
        },
        onclick: function( element ) {
            // click on selects, radiobuttons and checkboxes
            if ( element.name in this.submitted ) {
                this.element( element );

                // or option elements, check parent select in that case
            } else if ( element.parentNode.name in this.submitted ) {
                this.element( element.parentNode );
            }
        },
        highlight: function( element, errorClass, validClass ) {
            if ( element.type === "radio" ) {
                this.findByName( element.name ).addClass( errorClass ).removeClass( validClass );
            } else {
                $( element ).addClass( errorClass ).removeClass( validClass );
            }
        },
        unhighlight: function( element, errorClass, validClass ) {
            if ( element.type === "radio" ) {
                this.findByName( element.name ).removeClass( errorClass ).addClass( validClass );
            } else {
                $( element ).removeClass( errorClass ).addClass( validClass );
            }
        }
    },

    // http://jqueryvalidation.org/jQuery.validator.setDefaults/
    setDefaults: function( settings ) {
        $.extend( $.validator.defaults, settings );
    },

    messages: {
        required: "This field is required.",
        remote: "Please fix this field.",
        email: "Please enter a valid email address.",
        url: "Please enter a valid URL.",
        date: "Please enter a valid date.",
        dateISO: "Please enter a valid date ( ISO ).",
        number: "Please enter a valid number.",
        digits: "Please enter only digits.",
        creditcard: "Please enter a valid credit card number.",
        equalTo: "Please enter the same value again.",
        maxlength: $.validator.format( "Please enter no more than {0} characters." ),
        minlength: $.validator.format( "Please enter at least {0} characters." ),
        rangelength: $.validator.format( "Please enter a value between {0} and {1} characters long." ),
        range: $.validator.format( "Please enter a value between {0} and {1}." ),
        max: $.validator.format( "Please enter a value less than or equal to {0}." ),
        min: $.validator.format( "Please enter a value greater than or equal to {0}." )
    },

    autoCreateRanges: false,

    prototype: {

        init: function() {
            this.labelContainer = $( this.settings.errorLabelContainer );
            this.errorContext = this.labelContainer.length && this.labelContainer || $( this.currentForm );
            this.containers = $( this.settings.errorContainer ).add( this.settings.errorLabelContainer );
            this.submitted = {};
            this.valueCache = {};
            this.pendingRequest = 0;
            this.pending = {};
            this.invalid = {};
            this.reset();

            var groups = ( this.groups = {} ),
                rules;
            $.each( this.settings.groups, function( key, value ) {
                if ( typeof value === "string" ) {
                    value = value.split( /\s/ );
                }
                $.each( value, function( index, name ) {
                    groups[ name ] = key;
                });
            });
            rules = this.settings.rules;
            $.each( rules, function( key, value ) {
                rules[ key ] = $.validator.normalizeRule( value );
            });

            function delegate( event ) {
                var validator = $.data( this[ 0 ].form, "validator" ),
                    eventType = "on" + event.type.replace( /^validate/, "" ),
                    settings = validator.settings;
                if ( settings[ eventType ] && !this.is( settings.ignore ) ) {
                    settings[ eventType ].call( validator, this[ 0 ], event );
                }
            }
            $( this.currentForm )
                .validateDelegate( ":text, [type='password'], [type='file'], select, textarea, " +
                    "[type='number'], [type='search'] ,[type='tel'], [type='url'], " +
                    "[type='email'], [type='datetime'], [type='date'], [type='month'], " +
                    "[type='week'], [type='time'], [type='datetime-local'], " +
                    "[type='range'], [type='color'], [type='radio'], [type='checkbox']",
                "focusin focusout keyup", delegate)
                // Support: Chrome, oldIE
                // "select" is provided as event.target when clicking a option
                .validateDelegate("select, option, [type='radio'], [type='checkbox']", "click", delegate);

            if ( this.settings.invalidHandler ) {
                $( this.currentForm ).bind( "invalid-form.validate", this.settings.invalidHandler );
            }

            // Add aria-required to any Static/Data/Class required fields before first validation
            // Screen readers require this attribute to be present before the initial submission http://www.w3.org/TR/WCAG-TECHS/ARIA2.html
            $( this.currentForm ).find( "[required], [data-rule-required], .required" ).attr( "aria-required", "true" );
        },

        // http://jqueryvalidation.org/Validator.form/
        form: function() {
            this.checkForm();
            $.extend( this.submitted, this.errorMap );
            this.invalid = $.extend({}, this.errorMap );
            if ( !this.valid() ) {
                $( this.currentForm ).triggerHandler( "invalid-form", [ this ]);
            }
            this.showErrors();
            return this.valid();
        },

        checkForm: function() {
            this.prepareForm();
            for ( var i = 0, elements = ( this.currentElements = this.elements() ); elements[ i ]; i++ ) {
                this.check( elements[ i ] );
            }
            return this.valid();
        },

        // http://jqueryvalidation.org/Validator.element/
        element: function( element ) {
            var cleanElement = this.clean( element ),
                checkElement = this.validationTargetFor( cleanElement ),
                result = true;

            this.lastElement = checkElement;

            if ( checkElement === undefined ) {
                delete this.invalid[ cleanElement.name ];
            } else {
                this.prepareElement( checkElement );
                this.currentElements = $( checkElement );

                result = this.check( checkElement ) !== false;
                if ( result ) {
                    delete this.invalid[ checkElement.name ];
                } else {
                    this.invalid[ checkElement.name ] = true;
                }
            }
            // Add aria-invalid status for screen readers
            $( element ).attr( "aria-invalid", !result );

            if ( !this.numberOfInvalids() ) {
                // Hide error containers on last error
                this.toHide = this.toHide.add( this.containers );
            }
            this.showErrors();
            return result;
        },

        // http://jqueryvalidation.org/Validator.showErrors/
        showErrors: function( errors ) {
            if ( errors ) {
                // add items to error list and map
                $.extend( this.errorMap, errors );
                this.errorList = [];
                for ( var name in errors ) {
                    this.errorList.push({
                        message: errors[ name ],
                        element: this.findByName( name )[ 0 ]
                    });
                }
                // remove items from success list
                this.successList = $.grep( this.successList, function( element ) {
                    return !( element.name in errors );
                });
            }
            if ( this.settings.showErrors ) {
                this.settings.showErrors.call( this, this.errorMap, this.errorList );
            } else {
                this.defaultShowErrors();
            }
        },

        // http://jqueryvalidation.org/Validator.resetForm/
        resetForm: function() {
            if ( $.fn.resetForm ) {
                $( this.currentForm ).resetForm();
            }
            this.submitted = {};
            this.lastElement = null;
            this.prepareForm();
            this.hideErrors();
            this.elements()
                .removeClass( this.settings.errorClass )
                .removeData( "previousValue" )
                .removeAttr( "aria-invalid" );
        },

        numberOfInvalids: function() {
            return this.objectLength( this.invalid );
        },

        objectLength: function( obj ) {
            /* jshint unused: false */
            var count = 0,
                i;
            for ( i in obj ) {
                count++;
            }
            return count;
        },

        hideErrors: function() {
            this.hideThese( this.toHide );
        },

        hideThese: function( errors ) {
            errors.not( this.containers ).text( "" );
            this.addWrapper( errors ).hide();
        },

        valid: function() {
            return this.size() === 0;
        },

        size: function() {
            return this.errorList.length;
        },

        focusInvalid: function() {
            if ( this.settings.focusInvalid ) {
                try {
                    $( this.findLastActive() || this.errorList.length && this.errorList[ 0 ].element || [])
                        .filter( ":visible" )
                        .focus()
                        // manually trigger focusin event; without it, focusin handler isn't called, findLastActive won't have anything to find
                        .trigger( "focusin" );
                } catch ( e ) {
                    // ignore IE throwing errors when focusing hidden elements
                }
            }
        },

        findLastActive: function() {
            var lastActive = this.lastActive;
            return lastActive && $.grep( this.errorList, function( n ) {
                return n.element.name === lastActive.name;
            }).length === 1 && lastActive;
        },

        setUiNameAttribute : function(){
            var uiEles = $( this.currentForm).find('[xtype]');
            var textUis = ['textbox','filebox'];
            var comboUis = ['combobox','combotree','combogrid','datetimebox','datebox','combo'];
            var numberboxUis = ['numberbox','numberspinner'];
            var otherUis = ['slider'];

            $.each(uiEles,function(i,element){
                var id = this.id,
                    comp = erajs.getCmp(id);
                if(comp){
                    var xtype = comp.xtype,
                        name = '',
                        obj = null,
                        el = null;

                    if(erajs.Array.contains(comboUis,xtype)){
                        obj = handleCombo(comp,element,xtype);
                    }else if(erajs.Array.contains(textUis,xtype)){
                        obj = handleTextbox(comp,element,xtype);
                    }else if(erajs.Array.contains(numberboxUis,xtype)){
                        obj = handleNumber(comp,element,xtype);
                    }else if(erajs.Array.contains(otherUis,xtype)){
                        obj = handleOther(comp,element);
                    }

                    if(obj){
                        name = obj.name;
                        el = obj.element;
                        addExtAttribute(el,name,id);
                    }
                }
            });

            //带combo的组件
            function handleCombo(component,element,xtype){
                var name = element.getAttribute('comboname');
                var span = xtype === 'datetimebox' ? component.datebox.combo.combo[0] : component.combo.combo[0];
                element = $(span).find('.textbox-text');
                return {
                    name : name,
                    element : element
                }
            }

            function handleTextbox(component,element,xtype){
                var name = element.getAttribute('textboxname');
                element = xtype == 'textbox' ? component.textbox.find('.textbox-text') : component.filebox.find('.textbox-text');
                return {
                    name : name,
                    element : element
                }
            }

            //numberbox、numberspinner
            function handleNumber(component,element){
                var name = element.getAttribute('numberboxname');
                element = $(component.target);
                return {
                    name : name,
                    element : element
                }
            }

            //slider
            function handleOther(component,element){
                var name = element.getAttribute('slidername');
                element = component.slider.find('.slider-inner');
                return {
                    name : name,
                    element : element
                }
            }

            function addExtAttribute(element,name,id){
                element.attr('uiname',name);
                element.attr('uiid',id);
            }
        },

        baseElements : function(){

            var validator = this,
                rulesCache = {};

            return $( this.currentForm )
                .find( "input, select, textarea" )
                .not( ":submit, :reset, :image, [disabled]" )
                .not( this.settings.ignore )
                .filter( function() {
                    if ( !this.name && validator.settings.debug && window.console ) {
                        console.error( "%o has no name assigned", this );
                    }
                    var name = this.name || this.getAttribute('uiname');
                    // select only the first element for each name, and only those with rules specified
                    if ( name in rulesCache || !validator.objectLength( $( this ).rules() ) ) {
                        return false;
                    }
                    rulesCache[name] = true;
                    return true;
                });
        },

        elements : function(){
            var me = this;
            me.setUiNameAttribute();
            var eles = me.baseElements();
            return eles;
        },

        clean: function( selector ) {
            return $( selector )[ 0 ];
        },

        errors: function() {
            var errorClass = this.settings.errorClass.split( " " ).join( "." );
            return $( this.settings.errorElement + "." + errorClass, this.errorContext );
        },

        reset: function() {
            this.successList = [];
            this.errorList = [];
            this.errorMap = {};
            this.toShow = $( [] );
            this.toHide = $( [] );
            this.currentElements = $( [] );
        },

        prepareForm: function() {
            this.reset();
            this.toHide = this.errors().add( this.containers );
        },

        prepareElement: function( element ) {
            this.reset();
            this.toHide = this.errorsFor( element );
        },

        //todo UI值获取切换
        elementValue: function( element ) {
            var val,
                me = this,
                $element = $( element ),
                type = element.type;
            if ( type === "radio" || type === "checkbox" ) {
                return $( "input[name='" + element.name + "']:checked" ).val();
            } else if ( type === "number" && typeof element.validity !== "undefined" ) {
                return element.validity.badInput ? false : $element.val();
            }

            val = getValue();

            if ( typeof val === "string" ) {
                return val.replace(/\r/g, "" );
            }

            function getValue(){
                var value ;
                var uiname = $element.attr("uiname");
                //包含uiname属性的表示是UI组件.
                if(uiname === undefined){
                    return $element.val();
                }else{
                    var uiid = $element.attr("uiid");
                    if(uiid){
                        var comP = erajs.getCmp(uiid);
                        if(comP){
                            value = comP.getValue();
                        }
                    }
                }
                return value;
            }

            return val;
        },

        check: function( element ) {
            element = this.validationTargetFor( this.clean( element ) );
            var rules = $( element ).rules(),
                rulesCount = $.map( rules, function( n, i ) {
                    return i;
                }).length,
                dependencyMismatch = false,
                val = this.elementValue( element ),
                result, method, rule;

            for ( method in rules ) {
                rule = { method: method, parameters: rules[ method ] };
                try {

                    result = $.validator.methods[ method ].call( this, val, element, rule.parameters );

                    // if a method indicates that the field is optional and therefore valid,
                    // don't mark it as valid when there are no other rules
                    if ( result === "dependency-mismatch" && rulesCount === 1 ) {
                        dependencyMismatch = true;
                        continue;
                    }
                    dependencyMismatch = false;

                    if ( result === "pending" ) {
                        this.toHide = this.toHide.not( this.errorsFor( element ) );
                        return;
                    }

                    if ( !result ) {
                        this.formatAndAdd( element, rule );
                        return false;
                    }
                } catch ( e ) {
                    if ( this.settings.debug && window.console ) {
                        console.log( "Exception occurred when checking element " + element.id + ", check the '" + rule.method + "' method.", e );
                    }
                    throw e;
                }
            }
            if ( dependencyMismatch ) {
                return;
            }
            if ( this.objectLength( rules ) ) {
                this.successList.push( element );
            }
            return true;
        },

        // return the custom message for the given element and validation method
        // specified in the element's HTML5 data attribute
        // return the generic message if present and no method specific message is present
        customDataMessage: function( element, method ) {
            return $( element ).data( "msg" + method.charAt( 0 ).toUpperCase() +
                method.substring( 1 ).toLowerCase() ) || $( element ).data( "msg" );
        },

        // return the custom message for the given element name and validation method
        customMessage: function( name, method ) {
            var m = this.settings.messages[ name ];
            return m && ( m.constructor === String ? m : m[ method ]);
        },

        // return the first defined argument, allowing empty strings
        findDefined: function() {
            for ( var i = 0; i < arguments.length; i++) {
                if ( arguments[ i ] !== undefined ) {
                    return arguments[ i ];
                }
            }
            return undefined;
        },

        defaultMessage: function( element, method ) {

            var name = element.name || element.getAttribute('uiname');
            return this.findDefined(
                this.customMessage( name, method ),
                this.customDataMessage( element, method ),
                // title is never undefined, so handle empty string as undefined
                    !this.settings.ignoreTitle && element.title || undefined,
                $.validator.messages[ method ],
                    "<strong>Warning: No message defined for " + name + "</strong>"
            );
        },

        formatAndAdd: function( element, rule ) {
            var message = this.defaultMessage( element, rule.method ),
                theregex = /\$?\{(\d+)\}/g;
            if ( typeof message === "function" ) {
                message = message.call( this, rule.parameters, element );
            } else if ( theregex.test( message ) ) {
                message = $.validator.format( message.replace( theregex, "{$1}" ), rule.parameters );
            }
            this.errorList.push({
                message: message,
                element: element,
                method: rule.method
            });

            this.errorMap[ element.name ] = message;
            this.submitted[ element.name ] = message;
        },

        addWrapper: function( toToggle ) {
            if ( this.settings.wrapper ) {
                toToggle = toToggle.add( toToggle.parent( this.settings.wrapper ) );
            }
            return toToggle;
        },

        defaultShowErrors: function() {
            var i, elements, error;
            for ( i = 0; this.errorList[ i ]; i++ ) {
                error = this.errorList[ i ];
                if ( this.settings.highlight ) {
                    this.settings.highlight.call( this, error.element, this.settings.errorClass, this.settings.validClass );
                }
                this.showLabel( error.element, error.message );
            }
            if ( this.errorList.length ) {
                this.toShow = this.toShow.add( this.containers );
            }
            if ( this.settings.success ) {
                for ( i = 0; this.successList[ i ]; i++ ) {
                    this.showLabel( this.successList[ i ] );
                }
            }
            if ( this.settings.unhighlight ) {
                for ( i = 0, elements = this.validElements(); elements[ i ]; i++ ) {
                    this.settings.unhighlight.call( this, elements[ i ], this.settings.errorClass, this.settings.validClass );
                }
            }
            this.toHide = this.toHide.not( this.toShow );
            this.hideErrors();
            this.addWrapper( this.toShow ).show();
        },

        validElements: function() {
            return this.currentElements.not( this.invalidElements() );
        },

        invalidElements: function() {
            return $( this.errorList ).map(function() {
                return this.element;
            });
        },

        showLabel: function( element, message ) {
            var place, group, errorID,
                error = this.errorsFor( element ),
                elementID = this.idOrName( element ),
                describedBy = $( element ).attr( "aria-describedby" );
            if ( error.length ) {
                // refresh error/success class
                error.removeClass( this.settings.validClass ).addClass( this.settings.errorClass );
                // replace message on existing label
                error.html( message );
            } else {
                // create error element
                error = $( "<" + this.settings.errorElement + ">" )
                    .attr( "id", elementID + "-error" )
                    .addClass( this.settings.errorClass )
                    .html( message || "" );

                // Maintain reference to the element to be placed into the DOM
                place = error;
                if ( this.settings.wrapper ) {
                    // make sure the element is visible, even in IE
                    // actually showing the wrapped element is handled elsewhere
                    place = error.hide().show().wrap( "<" + this.settings.wrapper + "/>" ).parent();
                }
                if ( this.labelContainer.length ) {
                    this.labelContainer.append( place );
                } else if ( this.settings.errorPlacement ) {
                    this.settings.errorPlacement( place, $( element ) );
                } else {
                    place.insertAfter( element );
                }

                // Link error back to the element
                if ( error.is( "label" ) ) {
                    // If the error is a label, then associate using 'for'
                    error.attr( "for", elementID );
                } else if ( error.parents( "label[for='" + elementID + "']" ).length === 0 ) {
                    // If the element is not a child of an associated label, then it's necessary
                    // to explicitly apply aria-describedby

                    errorID = error.attr( "id" );
                    // Respect existing non-error aria-describedby
                    if ( !describedBy ) {
                        describedBy = errorID;
                    } else if ( !describedBy.match( new RegExp( "\b" + errorID + "\b" ) ) ) {
                        // Add to end of list if not already present
                        describedBy += " " + errorID;
                    }
                    $( element ).attr( "aria-describedby", describedBy );

                    // If this element is grouped, then assign to all elements in the same group
                    group = this.groups[ element.name ];
                    if ( group ) {
                        $.each( this.groups, function( name, testgroup ) {
                            if ( testgroup === group ) {
                                $( "[name='" + name + "']", this.currentForm )
                                    .attr( "aria-describedby", error.attr( "id" ) );
                            }
                        });
                    }
                }
            }
            if ( !message && this.settings.success ) {
                error.text( "" );
                if ( typeof this.settings.success === "string" ) {
                    error.addClass( this.settings.success );
                } else {
                    this.settings.success( error, element );
                }
            }
            this.toShow = this.toShow.add( error );
        },

        errorsFor: function( element ) {
            var name = this.idOrName( element ),
                describer = $( element ).attr( "aria-describedby" ),
                selector = "label[for='" + name + "'], label[for='" + name + "'] *";
            // aria-describedby should directly reference the error element
            if ( describer ) {
                selector = selector + ", #" + describer.replace( /\s+/g, ", #" );
            }
            return this
                .errors()
                .filter( selector );
        },

        idOrName: function( element ) {
            return this.groups[ element.name ] || ( this.checkable( element ) ? element.name : element.id || element.name );
        },

        validationTargetFor: function( element ) {
            // if radio/checkbox, validate first element in group instead
            if ( this.checkable( element ) ) {
                element = this.findByName( element.name ).not( this.settings.ignore )[ 0 ];
            }
            return element;
        },

        checkable: function( element ) {
            return ( /radio|checkbox/i ).test( element.type );
        },

        findByName: function( name ) {
            return $( this.currentForm ).find( "[name='" + name + "']" );
        },

        getLength: function( value, element ) {
            switch ( element.nodeName.toLowerCase() ) {
                case "select":
                    return $( "option:selected", element ).length;
                case "input":
                    if ( this.checkable( element ) ) {
                        return this.findByName( element.name ).filter( ":checked" ).length;
                    }
            }
            return value.length;
        },

        depend: function( param, element ) {
            return this.dependTypes[typeof param] ? this.dependTypes[typeof param]( param, element ) : true;
        },

        dependTypes: {
            "boolean": function( param ) {
                return param;
            },
            "string": function( param, element ) {
                return !!$( param, element.form ).length;
            },
            "function": function( param, element ) {
                return param( element );
            }
        },

        optional: function( element ) {
            var val = this.elementValue( element );
            return !$.validator.methods.required.call( this, val, element ) && "dependency-mismatch";
        },

        startRequest: function( element ) {
            if ( !this.pending[ element.name ] ) {
                this.pendingRequest++;
                this.pending[ element.name ] = true;
            }
        },

        stopRequest: function( element, valid ) {
            this.pendingRequest--;
            // sometimes synchronization fails, make sure pendingRequest is never < 0
            if ( this.pendingRequest < 0 ) {
                this.pendingRequest = 0;
            }
            delete this.pending[ element.name ];
            if ( valid && this.pendingRequest === 0 && this.formSubmitted && this.form() ) {
                $( this.currentForm ).submit();
                this.formSubmitted = false;
            } else if (!valid && this.pendingRequest === 0 && this.formSubmitted ) {
                $( this.currentForm ).triggerHandler( "invalid-form", [ this ]);
                this.formSubmitted = false;
            }
        },

        previousValue: function( element ) {
            return $.data( element, "previousValue" ) || $.data( element, "previousValue", {
                old: null,
                valid: true,
                message: this.defaultMessage( element, "remote" )
            });
        }

    },

    classRuleSettings: {
        required: { required: true },
        email: { email: true },
        url: { url: true },
        date: { date: true },
        dateISO: { dateISO: true },
        number: { number: true },
        digits: { digits: true },
        creditcard: { creditcard: true }
    },

    addClassRules: function( className, rules ) {
        if ( className.constructor === String ) {
            this.classRuleSettings[ className ] = rules;
        } else {
            $.extend( this.classRuleSettings, className );
        }
    },

    classRules: function( element ) {
        var rules = {},
            classes = $( element ).attr( "class" );

        if ( classes ) {
            $.each( classes.split( " " ), function() {
                if ( this in $.validator.classRuleSettings ) {
                    $.extend( rules, $.validator.classRuleSettings[ this ]);
                }
            });
        }
        return rules;
    },

    attributeRules: function( element ) {
        var rules = {},
            $element = $( element ),
            type = element.getAttribute( "type" ),
            method, value;

        for ( method in $.validator.methods ) {

            // support for <input required> in both html5 and older browsers
            if ( method === "required" ) {
                value = element.getAttribute( method );
                // Some browsers return an empty string for the required attribute
                // and non-HTML5 browsers might have required="" markup
                if ( value === "" ) {
                    value = true;
                }
                // force non-HTML5 browsers to return bool
                value = !!value;
            } else {
                value = $element.attr( method );
            }

            // convert the value to a number for number inputs, and for text for backwards compability
            // allows type="date" and others to be compared as strings
            if ( /min|max/.test( method ) && ( type === null || /number|range|text/.test( type ) ) ) {
                value = Number( value );
            }

            if ( value || value === 0 ) {
                rules[ method ] = value;
            } else if ( type === method && type !== "range" ) {
                // exception: the jquery validate 'range' method
                // does not test for the html5 'range' type
                rules[ method ] = true;
            }
        }

        // maxlength may be returned as -1, 2147483647 ( IE ) and 524288 ( safari ) for text inputs
        if ( rules.maxlength && /-1|2147483647|524288/.test( rules.maxlength ) ) {
            delete rules.maxlength;
        }

        return rules;
    },

    dataRules: function( element ) {
        var method, value,
            rules = {}, $element = $( element );
        for ( method in $.validator.methods ) {
            value = $element.data( "rule" + method.charAt( 0 ).toUpperCase() + method.substring( 1 ).toLowerCase() );
            if ( value !== undefined ) {
                rules[ method ] = value;
            }
        }
        return rules;
    },

    staticRules: function( element ) {
        var rules = {},
            validator = $.data( element.form, "validator" );
        if ( validator.settings.rules ) {
            rules = $.validator.normalizeRule( validator.settings.rules[ element.name || element.getAttribute('uiname') ] ) || {};
        }
        return rules;
    },

    normalizeRules: function( rules, element ) {
        // handle dependency check
        $.each( rules, function( prop, val ) {
            // ignore rule when param is explicitly false, eg. required:false
            if ( val === false ) {
                delete rules[ prop ];
                return;
            }
            if ( val.param || val.depends ) {
                var keepRule = true;
                switch ( typeof val.depends ) {
                    case "string":
                        keepRule = !!$( val.depends, element.form ).length;
                        break;
                    case "function":
                        keepRule = val.depends.call( element, element );
                        break;
                }
                if ( keepRule ) {
                    rules[ prop ] = val.param !== undefined ? val.param : true;
                } else {
                    delete rules[ prop ];
                }
            }
        });

        // evaluate parameters
        $.each( rules, function( rule, parameter ) {
            rules[ rule ] = $.isFunction( parameter ) ? parameter( element ) : parameter;
        });

        // clean number parameters
        $.each([ "minlength", "maxlength" ], function() {
            if ( rules[ this ] ) {
                rules[ this ] = Number( rules[ this ] );
            }
        });
        $.each([ "rangelength", "range" ], function() {
            var parts;
            if ( rules[ this ] ) {
                if ( $.isArray( rules[ this ] ) ) {
                    rules[ this ] = [ Number( rules[ this ][ 0 ]), Number( rules[ this ][ 1 ] ) ];
                } else if ( typeof rules[ this ] === "string" ) {
                    parts = rules[ this ].replace(/[\[\]]/g, "" ).split( /[\s,]+/ );
                    rules[ this ] = [ Number( parts[ 0 ]), Number( parts[ 1 ] ) ];
                }
            }
        });

        if ( $.validator.autoCreateRanges ) {
            // auto-create ranges
            if ( rules.min && rules.max ) {
                rules.range = [ rules.min, rules.max ];
                delete rules.min;
                delete rules.max;
            }
            if ( rules.minlength && rules.maxlength ) {
                rules.rangelength = [ rules.minlength, rules.maxlength ];
                delete rules.minlength;
                delete rules.maxlength;
            }
        }

        return rules;
    },

    // Converts a simple string to a {string: true} rule, e.g., "required" to {required:true}
    normalizeRule: function( data ) {
        if ( typeof data === "string" ) {
            var transformed = {};
            $.each( data.split( /\s/ ), function() {
                transformed[ this ] = true;
            });
            data = transformed;
        }
        return data;
    },

    // http://jqueryvalidation.org/jQuery.validator.addMethod/
    addMethod: function( name, method, message ) {
        $.validator.methods[ name ] = method;
        $.validator.messages[ name ] = message !== undefined ? message : $.validator.messages[ name ];
        if ( method.length < 3 ) {
            $.validator.addClassRules( name, $.validator.normalizeRule( name ) );
        }
    },

    methods: {

        // http://jqueryvalidation.org/required-method/
        required: function( value, element, param ) {
            // check if dependency is met
            if ( !this.depend( param, element ) ) {
                return "dependency-mismatch";
            }
            if ( element.nodeName.toLowerCase() === "select" ) {
                // could be an array for select-multiple or a string, both are fine this way
                var val = $( element ).val();
                return val && val.length > 0;
            }
            if ( this.checkable( element ) ) {
                return this.getLength( value, element ) > 0;
            }
            return $.trim( value ).length > 0;
        },

        // http://jqueryvalidation.org/email-method/
        email: function( value, element ) {
            // From http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#e-mail-state-%28type=email%29
            // Retrieved 2014-01-14
            // If you have a problem with this implementation, report a bug against the above spec
            // Or use custom methods to implement your own email validation
            return this.optional( element ) || /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test( value );
        },

        // http://jqueryvalidation.org/url-method/
        url: function( value, element ) {
            // contributed by Scott Gonzalez: http://projects.scottsplayground.com/iri/
            return this.optional( element ) || /^(https?|s?ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test( value );
        },

        // http://jqueryvalidation.org/date-method/
        date: function( value, element ) {
            return this.optional( element ) || !/Invalid|NaN/.test( new Date( value ).toString() );
        },

        // http://jqueryvalidation.org/dateISO-method/
        dateISO: function( value, element ) {
            return this.optional( element ) || /^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test( value );
        },

        // http://jqueryvalidation.org/number-method/
        number: function( value, element ) {
            return this.optional( element ) || /^-?(?:\d+|\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test( value );
        },

        // http://jqueryvalidation.org/digits-method/
        digits: function( value, element ) {
            return this.optional( element ) || /^\d+$/.test( value );
        },

        // http://jqueryvalidation.org/creditcard-method/
        // based on http://en.wikipedia.org/wiki/Luhn/
        creditcard: function( value, element ) {
            if ( this.optional( element ) ) {
                return "dependency-mismatch";
            }
            // accept only spaces, digits and dashes
            if ( /[^0-9 \-]+/.test( value ) ) {
                return false;
            }
            var nCheck = 0,
                nDigit = 0,
                bEven = false,
                n, cDigit;

            value = value.replace( /\D/g, "" );

            // Basing min and max length on
            // http://developer.ean.com/general_info/Valid_Credit_Card_Types
            if ( value.length < 13 || value.length > 19 ) {
                return false;
            }

            for ( n = value.length - 1; n >= 0; n--) {
                cDigit = value.charAt( n );
                nDigit = parseInt( cDigit, 10 );
                if ( bEven ) {
                    if ( ( nDigit *= 2 ) > 9 ) {
                        nDigit -= 9;
                    }
                }
                nCheck += nDigit;
                bEven = !bEven;
            }

            return ( nCheck % 10 ) === 0;
        },

        // http://jqueryvalidation.org/minlength-method/
        minlength: function( value, element, param ) {
            var length = $.isArray( value ) ? value.length : this.getLength( $.trim( value ), element );
            return this.optional( element ) || length >= param;
        },

        // http://jqueryvalidation.org/maxlength-method/
        maxlength: function( value, element, param ) {
            var length = $.isArray( value ) ? value.length : this.getLength( $.trim( value ), element );
            return this.optional( element ) || length <= param;
        },

        // http://jqueryvalidation.org/rangelength-method/
        rangelength: function( value, element, param ) {
            var length = $.isArray( value ) ? value.length : this.getLength( $.trim( value ), element );
            return this.optional( element ) || ( length >= param[ 0 ] && length <= param[ 1 ] );
        },

        // http://jqueryvalidation.org/min-method/
        min: function( value, element, param ) {
            return this.optional( element ) || value >= param;
        },

        // http://jqueryvalidation.org/max-method/
        max: function( value, element, param ) {
            return this.optional( element ) || value <= param;
        },

        // http://jqueryvalidation.org/range-method/
        range: function( value, element, param ) {
            return this.optional( element ) || ( value >= param[ 0 ] && value <= param[ 1 ] );
        },

        // http://jqueryvalidation.org/equalTo-method/
        equalTo: function( value, element, param ) {
            // bind to the blur event of the target in order to revalidate whenever the target field is updated
            // TODO find a way to bind the event just once, avoiding the unbind-rebind overhead
            var target = $( param );
            if ( this.settings.onfocusout ) {
                target.unbind( ".validate-equalTo" ).bind( "blur.validate-equalTo", function() {
                    $( element ).valid();
                });
            }
            return value === target.val();
        },

        // http://jqueryvalidation.org/remote-method/
        remote: function( value, element, param ) {
            if ( this.optional( element ) ) {
                return "dependency-mismatch";
            }

            var previous = this.previousValue( element ),
                validator, data;

            if (!this.settings.messages[ element.name ] ) {
                this.settings.messages[ element.name ] = {};
            }
            previous.originalMessage = this.settings.messages[ element.name ].remote;
            this.settings.messages[ element.name ].remote = previous.message;

            param = typeof param === "string" && { url: param } || param;

            if ( previous.old === value ) {
                return previous.valid;
            }

            previous.old = value;
            validator = this;
            this.startRequest( element );
            data = {};
            data[ element.name ] = value;
            $.ajax( $.extend( true, {
                url: param,
                mode: "abort",
                port: "validate" + element.name,
                dataType: "json",
                data: data,
                context: validator.currentForm,
                success: function( response ) {
                    var errors, message, submitted,valid;
                    if($.type(response) ==='object'){
                        var success = response.success;
                        if(!success){
                            return;
                        }
                        var rslt = response.data;
                        if(rslt.hasOwnProperty('valid')){
                            valid = rslt.valid;
                        }
                    }else{
                        valid = response === true || response === "true";
                    }

                    validator.settings.messages[ element.name ].remote = previous.originalMessage;
                    if ( valid ) {
                        submitted = validator.formSubmitted;
                        validator.prepareElement( element );
                        validator.formSubmitted = submitted;
                        validator.successList.push( element );
                        delete validator.invalid[ element.name ];
                        validator.showErrors();
                    } else {
                        errors = {};
                        message = (response && response.hasOwnProperty('message')) ? response.message : validator.defaultMessage( element, "remote" );
                        errors[ element.name ] = previous.message = message;
                        validator.invalid[ element.name ] = true;
                        validator.showErrors( errors );
                    }
                    previous.valid = valid;
                    validator.stopRequest( element, valid );
                }
            }, param ) );
            return "pending";
        }

    }

});

$.format = function deprecated() {
    throw "$.format has been deprecated. Please use $.validator.format instead.";
};

// ajax mode: abort
// usage: $.ajax({ mode: "abort"[, port: "uniqueport"]});
// if mode:"abort" is used, the previous request on that port (port can be undefined) is aborted via XMLHttpRequest.abort()

var pendingRequests = {},
	ajax;
// Use a prefilter if available (1.5+)
if ( $.ajaxPrefilter ) {
	$.ajaxPrefilter(function( settings, _, xhr ) {
		var port = settings.port;
		if ( settings.mode === "abort" ) {
			if ( pendingRequests[port] ) {
				pendingRequests[port].abort();
			}
			pendingRequests[port] = xhr;
		}
	});
} else {
	// Proxy ajax
	ajax = $.ajax;
	$.ajax = function( settings ) {
		var mode = ( "mode" in settings ? settings : $.ajaxSettings ).mode,
			port = ( "port" in settings ? settings : $.ajaxSettings ).port;
		if ( mode === "abort" ) {
			if ( pendingRequests[port] ) {
				pendingRequests[port].abort();
			}
			pendingRequests[port] = ajax.apply(this, arguments);
			return pendingRequests[port];
		}
		return ajax.apply(this, arguments);
	};
}

// provides delegate(type: String, delegate: Selector, handler: Callback) plugin for easier event delegation
// handler is only called when $(event.target).is(delegate), in the scope of the jquery-object for event.target

$.extend($.fn, {
	validateDelegate: function( delegate, type, handler ) {
		return this.bind(type, function( event ) {
			var target = $(event.target);
			if ( target.is(delegate) ) {
				return handler.apply(target, arguments);
			}
		});
	}
});

}));
/*!
 * EraJs Development Framework v1.2.1
 *
 * http://www.erayt.com/
 *
 * Copyright (c) 2015 SCM
 * Released under the MIT license
 */
(function( factory ) {
	if ( typeof define === "function" && define.amd ) {
		define( ["jquery", "./erajs.validate"], factory );
	} else {
		factory( jQuery );
	}
}(function( $ ) {

// 中文字两个字节
jQuery.validator.addMethod("byterangelength", function(value, element, param){
    var length = value.length;
    for (var i = 0; i < value.length; i++) {
        if (value.charCodeAt(i) > 127) {
            length++;
        }
    }
    return this.optional(element) || (length >= param[0] && length <= param[1]);
}, $.validator.format("Please enter a value which the byte length between {0} and {1}.(one chinese word count 2 bytes)"));
$.validator.addMethod("datetime", function(value, element,format) {
    return this.optional(element) || erajs.Date.parse(value,format) !== undefined;
}, "Please enter a valid datetime in {0} format");
// 身份证号验证
$.validator.addMethod("idcard", function(value, element) {
    var tel = /((11|12|13|14|15|21|22|23|31|32|33|34|35|36|37|41|42|43|44|45|46|50|51|52|53|54|61|62|63|64|65)[0-9]{4})(([1|2][0-9]{3}[0|1][0-9][0-3][0-9][0-9]{3}[Xx0-9])|([0-9]{2}[0|1][0-9][0-3][0-9][0-9]{3}))/;
    return this.optional(element) || (tel.test(value));
}, "Please enter a valid idcard number");
// 手机号码验证
$.validator.addMethod("cellphone", function(value, element) {
    var mobile = /^(((1[3|5|8][0-9]{1}))+\d{8})$/;
    return this.optional(element) || (mobile.test(value));
}, "Please enter a valid phone number");
$.validator.addMethod("fax",function(value, element) {
    var fax = /(^[0-9]{3,4}\-[0-9]{7,8}$)|(^[0-9]{7,8}$)|(^\([0-9]{3,4}\)[0-9]{3,8}$)|(^0{0,1}13[0-9]{9}$)/;
    return this.optional(element) || (fax.test(value));
}, "Please enter a valid fax number");
// 电话号码验证
$.validator.addMethod("telephone", function(value, element) {
    var tel = /^(0[0-9]{2,3}\-)?([2-9][0-9]{6,7})+(\-[0-9]{1,4})?$/;
    var mobile = /^(((1[3|5|8][0-9]{1}))+\d{8})$/;
    return this.optional(element) || (tel.test(value))|| (mobile.test(value));
}, "Please enter a valid telephone number");
// 邮政编码验证
$.validator.addMethod("zipcode", function(value, element) {
    var tel = /^[0-9]{6}$/;
    return this.optional(element) || (tel.test(value));
}, "Please enter a valid zip code");
$.validator.addMethod("pattern",function(value, element,expr) {
    expr = new RegExp(expr);
    return this.optional(element) || (expr.test(value));
}, "Input content and regexp don't match");
$.validator.addMethod("time", function(value, element) {
	return this.optional(element) || /^([01]\d|2[0-3])(:[0-5]\d){1,2}$/.test(value);
}, "Please enter a valid time, between 00:00 and 23:59");

$.validator.addMethod("time12h", function(value, element) {
	return this.optional(element) || /^((0?[1-9]|1[012])(:[0-5]\d){1,2}(\ ?[AP]M))$/i.test(value);
}, "Please enter a valid time in 12-hour am/pm format");

}));
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.framework.LogicWarpper
 * @singleton
 *
 * LogicWarpper主要是为了封装基础业务，减少在业务系统开发过程中编写重复的基础代码；
 * 主要的使用方式，配置custom-options属性来达到UI组件的扩展，目前主要实现了datagrid,
 * button组件的扩展.使用如下：
 *
 * ##使用案列
 *
 * {@img erajs.framework.LogicWarpper/crud.png}
 *
 * 1、查询条件表单.
 *
 *      <form target="_top"  method="POST" name="paramListForm">
 *        <ul class="content_ul">
 *          <li class="title95">参数名称：</li>
 *          <li class="input120">
 *              <input type="text" name="name" class="input-css" />
 *          </li>
 *          <li>
 *              <div xtype="button" iconCls="icon-search" custom-options="
 *                  btnType : 'query',
 *                  refDgId : 'paramgrid'
 *              ">查询</div>
 *           </li>
 *        </ul>
 *       </form>
 *
 * 2、用Html很容易创建自定义表格.
 *
 *      <table id="paramgrid" xtype="datagrid" data-options="
 *            url: '../../seachAll.do',
 *            toolbar:'#tbutton'
 *         "
 *           custom-options="
 *               identifyField : 'name',
 *               queryFormName : 'paramListForm'
 *            ">
 *            <thead>
 *               <tr>
 *                  <th data-options="field:'ck',checkbox:true"></th>
 *                  <th data-options="field:'name',width:250,halign:'center'">系统参数名称</th>
 *                  <th data-options="field:'value',width:250,halign:'center'">系统参数值</th>
 *                  <th data-options="field:'memo',width:300,halign:'center'">中文备注</th>
 *                  <th data-options="field:'status',width:100,halign:'center'">状态</th>
 *               </tr>
 *            </thead>
 *        </table>
 *
 *  3、toolbar定义.
 *
 *       <div id="tbutton" style="padding:5px;">
 *           <div id="add" xtype="button" data-options="iconCls:'icon-add'"
 *             custom-options="
 *                  dlgtitle : '新增参数',
 *                  dlgw: 350,
 *                  dlgh: 265,
 *                  mustSelected : false,
 *                  url : 'sysParam.html'
 *             "
 *         >新增</div>
 *         <div id="edit" xtype="button" data-options="iconCls:'icon-edit'"
 *            custom-options="
 *                  dlgtitle : '修改参数',
 *                  dlgw: 350,
 *                  dlgh: 270,
 *                  isEdit : true,
 *                  url : 'sysParam.html',
 *                  callback : function(form){
 *						form.attr('action','../../update.do');
 *						$('input[name=name]').attr('readonly',true);
 *				    }
 *         ">修改</div>
 *         <div id="remove" xtype="button" data-options="iconCls:'icon-remove'"
 *            custom-options="
 *                  url : '../../delete.do',
 *                  autoRefresh : true,
 *                  actionType : 'do',
 *                  paramPrefix:'sysParam'
 *        ">删除</div>
 *      </div>
 */
(function(alias){

    var LogicWarpper = erajs.framework.LogicWarpper = {

        /**
         * @property {Boolean} 表单是否需要验证.
         */
        needValidated : true,

        /**
         * @property {Boolean} 是否需要包装请求参数为 reqJson : {} 的方式.
         */
        warpReqJson : true,

        actionRegExp : /do|action/,

        /**
         * @property {String} 页码标识符
         */
        pageNumber : 'pageStart',

        /**
         * @property {String} 分页大小标识符
         */
        pageSize : 'pageLimit',

        /**
         * @param callback
         */
        onReady : function(callback){
            var me = this;
            $(document).ready(function(){

                if(callback){
                   var flag = callback();
                   if(flag === false){return;}
                }

                if(me.needValidated){
                    //加载表单验证xml.
                    erajs.loadValidationXml();
                    //准备表单验证规则.
                    var formDom = me.getPageForm();
                    if(formDom){
                        erajs.prepareValidateRules(formDom);
                    }
                }
            });
        },

        /**
         * @cfg {Object} extButtonCfg 扩展按钮属性配置项.
         * @cfg {String} [extButtonCfg.dlgtitle='窗口'] 弹窗title.
         * @cfg {Number} [extButtonCfg.dlgw=550]  弹窗宽度.
         * @cfg {Number} [extButtonCfg.dlgh=350]  弹窗高度.
         * @cfg {String} [extButtonCfg.url] 弹窗加载页面地址或者远程服务端请求地址.
         * @cfg {String} [extButtonCfg.dataUrl]  修改操作获取表单数据的远程请求地址，当isEdit为true时有效，若该值为空，默认获取当前选中行数据加载表单.
         * @cfg {Boolean} [extButtonCfg.isEdit=false] 如果是‘修改’操作，那么设置该值为true.
         * @cfg {String} [extButtonCfg.dataNode] 如果是‘修改’操作,且‘dataUrl’不为空，配置该属性可指定表单数据的节点.
         * @cfg {Object} [extButtonCfg.editEvents] 编辑操作时，加载表单的相关事件，详情可参考{@link erajs.Extra#loadForm loadForm}方法的events参数.
         * @cfg {Boolean} [extButtonCfg.autoRefresh=false] 当actionType为'do'且btnType为toolbar时，该值为true，则自动刷新表格数据,比如：删除操作.
         * @cfg {Boolean} [extButtonCfg.mustSelected=true] 是否必须选中行才可用,在btnType为'toolbar'时有效.
         * @cfg {Boolean} [extButtonCfg.singleSelect=true] 表格属性singleSelect为false,按钮扩展属性mustSelected为true时,singleSelect为true，逻辑判断将校验只能选中一行,比如：‘修改’操作.
         * @cfg {String} [extButtonCfg.actionType='html'] 功能处理类型,html：加载页面；do:处理逻辑.
         * @cfg {String} [extButtonCfg.btnType='toolbar'] 按钮类型.可选值：toolbar、submit、cancel、reset、event、query、ztree
         * @cfg {String} [extButtonCfg.refDgId] 关联表格的ID，btnType为'query'或'submit'时有效.
         * @cfg {String} [extButtonCfg.refFormName] 关联表单name属性值，btnType为'submit'时，如果提交按钮不在form表单内，那么需要设置该值.
         * @cfg {String} [extButtonCfg.paramPrefix] 跟后端交互时，参数的前缀，如：btnType为'submit'或'toolbar'时，可设置该值.
         * @cfg {Boolean} [extButtonCfg.showButtons = true] 弹窗ztree是否需要确定，取消按钮栏，只在btnType为'ztree'时有效.
         * @cfg {Object} [extButtonCfg.extraOptions] 弹窗ztree扩展配置项,可配置项有：filterFields、valueField、textField、rows,只在btnType为'ztree'时有效.
         * @cfg {Object} [extButtonCfg.setting] 弹窗ztree初始化参数，详细可参考ztree配置详解，只在btnType为'ztree'时有效.
         * @cfg {Boolean} [extButtonCfg.multipart] btnType为'submit'时，提交的表单包含文件类型，那么设置为true,此时paramPrefix将会无效。
         *
         */
        // @cfg {String} [extButtonCfg.needAuthorized=false] 是否需要授权.
        extButtonCfg : {
            dlgtitle : '',
            dlgw : 550,
            dlgh : 350,
            url : '',
            dataUrl : '',
            mustSelected : true,
            singleSelect : true,
            needAuthorized : false,
            isEdit : false,
            autoRefresh : false,
            actionType : 'html',
            openWith : 'inline', //'inline'、'iframe'
            btnType : 'toolbar',
            refDgId : '',
            refFormName : '',
            paramPrefix : ''
        },

        /**
         * @cfg {Object} extDatagridCfg 扩展表格属性配置项.
         * @cfg {String/Array} [extDatagridCfg.identifyField='id'] 标识字段，用于处理逻辑时参数的传递.
         * @cfg {String} [extDatagridCfg.queryFormName] 查询条件form表单的name属性值.
         * @cfg {String} [extDatagridCfg.queryParamPrefix='queryParam'] 表格查询参数的前缀.
         * @cfg {String} [extDatagridCfg.total='data.result.total'] 表格数据总数节点名称.
         * @cfg {String} [extDatagridCfg.rows='data.result.datals'] 表格数据数据集节点名称.
         * @cfg {Boolean} [extDatagridCfg.grid2excel=false] 显示导出当前表格到excel按钮.
         * @cfg {Boolean} [extDatagridCfg.exportAll2excel=false] 显示导出所有到excel按钮.
         * @cfg {String} [extDatagridCfg.exportUrl] 导出操作远程请求的地址.
         *
         */
        extDatagridCfg : {
            identifyField : 'id',
            queryFormName : '',
            queryParamPrefix : "queryParam",
            grid2excel : false,
            exportAll2excel : false,
            total : 'data.result.total',
            rows : 'data.result.datals'
        },

        /**
         * @cfg {Object} extCombobox 扩展下拉组件属性配置项.
         * @cfg {String} [extCombobox.dataNode] 数据节点的路径.
         * @cfg {Boolean} [extCombobox.showAllOption=false] 是否显示‘默认’选项.
         * @cfg {String} [extCombobox.refCombo] 联动下拉关联组件的id.
         * @cfg {String} [extCombobox.refUrl] 联动下拉组件获取数据的请求地址，如果不配置将会获取组件自身的{@link erajs.ui.Combobox#url url}属性.
         * @cfg {String} [extCombobox.reqParam] 联动时，请求传递的参数名，如果未配置将会取当前组件的valueField值.
         * @cfg {String} [extCombobox.defaultText] 当`showAllOption`为true时，默认项显示的文本值.
         * @cfg {String} [extCombobox.defaultValue] 当`showAllOption`为true时，默认项的值.
         */
        extCombobox : {
            dataNode : '',
            showAllOption : false,
            refCombo : '',
            refUrl : '',
            reqParam : '',
            defaultText : '全部',
            defaultValue : ''
        },

        /**
         * 按钮与表格的对应关系.
         * @property {erajs.util.HashMap}
         */
        btnGridRef : new erajs.util.HashMap(),

        /**
         * 解析自定义扩展属性.
         * @param {String} xtype 组件类型
         * @param {Object} options 组件custom-options配置项.
         * @param {Array} target htmlElement元素
         */
        parserCustomOptions : function(xtype,options,target){
            var me = this;
            var rOptions = {};

            options = erajs.encodeToJsonStr(options);
            options = erajs.decode(options);

            switch(xtype){
                case 'button':
                    rOptions = this.parserButton(options,target);
                    break;
                case 'panel':
                    rOptions = this.parserPanel(options,target);
                    break;
                case 'datagrid':
                    rOptions = this.parserDatagrid(options,target);
                    break;
                case 'combobox' :
                    rOptions = this.parserCombobox(options,target);
                    break;
                default:
                    me.showInfo(erajs.String.format(erajs.getMessage('framework.UNKNOW_PARSER'),xtype));
            }
            return rOptions;
        },

        /**
         * 解析按钮扩展属性配置项.
         * @private
         * @param {Object} options 按钮自定义扩展配置项{@link #extButtonCfg}.
         * @param {HtmlElement} target 按钮HtmlElement对象.
         *
         * @returns {Object}
         */
        parserButton : function(options,target){
            var cOptions = {},me = this;
            options = $.extend({},me.extButtonCfg, options);
            cOptions = {
                onClick : function(){
                    //检测是否有权限?
                    var authorized = options.needAuthorized;
                    if(authorized){
                        if(!me.returnAuth(target)) return;
                    }
                    switch(options.btnType){
                        case 'toolbar':
                            me.parserToolbar(options,target);
                            break;
                        case 'submit':
                            me.parserSubmitBtn(options,target);
                            break;
                        case 'cancel':
                            me.parserCancelBtn(options,target);
                            break;
                        case 'reset':
                            me.parserResetBtn(options,target);
                            break;
                        case 'base':
                            break;
                        case 'event':
                            me.parserEventBtn(options,target);
                            break;
                        case 'query':
                            me.parserQueryBtn(options,target);
                            break;
                        case 'ztree':
                            me.parserZtreeBtn(options,target);
                            break;
                        default :
                            me.showInfo(erajs.String.format(
                                erajs.getMessage('framework.UNREALIZE_BTN_PARSER'),
                                    options.btnType)
                            );
                    }
                }
            };
            return cOptions;
        },

        /**
         * 解析submit类型按钮逻辑.
         * @private
         * @param {Object} options 按钮自定义扩展配置项{@link #extButtonCfg}.
         * @param {HtmlElement} target 按钮HtmlElement对象.
         */
        parserSubmitBtn : function(options,target){
            var me = this,formDom = me.getFormElement(options,target);
            if(!formDom.length){
                me.showInfo(erajs.String.format(erajs.getMessage('framework.UNFIND_MATCH_FORM'),$(target).text()));
                return;
            }
            if(!me.needValidated || erajs.validateForm(formDom)){
                var url = options.url || formDom.attr('action');
                submitPrefix = options.paramPrefix,
                    multipart = options.multipart;


                //复合表单提交,包含file等.
                if(multipart === true){
                    me.executeAjaxSubmit(formDom,function(result, textStatus, jqXHR){
                        doOther(result, textStatus, jqXHR);
                    });
                    return ;
                }

                //简单表单提交.
                var submitParams = erajs.Object.fromQueryString(me.trimSerialize(formDom.serialize()));
                if(submitPrefix){
                    submitParams = me.addPrefixForParam(submitParams,submitPrefix);
                }

                me.executeRequest(
                    url,
                    submitParams,
                    function(result, textStatus, jqXHR){
                        doOther(result, textStatus, jqXHR);
                    }
                );
            }

            function doOther(result, textStatus, jqXHR){
                if(result.success){
                    me.closeSelfWindow(target);
                    var dgId = options.refDgId;
                    //todo 表单提交成功，表格更新数据
                    if(dgId){
                        var formName = me.getDgRefFormName(dgId);
                        var queryPrams = {};
                        if(formName)
                            queryPrams = me.getQueryFormParams(formName);
                        me.crudSearch(dgId,queryPrams);
                    }
                }
            }
        },

        /**
         *
         * @param {HtmlElement} form 表单dom对象
         * @param {Function} successCallback 成功的回调函数.
         * @param {Function} errorCallback 错误的回调函数.
         */
        executeAjaxSubmit : function(form,successCallback,errorCallback){
            var me = this;
            form.ajaxSubmit({
                dataType : "json",
                type : "post",
                success : function(response,textStatus, jqXHR){
                    if(!erajs.isObject(response)){
                        response = erajs.decode(response);
                    }

                    if(successCallback) {
                        var flag = successCallback(response);
                        if(flag === false){
                            return;
                        }
                    }
                    me.showDefaultSuccess(response,textStatus, jqXHR);
                },
                error : function(XMLHttpRequest, textStatus, errorThrown){

                    if(errorCallback)
                        errorCallback(XMLHttpRequest);

                    me.showDefaultError(XMLHttpRequest, textStatus, errorThrown);
                }
            });
        },

        showDefaultSuccess : function(response,textStatus, jqXHR){
            var me = this,
                message = response.message ? me.parseResultMessage(response.message) : '';

            if(response.success){
                message = message || erajs.getMessage('framework.EXECUTE_SUCCESS');
                erajs.Extra.showInfo(message);
            }else{
                message = message || erajs.getMessage('framework.EXECUTE_FAILRE');
                erajs.Extra.showWarnInfo(message);
            }
        },

        showDefaultError : function(XMLHttpRequest, textStatus, errorThrown){
            var status = XMLHttpRequest.status;
            if(status == '404'){
                me.showErrorInfo(erajs.String.format(erajs.getMessage('framework.UNFIND_REQUEST_URL'),status));
            }
        },

        parserEventBtn : erajs.emptyFn,

        /**
         * 解析cancel类型按钮逻辑.
         * @private
         * @param {Object} options 按钮自定义扩展配置项{@link #extButtonCfg}.
         * @param {HtmlElement} target 按钮HtmlElement对象.
         */
        parserCancelBtn : function(options,target){
            var me = this;
            me.closeSelfWindow(target);
        },

        /**
         * 获取combobox组件数据并初始化数据.
         * @param {String} url 请求获取数据地址.
         * @param {Object} params 请求参数.
         * @param {String/HtmlElement} expression 选择器表达式或者HtmlElement对象.
         * @param {String} dataNodePath 数据节点的路径.默认'data'.
         */
        getComboInitData : function(url,params,expression,dataNode){
            var me = this;
            me.executeRequest(url,params,function(response){
                var success =  response.success;
                if(success){
                    var data = null;
                    if(dataNode){
                        data = erajs.Extra.getField(response,dataNode);
                    }else{
                        data = response.data;
                    }
                    //数据合并
                    if(data){
                        erajs.merge(me.comboDataNodes,data);
                    }

                    if(expression){
                        me.initComboboxData(expression);
                    }
                    return false;
                }
            });
        },

        comboDataNodes : {},

        /**
         * 初始化下拉组件数据.
         * @param {String/HtmlElement} expression 选择器表达式或者HtmlElement对象.
         */
        initComboboxData : function(expression){
            var me = this,
                formEls = null;

            if(erajs.isString(expression)){
                formEls = $(expression);
            }else{
                formEls = form;
            }
            if(formEls.length){
                var comboDoms = $(formEls).find('[xtype="combobox"][custom-options]');
                erajs.each(comboDoms,function(dom){
                    var id = dom.id;
                    var combo = erajs.getCmp(id);
                    if(combo){
                        var data = combo.data,
                            dLeng = data.length,
                            valueField = combo.options.valueField;

                        //combobox是否有数据?
                        if(!dLeng || (dLeng == 1 && data[0][valueField] === "")){
                            me.setComboData(combo,me.comboDataNodes);
                        }
                    }
                });
            }
        },

        /**
         * 加载Combobox组件数据，主要针对dataNode扩展参数解析.
         * @param {erajs.ui.Combobox} combo 组件本身
         * @param {Object} dataNodes 源数据
         *
         * @since erajs 1.2
         */
        setComboData : function(combo,dataNodes){
            var me = this,
                customOpts = combo.target.getAttribute('custom-options');

            if(!erajs.isEmpty(customOpts)){
                customOpts = erajs.ui.parser.getOptionsObject(customOpts);
                if(customOpts.hasOwnProperty('dataNode')){
                    var dataNode = customOpts.dataNode,
                        data = erajs.Extra.getField(dataNodes,dataNode),
                        temp = [];

                    //避免修改原始数据.
                    if(data){
                        temp = erajs.Array.clone(data);
                    }

                    combo.loadData(temp);
                }
            }
        },

        /**
         * @private
         * 在数组中插入默认项。
         * @param {String} textField 字段名
         * @param {String} valueField 字段名
         * @param {Array} data
         *
         * @since erajs 1.2
         */
        insertDefaultAllOption : function(textField,valueField,data,defaultOpt){
            var row = {};
            row[textField] = defaultOpt.defaultText;
            row[valueField] = defaultOpt.defaultValue;
            erajs.Array.insert(data,0,new Array(row));
        },

        /**
         * 获取按钮所属表单Element对象.
         * @private
         * @param {Object} options 按钮自定义扩展配置项{@link #extButtonCfg}.
         * @param {HtmlElement} target 按钮HtmlElement对象.
         */
        getFormElement : function(options,target){
            var formDom = null;
            if(options.refFormName){
                formDom = $("form[name='" + options.refFormName + "']");
            }else{
                formDom = $(target).closest('form');
                if(!formDom.length){
                    //form在布局内部.
                    formDom = $(target).parents('div.layout-panel').siblings().find('form');
                }
            }
            return formDom;
        },

        /**
         * 解析reset类型按钮逻辑.
         * @private
         * @param {Object} options 按钮自定义扩展配置项{@link #extButtonCfg}.
         * @param {HtmlElement} target 按钮HtmlElement对象.
         */
        parserResetBtn : function(options,target){
            var me = this;
            var formDom = me.getFormElement(options,target);
            if(formDom.length)
                formDom.resetForm();
        },

        /**
         * 关闭表单窗口.
         * @param {HtmlElement/String} target 按钮HtmlElement对象或者窗口ID.
         */
        closeSelfWindow : function(target){
            var winId = null;
            if(erajs.isString(target)){
                winId = target;
            }else{
                var winDom = $(target).closest("div[class~='window-body']");
                if(winDom){
                    winId = winDom.attr('id');
                }
            }
            if(winId){
                var window = erajs.getCmp(winId);
                window.destroy();
            }
        },

        /**
         * 解析query类型按钮逻辑.
         * @private
         * @param {Object} options 按钮自定义扩展配置项{@link #extButtonCfg}.
         * @param {HtmlElement} target 按钮HtmlElement对象.
         */
        parserQueryBtn : function(options,target){
            var me = this;
            var refDgId = options.refDgId;
            //检测是否设置关联表格的ID
            if(!refDgId){
                me.showWarnInfo(erajs.String.format(erajs.getMessage('framework.UNDEFINE_REFDGID'),$(target).text()));
                return;
            }

            var queryPrams = me.getQueryFormParams(target);
            me.crudSearch(refDgId,queryPrams);
        },

        /**
         * 解析ztree类型按钮逻辑.
         * @private
         * @param {Object} options 按钮自定义扩展配置项{@link #extButtonCfg}.
         * @param {HtmlElement} target 按钮HtmlElement对象.
         */
        parserZtreeBtn : function(options,target){
            var me = this,
                window = {
                    height : options.dlgh,
                    width : options.dlgw,
                    title : options.dlgtitle
                },
                setting = options.setting,
                extraOptions = options.extraOptions,
                showButtons = options.showButtons,
                afterInitZtree = options.afterInitZtree;

            if(showButtons !== undefined){
                window.showButtons = showButtons;
            }

            var opts = {
                setting : setting,
                extraOptions : extraOptions,
                window : window
            }

            erajs.showZtreeWindow(opts,afterInitZtree);
        },

        /**
         * @private
         * 获取表格分页参数.
         * @param {erajs.ui.Pagination} paging
         * @returns {Object} 分页参数对象.
         */
        getPagingPrams : function(paging){
            var me = this,
                poptions = paging.options,
                params = {};

            params[me.pageNumber] = poptions.pageNumber;
            params[me.pageSize] = poptions.pageSize;

            return params;
        },

        /**
         * 查询表单.
         * @param {String} refDgId 表格ID.
         * @param {Object} queryPrams 查询参数.
         * @param {Number} pageNumber 页码.
         * @param {Number} pageSize 页大小.
         */
        crudSearch : function(refDgId,queryPrams,pageNumber, pageSize) {
            var me = this;
            var prams = queryPrams || {};
            //判断是否需要做校验.
            if (me.needValidated) {
                //验证查询表单.
                var formName = me.getDgRefFormName(refDgId);
                if (!erajs.isEmpty(formName) && !erajs.validateForm(formName)) {
                    return;
                }
            }

            var qmPrefix = me.getQmPrefix(refDgId);
            var datagrid = erajs.getCmp(refDgId);

            datagrid.loading();
            datagrid.unselectAll();

            var pager = datagrid.getPager();
            if (pager) {
                var poptions = pager.options;
                if (pageNumber == null) {
                    pager.pagination({
                        pageNumber: 1
                    });
                    pageNumber = 1;
                }
                if (pageSize == null) {
                    pageSize = poptions.pageSize;
                }
                prams[me.pageNumber] = pageNumber;
                prams[me.pageSize] = pageSize;
            }

            if(qmPrefix){
                prams = me.addPrefixForParam(prams,qmPrefix);
            }

            var reqUrl = datagrid.options.url;
            me.executeRequest(reqUrl,prams,function(response){
                var success =  response.success;
                if(success){
                    var total = me.getField(response,me.getBtnGridRefProp(refDgId,'total'));
                    datagrid.loadData(response);
                    erajs.Messager.show({
                        title:erajs.getMessage('framework.ALERT_TITLE_SHOW'),
                        msg: erajs.String.format(erajs.getMessage('framework.RESULT_QUERY_SUCCESS'),'<span style="color:red;">' + total + '</span>'),
                        timeout:5000,
                        showType:'slide'
                    });
                    datagrid.loaded();
                    return false;
                }
                datagrid.loaded();

            },function(status){
                datagrid.loaded();
            });
        },

        /**
         * 获取对象指定层级的对象.
         * @param {Object} object 源对象.
         * @param {String} path 对象字符串路径.
         * @returns {Object} 结果对象
         */
        getField : function(object, path) {
            if (!object||!path){
                return object;
            }
            path = path.replace(/\[/g,".").replace(/\]/g,"");
            var fields = path.split(".");
            for (var i = 0; i < fields.length; i++) {
                var field = fields[i];
                if (typeof(object[field]) != "undefined") {
                    object = object[field];
                } else {
                    return ;
                }
            }
            return object;
        },

        /**
         * 获取表格对应表单查询条件的前缀.
         * @private
         * @param {String} dgId 表格id。
         * @returns {String} 查询条件前缀,在{@link #extDatagridCfg}配置.
         */
        getQmPrefix : function(dgId){
            var me = this;
            var dgCfg = me.btnGridRef.get(dgId);
            return dgCfg.queryParamPrefix || '';
        },

        /**
         * 获取表格关联查询条件form表单的名称.{@link #extDatagridCfg}
         * @private
         * @param {String} dgId 表格id.
         */
        getDgRefFormName : function(dgId){
            var me = this;
            var dgCfg = me.btnGridRef.get(dgId);
            return dgCfg.queryFormName || '';
        },

        /**
         * 获取表单查询条件的值.
         * @param {HtmlElement/String} target form表单的name属性值或者按钮HtmlElement对象.
         * @returns {Object}
         */
        getQueryFormParams : function(target,qmPrefix){
            var me = this,queryParams = {};
            if(!target){return;}

            var formEls = null;
            if(erajs.isString(target)){
                formEls = $("form[name='" + target + "']");
            }else{
                formEls = $(target).closest('form');
            }
            //检测按钮是否定义在form标签内部
            if(!formEls){
                me.showWarnInfo(erajs.String.format(erajs.getMessage('framework.UNFIND_MATCH_FORM'),$(target).text()));
                return;
            }

            queryParams = erajs.Object.fromQueryString(me.trimSerialize(formEls.serialize()));
            if(qmPrefix){
                queryParams = me.addPrefixForParam(queryParams,qmPrefix);
            }
            return queryParams;
        },

        /**
         * @private
         * @param {String} serialize 序列号的字符串
         * @returns {string} 格式化后的字符串
         */
        trimSerialize : function(serialize){
            return decodeURIComponent(serialize.replace(/\+/g," "))
        },

        /**
         *
         * 参数添加前缀.
         * @param {Object} params 参数.
         * @param {String} prefix 参数前缀{@link #queryParamPrefix}
         * @returns {Object}
         */
        addPrefixForParam : function(params,prefix){
            if(!erajs.isEmpty(prefix)){
                if(erajs.isArray(params)){
                    var temp = params;
                    delete params;
                    params = {};
                    params[prefix] = temp;
                }else{
                    erajs.Object.each(params,function(key,value){
                        //如果参数包含‘.’，那么不做处理
                        if(key.indexOf('.') === -1){
                            params[prefix + '.' + key] = value;
                            delete params[key];
                        }
                    });
                }
            }
            return params;
        },

        /**
         * 解析toolbar类型按钮逻辑.
         * @private
         * @param {Object} options
         * @param {HtmlElement} target
         */
        parserToolbar : function(options,target){
            var me = this;
            var btnId = me.getBtnId(target);
            //检测是否必须选中行，按钮才可用?
            var isChecked = me.checkIsSelected(options,target,btnId);
            if(!isChecked) return;

            var type = options.actionType;
            //如果逻辑处理，那么打开url指定新的窗口.
            if(!me.actionRegExp.exec(type)){
                me.createWindow(options,target);
            }else{
                me.executeDo(options,target);
            }
        },

        executeExtraEvent : function(fnc,params){
            var me = this,
                flag;

            if(fnc){
               flag = fnc(params);
            }
            return flag;
        },

        /**
         *
         * @param {Object} options 窗口参数配置项，除了{@link erajs.ui.Window#defaults}外，还包括以下扩展属性：
         * @param {Function} [options.beforeRender] 打开窗口之前执行的方法，若返回`false`，将不会打开窗口.
         * @param {String} [options.langid] 本地化标识ID.
         * @param {String} [options.winId]  窗口ID，若未定义，则产生随机ID.
         * @param {String} [options.dataUrl] 获取初始化数据的地址.
         * @param {Object} [options.formDatas] 加载表单的初始化数据.
         * @param {Object} [options.editEvents] 编辑加载数据事件,详细查看{@link erajs.Extra#loadForm}方法`events`参数.
         * @param {String} [options.dataNode] 远程获取初始化数据时，指定返回数据的节点.
         *
         */
        openNewWindow : function(options){
            var self = this,
                opts = erajs.clone(options),
                beforeRender = opts.beforeRender;

            if(beforeRender){
                //打开之前，校验是否可以打开
                var flag = self.executeExtraEvent(beforeRender,{});
                if(flag === false){return;}
            }

            //判断是否需要本地化
            if(erajs.localize){
                if(opts.hasOwnProperty("langid")){
                    self.localizeProp(opts,"title",opts.langid);
                }
            }

            //创建窗口dom
            if(!opts.hasOwnProperty("contentEl")){
                //生成随机id
                var radomWid = opts.winId || erajs.id(null,erajs.windowId);
                //添加window div元素
                $('body').append('<div id="' + radomWid + '"></div>');
                erajs.merge(opts,{
                    contentEl : "#" + radomWid
                });
            }

            self.deleteExtraProps(opts,["beforeRender","langid","winId"]);

            if(opts.hasOwnProperty("dataUrl") || opts.hasOwnProperty("formDatas")){
                 erajs.merge(opts,{
                     onLoad : function(){
                         var formDom = self.getPageForm(this.target);
                         var formDatas = opts.dataUrl || opts.formDatas;
                         erajs.Extra.loadForm(formDom,formDatas,{},opts.editEvents,opts.dataNode);
                         //判断验证
                         if(self.needValidated && opts.validate){
                             if(formDom.length){
                                 erajs.prepareValidateRules(formDom);
                             }
                         }
                    }
                 });
            }

            erajs.create('window',opts);
        },

        deleteExtraProps : function(options,extraProps){
            if(erajs.isArray(extraProps)){
                erajs.Array.each(extraProps,function(key,value){
                    if(options.hasOwnProperty(key)){
                        delete options[key];
                    }
                });
            }
        },

        localizeProp : function(options,prop,langid){
            var self = this;
            if(!langid){return options;}

            var propValue = erajs.getMessage(langid,false);
            if(propValue){
                var obj = {};
                obj[prop] = propValue;
                return erajs.merge(options,obj);
            }else{
                return options;
            }
        },

        /**
         * 创建新的窗口，用来加载url指定的页面.
         * @param {Object} cfg 扩展属性配置项.
         * @param {HtmlElement} target 按钮HtmlElement对象.
         */
        createWindow : function(cfg,target){
            var me = this,
                queryParams = me.makeToolbarParams(cfg,target),
                beforeRender = cfg.beforeRender;

            var flag = me.executeExtraEvent(beforeRender,queryParams);
            if(flag === false){
                return;
            }

            //生成随机id
            var radomWid = erajs.id(null,erajs.windowId);
            //添加window div元素
            $('body').append('<div id="' + radomWid + '"></div>');

            var title = cfg.dlgtitle;
            if(erajs.localize){
                var langid = cfg.langid;
                if(langid){
                    var val = erajs.getMessage(langid,false);
                    if(val){
                        title = val;
                    }
                }
            }

            var opts = {
                contentEl : '#' + radomWid,
                height : cfg.dlgh,
                width : cfg.dlgw,
                //todo 中文时就不要去get消息
                title : title,
                queryParams : queryParams,
                onLoad : function(){
                    //打开窗口判断是否含有form表单,如有，择判断是否需要表单验证.
                    var formDom = me.getPageForm(this.target);

                    var callback = cfg.callback;
                    if(callback){
                        var flag = callback(formDom,queryParams);
                        if(flag === false) return;
                    }

                    //修改操作
                    if(cfg.isEdit){
                        //如果是修改时，那么自动加载数据.
                        var dataUrl = cfg.dataUrl,data = null;
                        if(!erajs.isEmpty(dataUrl)){
                            data = dataUrl;
                        }else{
                            var dgId = me.getDgId(target);
                            if(dgId){
                                var datagrid = erajs.getCmp(dgId);
                                if(datagrid){
                                    data = datagrid.getSelected( );
                                    var prefix = cfg.paramPrefix;
                                    if(prefix){
                                        data = me.addPrefixForParam(data,prefix);
                                    }
                                }
                            }
                        }
                        erajs.Extra.loadForm(formDom,data,queryParams,cfg.editEvents,cfg.dataNode);
                    }

                    if(me.needValidated){
                        if(formDom.length){
                            erajs.prepareValidateRules(formDom);
                        }
                    }
                }
            };
            //判断窗口是iframe方式打开还是内嵌式?
            if(cfg.openWith == 'inline'){
                opts.href = cfg.url;
            }else{
                var iframeContent = '<iframe id="iframe-'+radomWid + '" frameborder="0" src="' + cfg.url + '"' +
                    ' allowTransparency="true" frameborder="0" height="99%" width="100%" scrolling="0"></iframe>';
                opts.content = iframeContent;
            }
            var optWindow = erajs.create('window',opts);
        },

        /**
         * 获取页面中form HtmlElement对象.
         * @param {Html} target html元素.
         * @returns {HtmlElement}
         */
        getPageForm : function(target){
            var formDom = null;
            if(target){
                formDom = $(target).find('form[id],form[name]');
            }else{
                formDom = $('body').find('form[id],form[name]');
            }
            return formDom;
        },

        /**
         * 执行逻辑处理操作
         * @private
         * @param {String} url 操作请求的地址.
         * @param {HtmlElement} target 按钮element元素.
         */
        executeDo : function(options,target){
            var me = this;
            erajs.Messager.confirm(
                erajs.getMessage('framework.ALERT_TITLE_SHOW'),
                erajs.getMessage('framework.CONFIRM_INFO'), function(r){
                if (r){
                    //组装请求参数
                    var extraParams = me.makeToolbarParams(options,target);

                    var beforeExecute = options.beforeExecute;
                    var flag = me.executeExtraEvent(beforeExecute,extraParams);
                    if(flag === false){
                        return;
                    }

                    //todo 处理完成是否需要刷新表格数据?
                    var callback = options.callback || function(response){
                            me.executoCallback(response,options.autoRefresh,target);
                    };

                    me.executeRequest(options.url,extraParams,callback);
                }
            });
        },

        executoCallback : function(result,autoRefresh,target){
            var me = this;
            if(result.success ){
                if(autoRefresh){
                    var dgId = me.getDgId(target);
                    if(dgId){
                        var formName = me.getDgRefFormName(dgId);
                        var queryPrams = {};
                        if(formName){
                            queryPrams = me.getQueryFormParams(formName);
                        }
                        me.crudSearch(dgId,queryPrams);
                    }
                }
            }
        },

        /**
         * 组装toolbar请求参数.
         * @private
         * @param {HtmlElemnt} target 按钮HtmlElemnt对象.
         * @param {Object} options 按钮的扩展属性配置项.{@link #extButtonCfg}
         */
        makeToolbarParams : function(options,target){
            var me = this;
            var mustSelected = options.mustSelected;
            //extraParams为按钮扩展属性之一
            var extraParams = options.extraParams || {};
            if(mustSelected){
                var dgId = me.getDgId(target);
                if(dgId){
                    var dgCfg = me.btnGridRef.get(dgId);
                    if(dgCfg != undefined ){
                        var field = dgCfg.identifyField;
                        var datagrid = erajs.getCmp(dgId);
                        var selections = datagrid.getSelections( );

                        var extraSselect = options.singleSelect;
                        var params = me.getFieldValues(selections,field);

                        if(!erajs.Object.isEmpty(extraParams)){
                            erajs.Array.forEach(params,function(param,index){
                                erajs.merge(param,extraParams);
                            });
                        }

                        if(extraSselect){
                            params = params[0];
                        }

                        var singleSel = options.singleSelect;
                        //判断是否需要加请求参数前缀
                        var prefix = options.paramPrefix;

                        if(prefix){
                            params = me.addPrefixForParam(params,prefix);
                        }else{
                            if(!singleSel){
                                var tempParams = {};
                                erajs.each(params,function(param,index){
                                    erajs.Object.each(param,function(key,value){
                                        if(!tempParams.hasOwnProperty(key)){
                                            var arr = new Array();
                                            arr.push(value);
                                            tempParams[key] = arr;
                                            delete arr;
                                        }else{
                                            tempParams[key].push(value);
                                        }
                                    });
                                });
                                params = tempParams;
                            }
                        }
                        return params;
                    }
                }
            }

            return extraParams;
        },

        /**
         * 包装请求参数,格式{reqJson : {'id':'12','name':'metro'}}
         * @param {Object} extraParams
         */
        warpReqParams : function(extraParams){
            var me = this;
            if(me.warpReqJson){
                var seriObj = erajs.encode(extraParams);
                extraParams = {
                    'reqJson' : seriObj
                };
            }
            return extraParams;
        },

        /**
         * @private
         * 获取指定字段值.
         * @param {Array} selections
         * @param {String/Array} fields
         */
        getFieldValues : function(selections,fields){
            var me = this,
                keys = erajs.isArray(fields) ? fields : new Array(fields),
                showWarn = false,rows = [];

            erajs.each(selections,function(item,index){
                var row = {};
                erajs.Array.each(keys,function(key,index){
                    if(item.hasOwnProperty(key)){
                        row[key] = item[key];
                    }else{
                        showWarn = true;
                    }
                });
                rows.push(row);
            });

            if(showWarn){
                me.showWarnInfo(erajs.String.format(erajs.getMessage('framework.UNFIND_DATA_FIELD'),keys));
            }
            return rows;
        },

        /**
         * 执行远程请求操作.
         * @param {String} url 请求地址.
         * @param {Object} params 请求参数.
         * @param {Function} successCallback 成功后执行的方法.
         * @param {Function} errorCallback 失败后执行的方法.
         * @param {String} [dataType='json'] 预期服务器返回的数据类型,如果不指定，jQuery 将自动根据 HTTP 包 MIME 信息来智能判断，
         * 比如 XML MIME 类型就被识别为 XML。在 1.4 中，JSON 就会生成一个 JavaScript 对象，
         * 而 script 则会执行这个脚本。随后服务器端返回的数据会根据这个值解析后，传递给回调函数。
         * 可用值:
         *
         * - xml : 返回 XML 文档，可用 jQuery 处理.
         * - html : 返回纯文本 HTML 信息；包含的 script 标签会在插入 dom 时执行.
         * - script : 返回纯文本 JavaScript 代码。不会自动缓存结果。除非设置了 "cache" 参数.注意：在远程请求时(不在同一个域下)，所有 POST 请求都将转为 GET 请求。（因为将使用 DOM 的 script标签来加载）
         * - json : 返回 JSON 数据.
         * - jsonp : JSONP 格式,使用 JSONP 形式调用函数时，如 "myurl?callback=?" jQuery 将自动替换 ? 为正确的函数名，以执行回调函数.
         * - text : 返回纯文本字符串.
         *
         * @param {Boolean} warpParams 是否需要包装请求参数,可用来覆盖全局的{@link warpReqJson}.
         *
         */
        executeRequest : function(url,params,successCallback,errorCallback,dataType,warpParams){
            var me = this,
                warpParams = (warpParams === undefined ? true : warpParams);
                dataType = dataType || 'json';

            $.ajax({
                url : url,
                type : 'post',
                timeout : 120000,
                traditional : true,
                dataType : dataType,
                data : warpParams ? me.warpReqParams(params) : params,
                success : function(response,textStatus, jqXHR) {
                    if(!erajs.isObject(response)){
                        response = erajs.decode(response);
                    }

                    //判断是否需要打开新窗口加载
                    var data = response.data;
                    if(data && data.hasOwnProperty("url")){
                        var fg = me.afterExecuteToOpenWindow(data);
                        if(fg === false){return;}
                    }
                    
                    if(successCallback) {
                        var flag = successCallback(response);
                        if(flag === false){
                            return;
                        }
                    }


                    //显示默认成功信息
                    me.showDefaultSuccess(response,textStatus, jqXHR);
                },
                error : function(XMLHttpRequest, textStatus, errorThrown){
                    if(errorCallback)
                        errorCallback(status);

                    me.showDefaultError(XMLHttpRequest, textStatus, errorThrown);
                }
            });
        },

        afterExecuteToOpenWindow : function(data){
            var self = this,
                windowParam = data.windowParam || {},
                result = data.result,
                href = data.url,
                windowId = "";
                	
            //判断是否新窗口.
            var isNew = erajs.String.startsWith(href,"!");
            if(isNew){
                href = href.substr(1);
            }

            var formDatas = erajs.Extra.getField(data,"result.datals");

            //判断是否创建新窗口.
            var lastWindow = erajs.lastWindow;

            if(!isNew && lastWindow ){
                windowId = lastWindow.id;
                if(windowId && erajs.isInstantiate(windowId)){
                    erajs.getCmp(windowId).destroy();
                }
            }

            erajs.Extra.openNewWindow(
                erajs.merge(
                    windowParam,{
                        winId : (!isNew ? windowId : erajs.id(null,erajs.windowId)),
                        href : href,
                        formDatas : formDatas
                    }
                )
            );
            return false;
        },

        /**
         * 解析执行结果消息.
         * @param {String} message 待解析的message
         * @returns {String}
         */
        parseResultMessage : function(message){
            if(!message){return "";}
            var me = this,
                tempArr = message.split('|@|'),
                code = message,
                needFormat = false;

            if(tempArr.length > 1){
                needFormat = true;
                code = tempArr[0];
            }
            message = erajs.getMessage(code);
            if(needFormat && message !== code){
                message = me.format(message,erajs.Array.slice(tempArr,1));
            }

            return message;
        },

        format: function(format,values) {
            var args = values,
                formatRe = /\{(\d+)\}/g;

            return format.replace(formatRe, function(m, i) {
                return args[i];
            });
        },

        /**
         * 解析表格扩展属性配置项.
         * @private
         * @param {Object} options
         * @param {HtmlElement} target
         * @returns {Object}
         */
        parserDatagrid : function(options,target){
            var me = this,
                cOptions = {},
                pagingButtons = [];

            options = $.extend({},me.extDatagridCfg, options);

            var qmPrefix = options.queryParamPrefix,
                dgId = target.id;

            me.btnGridRef.add(dgId,{
                identifyField : options.identifyField,
                queryParamPrefix : qmPrefix,
                queryFormName : options.queryFormName,
                toolbars : [],
                rows : options.rows,
                total : options.total
            });

            //是否显示导出当前表格按钮?
            if(options.grid2excel){
                pagingButtons.push({
                    iconCls:'icon-xls',
                    handler:function(){
                        me.exportExcel(dgId,options.exportUrl,true);
                    }
                });
            }

            //是否显示导出表格所有按钮?
            if(options.exportAll2excel){
                pagingButtons.push({
                    iconCls:'icon-down',
                    handler:function(){
                        me.exportExcel(dgId,options.exportUrl,false);
                    }
                });
            }

            cOptions = {
                onBeforeLoad : function(params){
                    var self = this;
                    var queryParams = me.getQueryFormParams(options.queryFormName,qmPrefix);
                    $.extend(params,queryParams);
                    if(params.hasOwnProperty('page')){
                        params[qmPrefix ? qmPrefix + '.' + me.pageNumber : me.pageNumber] = params['page'];
                        delete params.page;
                    }
                    if(params.hasOwnProperty('rows')){
                        params[qmPrefix ? qmPrefix + '.' + me.pageSize : me.pageSize] = params['rows'];
                        delete params.rows;
                    }
                    if(me.warpReqJson){
                        erajs.Object.merge(params,me.warpReqParams(params));
                        erajs.Object.each(params, function(key, value, myself) {
                            if (key !== 'reqJson') {
                                delete params[key];
                            }
                        });
                    }
                },
                pagingButtons : pagingButtons
            };

            return cOptions;
        },

        exportExcel : function(dgId,exportUrl,pageCtrl){
            var me = this,
                extOptions = me.btnGridRef.get(dgId),
                qFormName = extOptions.queryFormName,
                qpPrefix = extOptions.queryParamPrefix;

            me.exportGrid2excel(exportUrl,dgId,pageCtrl,qFormName,qpPrefix);
        },

        /**
         * 表格数据导出到Excel.
         * @param {String} url 远程请求地址
         * @param {String} dgId 表格ID
         * @param {String} pageCtrl 是否只导出当前页
         * @param {String} queryFormName 表格关联查询表单的`name`属性.
         * @param {String} prefix 参数请求的前缀.
         */
        exportGrid2excel : function(url,dgId,pageCtrl,queryFormName,prefix){
            var me = this,
                pagerParams = {},
                formParams = {},
                groupParams = {};

            //是否只导出当前页?
            if(pageCtrl){
                var dgrid = erajs.getCmp(dgId);
                if(dgrid){
                    var paging = dgrid.getPager();
                    if(paging){
                        pagerParams = me.getPagingPrams(paging);
                    }
                }
            }
            pagerParams['pageCtrl'] = pageCtrl;

            if(queryFormName){
                formParams = me.getQueryFormParams(queryFormName);
            }

            groupParams = erajs.Object.merge(formParams,pagerParams);

            if(prefix){
                groupParams = me.addPrefixForParam(groupParams,prefix);
            }

            var pmStr = erajs.Object.toQueryString(groupParams);

            url = erajs.String.urlAppend(url,pmStr);

            location.href = url;
        },

        /**
         * 解析下拉组件扩展属性配置项.
         * @private
         * @param {Object} options
         * @param {HtmlElement} target
         * @returns {Object}
         */
        parserCombobox : function(options,target){
            var cOptions = {},
                me = this,
                options = $.extend({},me.extCombobox, options),
                dataNode = options.dataNode,
                showAllOpt = options.showAllOption,
                refCombo = options.refCombo,
                defaultOptObj = {
                    defaultText : options.defaultText,
                    defaultValue : options.defaultValue
                };

            //解析dataNode扩展属性
            if(dataNode){
                erajs.merge(cOptions,{
                    data : me.parserDataNode(dataNode),
                    loadFilter : function(data){
                        return me.loadComboFilter(this,data,dataNode,showAllOpt,defaultOptObj);
                    }
                });
            }

            //解析refCombo扩展属性,联动下拉交互.
            if(refCombo){
                erajs.merge(cOptions,{

                    onChange : function(newValue, oldValue){
                        var self = this,
                            refCbObj = erajs.getCmp(refCombo);

                        if(refCbObj){
                            reLeadRefComboData(self,refCbObj,newValue);
                        }
                    }
                });
            }

            function reLeadRefComboData(self,refCbObj,value){
                var cbOpts = refCbObj.options,
                    valueField = options.reqParam || self.options.valueField,
                    disabled = cbOpts.disabled,
                    url = options.refUrl || cbOpts.url;

                //递归清空所有下级
                recursion(refCbObj);

                if(disabled){
                    refCbObj.enable();
                }

                var param = {};
                param[valueField] = value;

                erajs.Extra.executeRequest(url,param,function(datas){
                    refCbObj.loadData(datas);
                    return false;
                });
            }

            function recursion(combo){
                var ops = combo.options,
                    disabled = combo.disabled;

                combo.clear();
                combo.disable();
                combo.loadData([]);

                var customOpts = combo.target.getAttribute('custom-options');
                if(!erajs.isEmpty(customOpts)){
                    customOpts = erajs.ui.parser.getOptionsObject(customOpts);
                    if(customOpts.hasOwnProperty('refCombo')){
                        var cbo = erajs.getCmp(customOpts.refCombo);
                        if(cbo){
                            recursion(cbo);
                        }
                    }
                }
            }

            return cOptions;
        },


        /**
         * @private
         *
         * 下拉组件数据过滤，定义扩展属性dataNode时将会被调用.
         *
         * @param {erajs.ui.Combobox} combo 组件本身.
         * @param {Array/Object} data 数据源
         * @param {String} dataNode 数据节点路径.
         * @param {Boolean} showAllOpt 是否添加默认项.
         * @return {Array}
         *
         * @since erajs 1.2
         */
        loadComboFilter : function(combo,data,dataNode,showAllOpt,defaultOpt){
            var tempData = [],
                me = this;

            if(erajs.isArray(data)){
                tempData = data;
            };

            if(data && erajs.isEmpty(tempData)){
                var temp = erajs.Extra.getField(data,dataNode);
                if(!erajs.isEmpty(temp)){
                    tempData = temp;
                }
            }

            if(showAllOpt){
                var opts = combo.options;
                me.insertDefaultAllOption(opts.textField,opts.valueField,tempData,defaultOpt);
            }

            return tempData;
        },

        //渲染combobox时，解析dataNode扩展属性.
        parserDataNode : function(dataNode){
            var me = this,
                temp = [];

            var data = erajs.Extra.getField(me.comboDataNodes,dataNode);
            if(data){
                temp = erajs.Array.clone(data);
            }
            return temp;
        },

        /**
         * 解析ztree面板扩展属性配置项.
         * @private
         * @param {Object} options
         * @param {HtmlElement} target
         */
        parserPanel : function(options,target){
            var me = this;
            var treeid = options.treeid || erajs.id(null,'ztree');
            var ztreeUL = $(target).find('ul.ztree');
            if(!ztreeUL.length){
                $(target).append(me.ztreeConfigs.ztreePanelContent(treeid));
            }
            var afterInitZtree = options.afterInitZtree;
            erajs.framework.LogicWarpper.initZtree('#' +treeid,{
                setting : options.setting,
                extraOptions : options.extraOptions
            },afterInitZtree);
        },

        /**
         * 获取表格扩展指定属性的值.
         * @private
         * @param {String} id 表格的id.
         * @param {String} prop 属性名称.
         */
        getBtnGridRefProp : function(id,prop){
            var me = this;
            var dgCfg = me.btnGridRef.get(id);
            if(dgCfg){
                if(dgCfg.hasOwnProperty(prop)){
                    return dgCfg[prop];
                }
            }
            return null;
        },

        //按钮鉴权
        returnAuth : function(target){
            return true;
        },

        /**
         * @private
         * 检测按钮是否启用，如果mustSelected为true,表示关联的表格必须选中行才可用.
         * @param {Object} options 按钮扩展属性配置项.
         * @param {HtmlElement} target 按钮HtmlElement元素.
         * @returns {Boolean}
         */
        checkIsSelected : function(options,target,btnId){
            var me = this,mustSelected = options.mustSelected,
                singleSelect = options.singleSelect;

            if(!mustSelected) return true;

            var dgId = me.getDgId(target,btnId);
            if(dgId){
                var datagrid = erajs.getCmp(dgId);
                if(datagrid){
                    var selections = datagrid.getSelections( );
                    var length = selections.length;
                    if(length){
                        if(singleSelect && length >1){
                            me.showWarnInfo(erajs.getMessage('framework.ONLY_SELECT_ONE_ROW'));
                            return false;
                        }
                        return true;
                    }else{
                        me.showWarnInfo(erajs.getMessage('framework.UNSELECT_LESS_ONE_ROW'));
                    }
                }
            }
            return false;
        },

        /**
         * 获取按钮所属表格ID.
         * @private
         * @param {HtmlElement} target 按钮element元素(必须项).
         * @param {String} btnId 按钮ID值(可选).
         */
        getDgId : function(target,btnId){
            var me = this;
            if(!btnId) btnId = me.getBtnId(target);
            var dgKey = me.isExistRef(btnId);
            return dgKey || me.getBtnBelongDgId(target,btnId);
        },

        isExistRef : function(btnId){
            var me = this,dgId = null;
            me.btnGridRef.each(function(key,value,length){
                erajs.each(value,function(item){
                    var toolbars = item.toolbars;
                    if(erajs.Array.contains(toolbars,btnId)){
                        dgId = key;
                        return false;
                    }
                });
            });
            return dgId;
        },

        /**
         * @private
         * 获取按钮所属表格id.
         * @param {HtmlElement} target 按钮HtmlElement对象.
         */
        getBtnBelongDgId : function(target,btnId){
            var me = this;
            var dgWrap = $(target).closest('.datagrid-wrap');
            //寻找该按钮所属的表格
            if(dgWrap.length){
                var dgId = dgWrap.attr('id');
                if(dgId){
                    var obj = me.btnGridRef.get(dgId);
                    var toolbars = obj.toolbars;
                    if(!erajs.Array.contains(toolbars,btnId)){
                        toolbars.push(btnId);
                    }
                    return dgId;
                }else{
                    me.showWarnInfo(erajs.getMessage('framework.UNDEFINE_ID_PROPERTY'));
                }
            }else{
                var btext = $(target).text();
                me.showWarnInfo(erajs.String.format(erajs.getMessage('framework.UNFIND_BELONGS_DATAGRID'),btext));
            }
            return null;
        },

        /**
         * @private
         * 通过HtmlElement获取按钮id.
         * @param target 按钮HtmlElement对象.
         * @returns {String}
         */
        getBtnId : function(target){
            var me = this;
            var btnId = $(target).attr('id');
            if(btnId){
                return btnId;
            }else{
                me.showWarnInfo(erajs.String.format(
                    erajs.getMessage('framework.UNDEFINE_ID_PROPERTY'),
                    $(target).text()
                ));
                return null;
            }
        },

        /**
         * 显示alert窗口提示信息.具体可参考{@link erajs.ui.Messager.alert}
         * @param {String} title 窗口title.
         * @param {String} msg 提示信息.
         * @param {String} icon 显示图标.
         */
        showAlertInfo : function(title,msg,icon){
            erajs.Messager.alert(title,msg,icon);
        },

        /**
         * 显示warning类型信息窗口.
         * @param {String} msg 信息描述.
         */
        showWarnInfo : function(msg){
            var me = this;
            me.showAlertInfo(erajs.getMessage('framework.ALERT_TITLE_WARNING'),msg,'warning');
        },

        /**
         * 显示info类型信息窗口.
         * @param {String} msg 信息描述.
         */
        showInfo : function(msg){
            var me = this;
            me.showAlertInfo(erajs.getMessage('framework.ALERT_TITLE_SHOW'),msg,'info');
        },

        /**
         * 显示error类型信息窗口.
         * @param {String} msg 信息描述.
         */
        showErrorInfo : function(msg){
            var me = this;
            me.showAlertInfo(erajs.getMessage('framework.ALERT_TITLE_ERROR'),msg,'error');
        }
    };

    /**
     * @class erajs.Extra
     * @singleton
     */
    var Extra = erajs.Extra = {

        /**
         * 格式化字符串日期到指定格式.
         * @param {String/Date} value 格式化的日期. 如果日期是字符串, 那么先会通过erajs.Date#parse 方法转换成日期类型.
         * @param {String} [fromFormat] 日期格式化前format格式. Defaults to {@link erajs.Date#defaultFormat}.
         * @param {String} [toFormat] 日期格式化后的format格式. 默认{@link erajs.Date#defaultFormat}.
         * @return {String} 格式化后的日期字符串.
         */
        formatDate : function(v,fromFormat,toFormat){
            if (!v) {
                return "";
            }
            if (!erajs.isDate(v)) {
                v = erajs.Date.parse(v,fromFormat);
            }

            return erajs.Date.format(v,toFormat || erajs.Date.defaultFormat);
        },

        /**
         * 格式化毫秒日期
         * @param {Number} v 日期毫秒值.
         * @param {String} format 日期格式化后的format格式,默认{@link erajs.Date.patterns#ISO8601Long}
         * @returns {String} 格式化后的日期字符串.
         */
        formatMilliDate : function(v,format){
            if (!v) {
                return "";
            }
            if (!erajs.isDate(v)) {
                v = new Date(v);
            }
            return erajs.Date.dateFormat(v, format || erajs.Date.patterns.ISO8601Long);
        },

        /**
         * 渲染date日期.
         * @param {String} [value] 待格式化的date.
         * @param {String} fromFormat 格式化前date的格式.
         * @param {String} toFormat 格式化后的date的格式.
         * @returns {String} 指定日期格式字符串.
         */
        dateRenderer : function(v,fromFormat,toFormat){
            return Extra.formatDate(v, fromFormat || 'Ymd',toFormat || erajs.Date.patterns.ISO8601Short);
        },

        /**
         * 渲染time日期.
         * @param {String} [value] 待格式化的time.
         * @param {String} fromFormat 格式化前date的格式.
         * @param {String} toFormat 格式化后的date的格式.
         * @returns {String} 指定日期格式字符串.
         */
        timeRenderer : function(v,fromFormat,toFormat){
            return Extra.formatDate(v, fromFormat || 'His',toFormat || 'H:i:s');
        },

        /**
         * 渲染datetime日期.
         * @param {String} [value] 待格式化的datetime.
         * @param {String} fromFormat 格式化前date的格式.
         * @param {String} toFormat 格式化后的date的格式.
         * @returns {String} 指定日期格式字符串.
         */
        dateTimeRenderer : function(v,fromFormat,toFormat){
            return Extra.formatDate(v, fromFormat || 'YmdHis',toFormat || erajs.Date.patterns.ISO8601Long);
        },

        /**
         * @cfg {Object} baseUrlCfg 扩展按钮属性配置项.
         * @cfg {String} [baseUrlCfg.baseFile='bootstrap.js'] 用来计算基础路径的通用文件.
         * @cfg {Number} [baseUrlCfg.depth=2] 通用文件相对项目根路径的深度.
         */
        baseUrlCfg : {
            baseFile : 'bootstrap.js',
            depth : 2
        },

        /**
         * 计算项目的基础路径.
         * @private
         * @returns {String}
         */
        getBaseURL : function(){
            var me = this,
                urlCfg = me.baseUrlCfg,
                baseFile = urlCfg.baseFile,
                depth = urlCfg.depth;

            var __head = document.getElementsByTagName("head")[0];
            var __nodes = __head.childNodes;

            for ( var i = 0; i < __nodes.length; ++i) {
                var src = __nodes.item(i).src;
                if (src) {
                    var index = src.indexOf(baseFile);
                    if (index >= 0) {
                        var tarr = src.split('/');
                        baseDir = erajs.Array.slice(tarr,0,- (depth + 1)).join('/') + '/';
                    }
                }
            }
            return baseDir;
        }
    };

    erajs.apply(Extra,{
        /**
         * @method
         * @member erajs.Extra
         * @inheritdoc erajs.framework.LogicWarpper#closeSelfWindow
         */
        closeSelfWindow : alias(LogicWarpper,'closeSelfWindow'),
        /**
         * @method
         * @member erajs.Extra
         * @inheritdoc erajs.framework.LogicWarpper#crudSearch
         */
        crudSearch : alias(LogicWarpper,'crudSearch'),
        /**
         * @method
         * @member erajs.Extra
         * @inheritdoc erajs.framework.LogicWarpper#getQueryFormParams
         */
        getQueryFormParams : alias(LogicWarpper,'getQueryFormParams'),
        /**
         * @method
         * @member erajs.Extra
         * @inheritdoc erajs.framework.LogicWarpper#addPrefixForParam
         */
        addPrefixForParam : alias(LogicWarpper,'addPrefixForParam'),
        /**
         * @method
         * @member erajs.Extra
         * @inheritdoc erajs.framework.LogicWarpper#createWindow
         */
        createWindow : alias(LogicWarpper,'createWindow'),
        /**
         * @method
         * @member erajs.Extra
         * @inheritdoc erajs.framework.LogicWarpper#openNewWindow
         */
        openNewWindow : alias(LogicWarpper,'openNewWindow'),
        /**
         * @method
         * @member erajs.Extra
         * @inheritdoc erajs.framework.LogicWarpper#executeRequest
         */
        executeRequest : alias(LogicWarpper,'executeRequest'),
        /**
         * @method
         * @member erajs.Extra
         * @inheritdoc erajs.framework.LogicWarpper#returnAuth
         */
        returnAuth : alias(LogicWarpper,'returnAuth'),
        /**
         * @method
         * @member erajs.Extra
         * @inheritdoc erajs.framework.LogicWarpper#showAlertInfo
         */
        showAlertInfo : alias(LogicWarpper,'showAlertInfo'),
        /**
         * @method
         * @member erajs.Extra
         * @inheritdoc erajs.framework.LogicWarpper#showWarnInfo
         */
        showWarnInfo : alias(LogicWarpper,'showWarnInfo'),
        /**
         * @method
         * @member erajs.Extra
         * @inheritdoc erajs.framework.LogicWarpper#showInfo
         */
        showInfo : alias(LogicWarpper,'showInfo'),
        /**
         * @method
         * @member erajs.Extra
         * @inheritdoc erajs.framework.LogicWarpper#showErrorInfo
         */
        showErrorInfo : alias(LogicWarpper,'showErrorInfo'),

        /**
         * @method
         * @member erajs.Extra
         *
         * 将对象的属性合并.
         *
         *      var objects = erajs.Extra.toDataObjects({"bizObj":{"memo":"进账摘要","name":"RecordedSummary"}});
         *
         *      var objects = erajs.Extra.toDataObjects([{"bizObj.memo":"进账摘要"},{"bizObj.name":"RecordedSummary"}]);
         *       // objects then equals:
         *       {
         *         "bizObj.memo" : "进账摘要",
         *         "bizObj.name" : "RecordedSummary"
         *       };
         *
         * @param {Object/Array} value
         * @param {Boolean} recursive 为true时，递归对象
         * @returns {Object}
         */
        toDataObjects : function(value,recursive,name){
            var self = Extra.toDataObjects,
                objects = {},i,ln;
            if (erajs.isArray(value)) {
                for (i = 0, ln = value.length; i < ln; i++) {
                    if (recursive) {
                        erajs.Object.merge(objects,self(value[i], true));
                    }
                    else {
                        objects[name] = value[i];
                    }
                }
            }else if(erajs.isObject(value)){
                for(i in value){
                    if(value.hasOwnProperty(i)){
                        if(recursive){
                            erajs.Object.merge(objects,self(value[i], true,(name ? name + '.' : '') + i));
                        }else{
                            objects[name] = value[i];
                        }
                    }
                }
            }else{
                objects[name] = value;
            }
            return objects;
        },

        /**
         * 加载表单数据,批量设置值.
         * @param {String/HtmlElement} target 选择器表达式或者HtmlElement对象.
         * @param {String/Object} data 请求地址或者数据.
         * @param {Object} param 请求参数.
         * @param {Object} events 加载表单相关事件.
         * @param {Function} [events.onBeforeLoad] (Optional) 加载表单数据之前执行的事件.
         * @param {Function} [events.onBeforeLoad.param] 请求参数.
         * @param {Function} [events.onBeforeLoad.data] 数据或请求地址.
         * @param {Function} [events.onBeforeLoad.return] 返回false来阻止表单数据加载.
         * @param {Function} [events.onLoadSuccess] 远程获取表单数据成功时执行.
         * @param {Function} [events.onLoadSuccess.data] 数据.
         * @param {Function} [events.onAfterLoad] 表单加载数据批量赋值成功后执行，提供参数：data.
         * @param {Function} [events.onAfterLoad.data] 数据.
         * @param {Function} [events.onLoadError] 远程获取表单数据失败执行.
         * @param {String} dataNode 指定初始化数据节点路径.
         *
         */
        loadForm : function(target,data,param,events,dataNode){
            var me = this,
                param = param || {},
                events = events || {};

            var onBeforeLoad = events.onBeforeLoad || erajs.emptyFn,
                onLoadSuccess = events.onLoadSuccess || erajs.emptyFn,
                onLoadError = events.onLoadError || erajs.emptyFn,
                onAfterLoad = events.onAfterLoad || erajs.emptyFn;

            var form = $(target);
            if(!form.length){
                erajs.Extra.showWarnInfo(
                    erajs.String.format(erajs.getMessage('framework.UNFIND_MATCH_FORM_BY_TARGET'),
                        target
                    ));
                return;
            }

            if (onBeforeLoad.call(me, param,data) == false) return;

            //data为请求地址？
            if (typeof data == 'string'){
                erajs.Extra.executeRequest(data,param,
                    function(rslt){

                        //检测返回结果格式是否为对象.
                        if(!erajs.isObject(rslt)){
                            var msg = erajs.getMessage('framework.RESULT_IS_NOT_OBJECT');
                            erajs.Extra.showWarnInfo(msg);
                            return;
                        }

                        var data = null;
                        if(dataNode){
                            data = me.getField(rslt,dataNode);
                        }else{
                            data = rslt.data;
                        }

                        if(data){
                            //将data转化成对象
                            data = erajs.toDataObjects(data,true);
                        }

                        if(rslt.success){
                            if(onLoadSuccess){onLoadSuccess(data);}
                            form.setValues(data);
                            if(onAfterLoad){onAfterLoad(data);}
                        }
                        return false;
                    },onLoadError
                );
            } else {
                if(dataNode){
                    data = me.getField(data,dataNode);
                }
                form.setValues(data);
                if(onAfterLoad){onAfterLoad(data);}
            }
        },

        /**
         * @method
         * @member erajs.Extra
         * @inheritdoc erajs.framework.LogicWarpper#warpReqParams
         */
        warpReqParams : alias(LogicWarpper,'warpReqParams'),

        /**
         * @method
         * @member erajs.Extra
         * @inheritdoc erajs.framework.LogicWarpper#getField
         */
        getField : alias(LogicWarpper,'getField'),

        /**
         * @method
         * @member erajs.Extra
         * @inheritdoc erajs.framework.LogicWarpper#getComboInitData
         */
        getComboInitData : alias(LogicWarpper,'getComboInitData'),

        /**
         * @method
         * @member erajs.Extra
         * @inheritdoc erajs.framework.LogicWarpper#initComboboxData
         */
        initComboboxData : alias(LogicWarpper,'initComboboxData')
    });


    erajs.apply(erajs.Messager,{

        /**
         * @member erajs.Messager
         * @property {Object} 消息键值对.
         */
        message : {},

        /**
         * @member erajs.Messager
         *
         * 获取指定消息代码值.
         * @param {String} code 消息代码.
         * @param {Boolean} [defaulted=true] 如果code未定义，是否返回code默认值.
         * @returns {String} 消息code值.
         */
        getMessage : function(code,defaulted){
            var message = this.message,
                is = defaulted !== undefined ? defaulted : true,
                value = message[code];

            if (!value){
                value =  erajs.Extra.getField(message,code);
            }
            return is == true ? (value || code) : value;
        }
    });

    erajs.apply(erajs,{

        /**
         * @method
         * @member erajs
         * @inheritdoc erajs.framework.LogicWarpper#parserCustomOptions
         */
        parserCustomOptions : alias(LogicWarpper,'parserCustomOptions'),

        /**
         * @method
         * @member erajs
         * 获取项目的基础路径.
         * @returns {String}
         */
        baseURL : alias(Extra,'getBaseURL'),

        /**
         * @method
         * @member erajs
         * @inheritdoc erajs.framework.LogicWarpper#onReady
         */
        onReady : alias(LogicWarpper,'onReady'),

        /**
         * @method
         * @member erajs
         * @inheritdoc erajs.Messager#getMessage
         */
        getMessage : alias(erajs.Messager,'getMessage'),

        /**
         * @method
         * @member erajs
         * @inheritdoc erajs.framework.LogicWarpper#parseResultMessage
         */
        parseResultMessage : alias(LogicWarpper,'parseResultMessage'),

        /**
         * @method
         * @member erajs
         * @inheritdoc erajs.Extra#toDataObjects
         */
        toDataObjects : alias(Extra,'toDataObjects'),

        /**
         * @method
         * @member erajs
         * @inheritdoc erajs.Extra#loadForm
         */
        loadForm : alias(Extra,'loadForm'),

        /**
         * @method
         * @member erajs
         * @inheritdoc erajs.Extra#dateRenderer
         */
        dateRenderer : alias(Extra,'dateRenderer'),

        /**
         * @method
         * @member erajs
         * @inheritdoc erajs.Extra#timeRenderer
         */
        timeRenderer : alias(Extra,'timeRenderer'),

        /**
         * @method
         * @member erajs
         * @inheritdoc erajs.Extra#dateRenderer
         */
        dateTimeRenderer : alias(Extra,'dateTimeRenderer')
    });

}(erajs.Function.alias));
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.framework.Events
 * @singleton
 *
 * Events主要针对流程事件封装，提供弹窗和嵌入页面两种展现方式；功能实现了代办事项列表浏览，流程审批功能；
 *
 * ##使用案列
 *
 * ###弹窗方式(a链接点击触发)
 *
 * 1、定义a链接；
 *
 *      <a onclick="erajs.showEvents();return false"><span style="color:red;">2</span></a>
 *
 * 2、点击调用erajs.showEvents()方法弹窗显示代办事项窗口;
 *
 * {@img erajs.framework.Events/todoTasks.png}
 *
 * 3、双击行，弹窗显示事件处理窗口；
 *
 * {@img erajs.framework.Events/handleDlg.png}
 *
 */
(function(alias){

    var Events = erajs.framework.Events = {

        //代办事项表格的默认ID.
        taskGridId : 'todoTaskDg',

        //事件处理窗口对象.
        eventHandleDlg : null,

        /**
         * @property {Boolean} 是否需要包装事件处理请求参数格式({'reqJson' : '{"bizObj.memo":"test2","bizObj.value":"3","view":"true","id":"138"}'}).
         */
        warpReqJson : false,

        needRestEvent : true,

        /**
         * @cfg {Object} eventsCfg 待办事项的一些配置.
         * @cfg {Object}  [eventsCfg.eventStates={
         *      '0' : '待处理',
         *      '1' : '已处理',
         *      '3' : '处理中'}] 事件状态描述.
         *
         * @cfg {Array}  [eventsCfg.eventHandleBtns=[
         *      {text : '确认',type : 'confirm'},
         *      {text : '拒绝',type : 'reject'},
         *      {text : '回退',type : 'reback'},
         *      {text : '取消',type : 'cancle'}
         *  ]]  事件处理按钮.
         */
        // @cfg {Object}  [eventsCfg.defaultTimeout='']
        eventsCfg : {
            // 默认事件签出的有效时间
            defaultTimeout : 10000
        },

        /**
         * @cfg {Object} Urls 事件相关的到url的集合(不包括菜单).
         * @cfg {String} [Urls.getEventCount='../../getEventCount.action']
         * @cfg {String} [Urls.getEvents='../../getEvents.action']
         * @cfg {String} [Urls.prepareEvent='../../updatePrepare.action']
         * @cfg {String} [Urls.resetEvent='../../updateReset.action']
         * @cfg {String} [Urls.bizObjByEvent='../../getBizObj.action']
         *
         */
        Urls : {
            getEventCount 	: '../../getEventCount.action',
            getEvents		: '../../getEvents.action',
            prepareEvent    : '../../updatePrepare.action',
            resetEvent      : '../../updateReset.action',
            bizObjByEvent : '../../getBizObj.action'
        },

        //循环获取待办事项的频率，以毫秒计，默认5秒
        eventRefreshPeriod : 500000,

        /**
         * 显示代办事项列表.
         */
        showEvents : function(){
            var me = this;
            me.tryBuildEventDlg();
        },

        /**
         * 创建代办事项窗口.
         */
        tryBuildEventDlg : function(){
            var me = this;
            //生成随机id
            var radomWid = erajs.id(null,erajs.windowId);
            //添加window div元素
            $('body').append('<div id="' + radomWid + '"></div>');

            erajs.create('window',{
                contentEl : '#' + radomWid,
                title : erajs.getMessage('framework.WINDOW_TITLE_EVENT'),
                height : 330,
                width : 830,
                content : me.prepareTaskTableDiv()
            });
        },

        /**
         * 准备复核事件数据.
         * @param {Number} rowIndex 行索引.
         * @param {Object} rowData 行记录.
         */
        prepareEvent : function(rowIndex, rowData){
            var me = this;
            me.currentEvent = rowData;

            erajs.Extra.executeRequest(me.Urls.prepareEvent,
                { id : rowData.id},
                function(result){
                    if(result.success){
                        var event = result.data.event;
                        //打开事件处理窗口.
                        me.openEventHandleDialog(me.parseOpts(event));
                        return false;
                    }
                }
            );
        },

        /**
         * 解析事件参数.
         * @private
         * @param {Object} event 事件数据.
         * @returns
         */
        parseOpts : function(event){
            var me = this;
            var expression = erajs.decode(event.expression);
            var url = erajs.String.urlAppend(expression.open,'id=' + event.id);

            var options = {
                title : expression.title || '事项处理',
                width : expression.width || 500,
                height : expression.height || 300,
                href : url,
                barVisible : false,
                readonly : false,
                buttons : []
            };

            if(event.done == 0 || event.done == 3){
                //判断是否需要显示有效期倒计时状态栏.
                if(event.validSecond > 0){
                    options.barVisible = true;
                    // 计算剩余的签出时间
                    var now = new Date().getTime();
                    var start = now - (event.date - event.startDate) ;
                    var passed = Number(((now - start)/1000).toFixed(0));
                    var remain = event.validSecond - passed;
                    var rtimeout = event.openSecond;
                    var timeout = me.eventsCfg.defaultTimeout;

                    if (remain > (rtimeout ? rtimeout : timeout)){
                        remain = rtimeout ? rtimeout : timeout;
                    }

                    options.remain = remain;
                }

                var ehandleBtns = erajs.getMessage('framework.eventsCfg.eventHandleBtns');
                //判断显示的button.
                erajs.each(ehandleBtns,function(ehBtn,index){
                    var skipValidate = false;
                    if(ehBtn.hasOwnProperty('skipValidate')){
                        skipValidate = ehBtn.skipValidate;
                    }
                    for(var p in expression){
                        if(ehBtn.type === p){
                            ehBtn['url'] = expression[p];
                            ehBtn['skipValidate'] = skipValidate;
                            options.buttons.push(ehBtn);
                            break;
                        }
                    }
                });
            }else{
                //只读模式.
                options.href = erajs.String.urlAppend(url,'domReadonly=true');
                options.readonly = true;
            }

            //截取页面请求参数.
            var reqParamStr = options.href.substring(options.href.indexOf('?')+1);
            options.extraParam = reqParamStr;

            return options;
        },

        /**
         * 打开事件处理窗口.
         * @param {Object} options 事件窗口内容配置项.
         */
        openEventHandleDialog : function(options){
            var me = this,opts = options || {};
            //生成随机id
            var radomWid = erajs.id(null,erajs.windowId);
            //添加window div元素
            $('body').append('<div id="' + radomWid + '"></div>');

            me.eventHandleDlg = erajs.create('window',{
                contentEl  : '#' + radomWid,
                title : opts.title,
                width : opts.width,
                height : opts.height,
                content : me.prepareEventHandleDlgDiv(opts),
                onDestroy : function(){
                    //关闭时重置事件.
                    me.resetEvent();
                }
                //todo 准备验证
            });
        },

        /**
         * 准备事件处理页面html元素.
         * @private
         * @param {Object} options 配置项.
         * @returns {String} html元素.
         */
        prepareEventHandleDlgDiv : function(options){
            var me = this,href = options.href,
                buttons = options.buttons,
                readonly = options.readonly,
                barVisible = options.barVisible,
                extraParam = options.extraParam;

            var html = '<div xtype="layout" fit="true">';
            if(barVisible){
//                    html +='<div region="north" height="">';
//                    html +='</div>';
            }
            html +='<div data-options="region:\'center\',border:false" style="overflow-x:hidden; overflow-y：auto;" class="form-box">';
            html +='<div xtype="panel" data-options="href:\''+href+ '\',' +
                'fit:true,' +
                'onLoad : function(){erajs.loadEventHandleData(\''+extraParam+'\');}">';
            html +='</div></div>';

            if(!readonly){
                html += '<div region="south" border="false" class="form-foot-btns">';
                erajs.each(buttons,function(btn){
                    html +='<div xtype="button" class="middleBtn" style="margin-left:10px;" ' +
                        'custom-options="' +
                        'btnType:\'event\',' +
                        'skipValidate : \'' + btn.skipValidate + '\',' +
                        'url : \'' + btn.url + '\',' +
                        'actionType : \'do\'">' + btn.text + '</div>';
                });
                html += '</div>';
            }
            html +='</div>';

            return erajs.String.trim(html);
        },

        /**
         * 准备代办任务列表div内容.
         * @returns {String} 任务列表table Html内容.
         */
        prepareTaskTableDiv : function(){
            var me = this;
            var html = '<table id="' + me.taskGridId + '" xtype="datagrid"';
            html +=     'data-options="';
            html += '       url : \'' + me.Urls.getEvents + '\',';

            html += '       fit : true,border:false,pagination : false,loadFilter : erajs.loadEventDataFilter,';
            html += '       onDblClickRow : erajs.prepareEvent';
            html += '    "';
            html += '   custom-options="';
            html += '       identifyField : \'ROW_ID\',';
            html += '	    total : \'data.event.total\'';
            html += '    ">';
            html += '    <thead>';
            html += '        <tr>';
            html += '            <th data-options="field:\'bussinesId\',width:100,halign:\'center\'">流水号</th>';
            html += '            <th data-options="field:\'title\',width:100,align:\'center\'">类型</th>';
            html += '            <th data-options="field:\'done\',width:70,align:\'center\',sortable:true,formatter:erajs.formatDone">状态</th>';
            html += '            <th data-options="field:\'startDate\',width:120,align:\'center\',sortable:true,formatter:erajs.formatEventDate">事件时间</th>';
            html += '            <th data-options="field:\'startDescription\',width:250,halign:\'center\',sortable:true">事件内容</th>';
            html += '            <th data-options="field:\'doneUser\',width:60,align:\'center\'">受理人</th>';
            html += '            <th data-options="field:\'startUser\',width:60,align:\'center\'">发起人</th>';
            html += '        </tr>';
            html += '    </thead>';
            html +='</table>';
            return html;
        },

        /**
         * 重置事件.
         */
        resetEvent : function(){
            var me = this;
            if(!me.needRestEvent){return;}
            var r = me.currentEvent;
            if(!r){return;}
            var id = r.id;
            if(!id) {return;}
            erajs.Extra.executeRequest(me.Urls.resetEvent,
                {id:id},
                function(result){
                    if(result.success){
                        return false;
                    }
                }
            );
        },

        /**
         * 格式化流程状态值.
         * @param {String} value
         * @param {Object} row
         * @param {Number} index
         * @returns {String} 格式化后的值.
         */
        formatDone : function(value,row,index){
            var me = this;
            var states = erajs.getMessage('framework.eventsCfg.eventStates');
            var text = states[value];
            return text ? text : '-';
        },

        /**
         * 格式化事件时间.
         * @param {String} value
         * @param {Object} row
         * @param {Number} index
         * @returns {String} 格式化后的时间值.
         */
        formatEventDate : function(value,row,index){
            return erajs.isEmpty(value) ? "" : erajs.Date.format(new Date(parseInt(value)),'H:i:s');
        },

        /**
         * @private
         * 回显事件处理页面表单数据.
         */
        loadEventHandleData : function(extraParam){
            var me  = this;
            var ehDlg = me.eventHandleDlg;
            var panel = ehDlg.panel.getPanel();

            var form = panel.find('form');
            if(form.length){
                var reqParams = erajs.urlDecode(extraParam);
                erajs.loadForm(form,
                    me.Urls.bizObjByEvent,reqParams,{
                        onBeforeLoad : function(param){
                            //form.setDomReadonly();
                        },
                        onLoadSuccess : function(data){
                            erajs.Object.merge(data,reqParams);
                            form.data('formData',data);
                        }
                    }
                );
            }
        },

        loadEventDataFilter : function(rslt){
            var success = rslt.success;
            if(!success){
                erajs.Extra.showErrorInfo(rslt.message);
                return {
                    total : 0,
                    rows : []
                };
            }
            var data = rslt.data;

            return {
                total : data.event.total,
                rows : data.event.datals
            };
        }
    };

    erajs.override(erajs.framework.LogicWarpper,{

        parserEventBtn : function(options,target){
            var me = this;
            var skipValidate = options.skipValidate;
            var logicWarpper = erajs.framework.LogicWarpper;
            var formDom = logicWarpper.getFormElement(options,target);

            if(!formDom.length){
                me.showInfo(erajs.String.format(
                    erajs.getMessage('framework.UNFIND_MATCH_FORM'),
                    $(target).text()));
                return;
            }

            if(!logicWarpper.needValidated || skipValidate || erajs.validateForm(formDom)){
                erajs.Messager.confirm(
                    erajs.getMessage('framework.ALERT_TITLE_SHOW'),
                    erajs.getMessage('framework.CONFIRM_IS_CONTINUE'), function(r){
                    if(r){
                        var url = options.url || formDom.attr('action');

                        var serializes = formDom.serialize();
                        var params = erajs.Object.fromQueryString(serializes);
                        //从表单中取出元素的数据与新的数据合并.
                        var originalData = formDom.data('formData');
                        params = erajs.Object.merge(originalData, params);

                        //判断是否需要包装.
                        if(Events.warpReqJson){
                            var seriObj = erajs.encode(params);
                            params = {
                                'reqJson' : seriObj
                            };
                        }

                        erajs.Extra.executeRequest(
                            url,
                            params,
                            function(result, textStatus, jqXHR){
                                if(result.success){
                                    Events.needRestEvent = false;
                                    erajs.Extra.closeSelfWindow(target);
                                    Events.needRestEvent = true;
                                    var dgId = Events.taskGridId;
                                    if(dgId){
                                        erajs.Extra.crudSearch(dgId,{});
                                    }
                                    return false;
                                }
                            }
                        );
                    }
                });
            }
        }
    });

    erajs.apply(erajs,{

        /**
         * @method
         * @member erajs
         * @inheritdoc erajs.framework.Events#showEvents
         */
        showEvents : alias(Events,'showEvents'),

        /**
         * @method
         * @member erajs
         * @inheritdoc erajs.framework.Events#formatDone
         */
        formatDone : alias(Events,'formatDone'),

        /**
         * @method
         * @member erajs
         * @inheritdoc erajs.framework.Events#formatEventDate
         */
        formatEventDate : alias(Events,'formatEventDate'),

        /**
         * @method
         * @member erajs
         * @inheritdoc erajs.framework.Events#prepareEvent
         */
        prepareEvent : alias(Events,'prepareEvent'),

        /**
         * @method
         * @member erajs
         * @inheritdoc erajs.framework.Events#loadEventHandleData
         */
        loadEventHandleData : alias(Events,'loadEventHandleData'),

        loadEventDataFilter : alias(Events,'loadEventDataFilter')

    });
})(erajs.Function.alias);

/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.framework.LogicWarpper
 * @singleton
 *
 */
(function(alias){

    erajs.apply(erajs.framework.LogicWarpper,{

        ztreeConfigs : {
            ztreeContent : function(treeid,showButtons){
                var htmlDiv = '<div xtype="layout" fit="true">';
                htmlDiv += '<div region="center" style="padding-top:5px;">';
                htmlDiv +='<ul id="'+ treeid + '" class="ztree" style="margin-top:0;margin-left:10px;height:auto;overflow: hidden;"></ul>';
                htmlDiv += '</div>';
                if(showButtons){
                    htmlDiv += '<div region="south" border="false" class="form-foot-btns">';
                    htmlDiv += '<div id="' + treeid + '-submit" xtype="button" class="middleBtn" iconCls="icon-save"></div>';
                    htmlDiv += '<div xtype="button" class="middleBtn" iconCls="icon-cancel" style="margin-left:5px;" custom-options=" btnType:\'cancel\'"></div>';
                    htmlDiv += '</div>';
                }
                htmlDiv += '</div>';

                return htmlDiv;
            },
            ztreePanelContent : function(treeid){
                var htmlDiv = '<ul id="'+ treeid +'" class="ztree"  style="margin-top:0;height:auto;overflow: hidden;"></ul>';
                return htmlDiv;
            }
        },

        parseExtraOptions : function(extraOptions,defaultSetting){
            var me = this,filterFields = {};
            if(extraOptions){
                if(extraOptions.hasOwnProperty('filterFields')){
                    filterFields = extraOptions.filterFields;
                    if(filterFields.hasOwnProperty('id')){
                        var idVal = 'id=' + filterFields['id'];
                        erajs.merge(defaultSetting,{
                            async : {
                                autoParam : [idVal]
                            }
                        });
                    }
                }
            }
            return filterFields;
        },

        getZtreeNodes : function(tree){
            var map = {};
            if(tree){
                var nodes = tree.getSelectedNodes(),
                    text = [],
                    value = [];
                erajs.each(nodes,function(node){
                    value.push(node.id);
                    text.push(node.name);
                });
                map = {
                    text : text.join(','),
                    value : value.join(',')
                };
            }
            return map;
        },

        initZtree : function(treeId,options,callback){
            var me = this,
                zTreeObj = null,
                cfgs = me.ztreeConfigs,
                defaultSetting = {
                    async : {
                        enable : true
                    }
                },
                defaultExtraOptions = {
                    rows : 'data.result'
                },
                customSetting = options.setting,
                extraOptions = options.extraOptions,
                filterFields = {};

            filterFields = me.parseExtraOptions(extraOptions,defaultSetting);

            extraOptions = erajs.merge(defaultExtraOptions,extraOptions);

            //重写dataFilter
            defaultSetting = erajs.merge(defaultSetting,{
                async : {
                    dataFilter : function(treeId, parentNode, responseData){
                        if(!responseData){return null};
                        var datas = null;
                        if(erajs.isArray(responseData)){
                            datas = responseData;
                        }else{
                            if(responseData.hasOwnProperty('success')){
                                var success = responseData.success;
                                if(!success) return null;
                                var rows = extraOptions.rows;
                                datas = erajs.framework.LogicWarpper.getField(responseData,rows);
                            }
                        }

                        renderDatas(datas);

                        function renderDatas(rows){
                            erajs.each(rows,function(row){
                                //如果配置了filterFields，那么属性转换.
                                erajs.Object.each(filterFields,function(key, value, myself){
                                    if(row.hasOwnProperty(value)){
                                        row[key] = row[value];
                                        delete row[value];
                                    }
                                });

                                //异步时，判断isParent？
                                var isParent = row.isParent;
                                if(!erajs.isBoolean(isParent)){
                                    isParent = isParent === '1' ? true : false;
                                    row.isParent = isParent;
                                }

                                if(row.hasOwnProperty('children')){
                                    renderDatas(row.children);
                                }
                            });
                        }

                        return datas;
                    }
                }
            });

            erajs.merge(defaultSetting,customSetting);

            zTreeObj = $.fn.zTree.init($(treeId),defaultSetting);

            if(callback){
                callback(zTreeObj);
            }
        },

        showZtreeWindow : function(options,afterInitZtree){
            var me = this,
                zTreeObj = null,
                treeidPrefix = 'ztree',
                cfgs = me.ztreeConfigs,
                defaultWinCfg = {
                    height : 350,
                    width : 300,
                    showButtons : true
                },
                windowCfg = options.window,
                ztreeSetting = options.setting,
                extraOptions = options.extraOptions,
                submitFnc = options.submitFnc;

            erajs.merge(defaultWinCfg,windowCfg);

            var showButtons =  defaultWinCfg.showButtons;
            var treeid = erajs.id(null,treeidPrefix);
            var content = cfgs.ztreeContent(treeid,showButtons);

            var radomWid = erajs.id(null,erajs.windowId);
            //添加window div元素
            $('body').append('<div id="' + radomWid + '"></div>');

            //创建窗口
            erajs.create('window',erajs.merge(
                    defaultWinCfg,{
                        contentEl : '#' + radomWid,
                        content : content
                    })
            );
            me.initZtree('#' + treeid,{
                setting : ztreeSetting,
                extraOptions : extraOptions
            },function(treeObj){
                //初始化ztree后执行.
                if(afterInitZtree){
                    afterInitZtree(treeObj);
                }
                if(showButtons){
                    var submitBtnId = treeid + '-submit';
                    $('#' + submitBtnId).click(function(){
                        if(extraOptions.hasOwnProperty('valueField')){
                            var valueMap = me.getZtreeNodes(treeObj);
                            $(extraOptions['valueField']).val(valueMap.value);
                            if(extraOptions.hasOwnProperty('textField')){
                                $(extraOptions['textField']).val(valueMap.text);
                            }
                        }
                        if(submitFnc){
                            submitFnc(treeObj);
                        }
                        erajs.Extra.closeSelfWindow(radomWid);
                    });
                }
            });
        }
    });

    erajs.apply(erajs,{

        showZtreeWindow : alias(erajs.framework.LogicWarpper,'showZtreeWindow'),

        initZtree : alias(erajs.framework.LogicWarpper,'initZtree')

    });

}(erajs.Function.alias));
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 * @class erajs.framework.Validator
 * @singleton
 *
 * Validator是对<a href="http://jqueryvalidation.org/">jquery validation plugin</a>的封装，
 * 主要将规则的定义提取到xml中定义，以便于维护。
 *
 * ##默认校验规则
 *
 * 备注：值为1表示为true.
 *
 *      required:1  必输字段
 *      remote:'check.php'  使用ajax方法调用check.php验证输入值
 *      email:1 必须输入正确格式的电子邮件
 *      url:1   必须输入正确格式的网址
 *      number:1    必须输入合法的数字(负数，小数)
 *      digits:1    必须输入整数
 *      creditcard:1    必须输入合法的信用卡号
 *      equalTo:'#field'    输入值必须和#field相同
 *      maxlength:5 输入长度最多是5的字符串(汉字算一个字符)
 *      minlength:10    输入长度最小是10的字符串(汉字算一个字符)
 *      rangelength:5,10    输入长度必须介于 5 和 10 之间的字符串(汉字算一个字符)
 *      range:5,10  输入值必须介于 5 和 10 之间
 *      max:5   输入值不能大于5
 *      min:10  输入值不能小于10
 *      byterangelength:5,10    输入字节长度必须介于5 和10 之间(一个中文字算2个字节)
 *      idcard:1    必须输入正确身份证号
 *      cellphone:1 必须输入正确手机号码
 *      fax:1   必须输入正确传真号码
 *      telephone:1 必须输入正确座机电话号码
 *      zipcode:1   必须输入正确邮政编码
 *      pattern:'^[A-Za-z0-9]*$'    输入内容必须与正则匹配
 *      datetime : 'Y-m-d' 输入一个正确格式的日期,格式定义可参考{@link erajs.Date}支持的formats.
 *
 * ##默认的提示
 *
 *      messages: {
 *		     required: "必须填写",
 *           remote: "请修正此字段",
 *           email: "请输入有效的电子邮件",
 *           url: "请输入有效的网址",
 *           number: "请输入正确的数字",
 *           digits: "只可输入数字",
 *           creditcard: "请输入有效的信用卡号码",
 *           equalTo: "你的输入不相同",
 *           maxlength: $.validator.format("最多 {0} 个字"),
 *           minlength: $.validator.format("最少 {0} 个字"),
 *           rangelength: $.validator.format("请输入长度为 {0} 至 {1} 之間的字串"),
 *           range: $.validator.format("请输入 {0} 至 {1} 之间的数值"),
 *           max: $.validator.format("请输入不大于 {0} 的数值"),
 *           min: $.validator.format("请输入不小于 {0} 的数值"),
 *           byterangelength : "请确保输入的值在{0}-{1}个字节之间(一个中文字算2个字节)",
 *           idcard : "请填写正确身份证号",
 *           cellphone : "请填写正确手机号码",
 *           fax : "请填写正确传真号码",
 *           telephone : "请填写正确座机电话号码",
 *           zipcode : "请填写正确邮政编码",
 *           pattern : "输入内容与正则不匹配",
 *           datetime : "请输入一个正确格式的日期，格式：{0}"
 *	    }
 *
 *  如需修改可以在messages-zh_CN.js中修改,在页面中引入;
 *
 * #规则XML配置格式
 *
 * 规则的定义统一定义在xml中，以下是定义模板：
 *
 *      <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
 *            <validations xmlns="http://www.erayt.com/solar2/connector/core/validate">
 *              <validation name="表单name属性值">
 *                  <item name="字段name属性值">
 *                      <rule name="规则名称" value="规则值" message="提示消息" code="提示信息代码值"></rule>
 *                  </item>
 *            </validation>
 *      </validations>
 *
 *  节点说明：
 *
 *  - validation : 表单规则定义节点,name值为表单的name属性值.
 *  - item : 待验证的字段,name值为字段的name属性值.
 *  - rule : 字段的规则定义,name为规则名称，比如‘required’，value为规则的值，code编码值为验证不通过提示的消息，
 *           如果code未定义，那么取message值,code,message都未定义,将会取默认值.可以有多个rule.
 *
 *
 * #使用案例
 *
 * 1、表单定义.
 *
 *      <form id="signupForm" method="get" action="">
 *            <p>
 *              <label for="firstname">Firstname</label>
 *              <input id="firstname" name="firstname" />
 *            </p>
 *            <p>
 *              <label for="email">E-Mail</label>
 *              <input id="email" name="email" />
 *            </p>
 *            <p>
 *              <label for="password">Password</label>
 *              <input id="password" name="password" type="password" />
 *            </p>
 *            <p>
 *              <label for="confirm_password">确认密码</label>
 *              <input id="confirm_password" name="confirm_password" type="password" />
 *            </p>
 *            <p>
 *              <input class="submit" type="submit" value="Submit"/>
 *            </p>
 *        </form>
 *
 * 2、规则定义.
 *
 *      <validation name="signupForm">
 *            <item name="firstname">
 *                  <rule name="required" value="1" message="请输入姓名"></rule>
 *            </item>
 *            <item name="email">
 *                  <rule name="required" value="1" message="请输入Email地址"></rule>
 *                  <rule name="email" value="1"></rule>
 *            </item>
 *            <item name="password">
 *                  <rule name="required" value="1" message="请输入密码"></rule>
 *                  <rule name="minlength" value="5"></rule>
 *                  <rule name="pattern" value="^[A-Za-z0-9]*$" message="密码只能输入数字和英文"></rule>
 *            </item>
 *            <item name="confirm_password">
 *                  <rule name="required" value="1" message="请输入确认密码"></rule>
 *                  <rule name="minlength" value="5"></rule>
 *                  <rule name="equalTo" value="#password" message="两次输入密码不一致"></rule>
 *            </item>
 *       </validation>
 *
 * 规则描述：
 *
 * - firstname : 姓名不能为空.
 * - email : 邮箱地址不能为空，且必须有效的email地址.
 * - password : 密码不能为空，不能小于5个字符，且只能是数字和英文组成.
 * - confirm_password : 确认密码不能为空，不能小于5个字符，且必须和密码一致.
 *
 */
(function(alias){

    var Validator = erajs.framework.Validator = {

        /**
         * 验证文件的路径.
         * @property {String}
         */
        validationPath : '../validation/validation.xml',

        formValidationCfgs : [],

        /**
         * 验证规则对应的HashMap,key为formName,value为校验规则({rules:{},messages:{}}).
         * @property {Object}
         */
        formValidationOptions : new erajs.util.HashMap(),

        /**
         * 规则对应的类型.
         * @property {Object}
         */
        ruleTypeList : {
            required : 'boolean',
            email: 'boolean',
            url: 'boolean',
            date: 'boolean',
            dateISO: 'boolean',
            number: 'boolean',
            digits: 'boolean',
            creditcard: 'boolean',
            idcard: 'boolean',
            cellphone: 'boolean',
            fax: 'boolean',
            telephone: 'boolean',
            zipcode: 'boolean',
            time: 'boolean',
            time12h: 'boolean',
            maxlength : 'number',
            minlength : 'number',
            max : 'number',
            min : 'number',
            rangelength: 'array',
            range: 'array',
            byterangelength: 'array'
        },

        /**
         * 获取表单的配置XML文件.
         * @param {String} xmlPath 配置文件路径.
         */
        loadValidationXml : function(xmlPath){
            var me = this;
            var xmlPath = xmlPath || me.validationPath;
            $.ajax({
                url: xmlPath,
                dataType: 'xml',
                type: 'GET',
                async:false,
                timeout: 2000,
                error: function(xml){
                    erajs.Extra.showErrorInfo(erajs.String.format(
                        erajs.getMessage('framework.ERROR_LOAD_XML'),
                        xmlPath
                    ));
                },
                success: function(xml){
                    var datas = $.xml2json(xml);
                    var forms = datas.validation;
                    if(forms){
                        me.formValidationCfgs = erajs.isArray(forms) ? forms : new Array(forms);
                    }
                }
            });
        },

        /**
         * 准备验证规则,在页面加载完成时调用.一般会在onReady中调用.
         * @param {HtmlElement} formDom form的HtmlElement对象（必填参数).
         */
        prepareValidateRules : function(formDom) {
            var me = this, formRules = null;
            var formName = formDom.attr('name') || formDom.attr('id');

            var valObj = me.formValidationOptions.get(formName);

            if (valObj !== undefined) {
                formRules = valObj;
            }

            if (formRules == null) {
                //查找匹配的表单验证配置信息.
                var config = me.getSpecialFormCfg(formName);
                if (config) {
                    formRules = me.transformValidation(config);
                    if (formRules) {
                        me.formValidationOptions.add(formName, formRules);
                    }
                }
            }
            if(formRules){
                formDom.validate(formRules);
            }
        },

        /**
         * 验证表单.
         * @param {String/HtmlElement} target 表单的name属性或form jquery HtmlElement对象.
         * @returns {Boolean} 是否合法?
         */
        validateForm : function(target){
            var formEls = null;
            if(erajs.isString(target)){
                formEls = $("form[name='" + target + "']");
            }else{
                formEls = target;
            }
            return formEls.valid();
        },

        /**
         * 获取指定form表单的验证配置.
         * @private
         * @param {String} formName 表单的名称.
         * @returns {Object} 表单的校验配置.
         */
        getSpecialFormCfg : function(formName){
            var me = this,formCfgs = me.formValidationCfgs;
            return erajs.Array.findBy(formCfgs,function(item){
                if(item.name == formName){
                    return true;
                }
            });
        },

        /**
         * 将xml中定义的验证信息转换成jquery validation plugin识别的配置.
         * @private
         * @param {Object} formCfg form校验信息.
         * @returns {Object} form表单校验规则及提示信息配置.
         */
        transformValidation : function(formCfg){
            var me = this,rules = {},messages = {};
            var items = formCfg.item;
            erajs.each(items,function(item){
                var name = item.name;
                var rule = item.rule;

                var option = transformRule(rule);

                rules[name] = option.rule;
                messages[name] = option.message;
            });

            //转换规则
            function transformRule(rule){
                var rule2 = {},message2 = {};
                erajs.each(rule,function(obj,index){
                    var name = obj.name,
                        value = obj.value,
                        code = obj.code,
                        message = obj.message || '';

                    if(code){
                        message = erajs.getMessage(code,false) || message;
                    }
                    //判断规则对应的value是否需要转换类型?
                    var toType = me.ruleTypeList[name];
                    value = (toType !== undefined ? me.transformValue2(value,toType) : value);
                    rule2[name] = value;
                    if(!erajs.isEmpty(message)){
                        message2[name] = message;
                    }
                });

                return {
                    rule : rule2,
                    message : message2
                };
            }

            var options = {
                rules : rules,
                messages : messages
            };

            return erajs.Object.isEmpty(rules) ? null : options;
        },

        /**
         * 将值转换到指定的类型.
         * @private
         * @param {String} value 待转换的值.
         * @param {String} toType 转换的类型
         * @returns {Boolean/Number} 转换后的值.
         */
        transformValue2 : function(value,toType){
            switch(toType){
                case 'boolean' :
                    value = Boolean(value);
                    break;
                case 'number' :
                    value = Number(value);
                    break;
                case 'array':
                    value = value.split(',');
                    break;
            }
            return value;
        }
    };

    erajs.apply(erajs,{

        /**
         * 显示tip信息.
         * @member erajs
         * @param {HtmlElement} element 指定元素
         * @param {String} text tip信息内容
         */
        showTooltip : function(element, text) {
            erajs.create('tooltip',{
                target : element,
                position : 'right',
                content : text,
                onShow : function() {
                    this.getTip().css({
                        color : "#000",
                        borderColor : "#CC9933",
                        backgroundColor : "#FFFFCC"
                    });
                },
                onHide : function(e){
                    this.destroy(false);
                }
            });
        },

        /**
         * @method
         * @member erajs
         * @inheritdoc erajs.framework.Validator#loadValidationXml
         */
        loadValidationXml : alias(Validator,'loadValidationXml'),

        /**
         * @method
         * @member erajs
         * @inheritdoc erajs.framework.Validator#prepareValidateRules
         */
        prepareValidateRules : alias(Validator,'prepareValidateRules'),

        /**
         * @method
         * @member erajs
         * @inheritdoc erajs.framework.Validator#validateForm
         */
        validateForm : alias(Validator,'validateForm')
    });

    $.validator.setDefaults({
        errorClass : "validate-error",
        onkeyup : false,
        errorPlacement : function(error, element) {
            erajs.showTooltip(element, error.text());
        },
        invalidHandler : function(form, validator){
            validator.focusInvalid();
            return false;
        }
    });

}(erajs.Function.alias));
/**
 * @author Scm <chengqiuhua@erayt.com>
 * @docauthor Scm <chengqiuhua@erayt.com>
 *
 * This simple script converts XML (document of code) into a JSON object.
 * It is the combination of 2 xml to json' great parsers (see below)
 * which allows for both 'simple' and 'extended' parsing modes.
 */
if(window.jQuery) (function($){

    // Add function to jQuery namespace
    $.extend({

        // converts xml documents and xml text to json object
        xml2json: function(xml, extended) {
            if(!xml) return {}; // quick fail

            //### PARSER LIBRARY
            // Core function
            function parseXML(node, simple){
                if(!node) return null;
                var txt = '', obj = null, att = null;
                var nt = node.nodeType, nn = jsVar(node.localName || node.nodeName);
                var nv = node.text || node.nodeValue || '';
                /*DBG*/ //if(window.console) console.log(['x2j',nn,nt,nv.length+' bytes']);
                if(node.childNodes){
                    if(node.childNodes.length>0){
                        /*DBG*/ //if(window.console) console.log(['x2j',nn,'CHILDREN',node.childNodes]);
                        $.each(node.childNodes, function(n,cn){
                            var cnt = cn.nodeType, cnn = jsVar(cn.localName || cn.nodeName);
                            var cnv = cn.text || cn.nodeValue || '';
                            /*DBG*/ //if(window.console) console.log(['x2j',nn,'node>a',cnn,cnt,cnv]);
                            if(cnt == 8){
                                /*DBG*/ //if(window.console) console.log(['x2j',nn,'node>b',cnn,'COMMENT (ignore)']);
                                return; // ignore comment node
                            }
                            else if(cnt == 3 || cnt == 4 || !cnn){
                                // ignore white-space in between tags
                                if(cnv.match(/^\s+$/)){
                                    /*DBG*/ //if(window.console) console.log(['x2j',nn,'node>c',cnn,'WHITE-SPACE (ignore)']);
                                    return;
                                };
                                /*DBG*/ //if(window.console) console.log(['x2j',nn,'node>d',cnn,'TEXT']);
                                txt += cnv.replace(/^\s+/,'').replace(/\s+$/,'');
                                // make sure we ditch trailing spaces from markup
                            }
                            else{
                                /*DBG*/ //if(window.console) console.log(['x2j',nn,'node>e',cnn,'OBJECT']);
                                obj = obj || {};
                                if(obj[cnn]){
                                    /*DBG*/ //if(window.console) console.log(['x2j',nn,'node>f',cnn,'ARRAY']);

                                    // http://forum.jquery.com/topic/jquery-jquery-xml2json-problems-when-siblings-of-the-same-tagname-only-have-a-textnode-as-a-child
                                    if(!obj[cnn].length) obj[cnn] = myArr(obj[cnn]);
                                    obj[cnn] = myArr(obj[cnn]);

                                    obj[cnn][ obj[cnn].length ] = parseXML(cn, true/* simple */);
                                    obj[cnn].length = obj[cnn].length;
                                }
                                else{
                                    /*DBG*/ //if(window.console) console.log(['x2j',nn,'node>g',cnn,'dig deeper...']);
                                    obj[cnn] = parseXML(cn);
                                };
                            };
                        });
                    };//node.childNodes.length>0
                };//node.childNodes
                if(node.attributes){
                    if(node.attributes.length>0){
                        /*DBG*/ //if(window.console) console.log(['x2j',nn,'ATTRIBUTES',node.attributes])
                        att = {}; obj = obj || {};
                        $.each(node.attributes, function(a,at){
                            var atn = jsVar(at.name), atv = at.value;
                            att[atn] = atv;
                            if(obj[atn]){
                                /*DBG*/ //if(window.console) console.log(['x2j',nn,'attr>',atn,'ARRAY']);

                                // http://forum.jquery.com/topic/jquery-jquery-xml2json-problems-when-siblings-of-the-same-tagname-only-have-a-textnode-as-a-child
                                //if(!obj[atn].length) obj[atn] = myArr(obj[atn]);//[ obj[ atn ] ];
                                obj[cnn] = myArr(obj[cnn]);

                                obj[atn][ obj[atn].length ] = atv;
                                obj[atn].length = obj[atn].length;
                            }
                            else{
                                /*DBG*/ //if(window.console) console.log(['x2j',nn,'attr>',atn,'TEXT']);
                                obj[atn] = atv;
                            };
                        });
                        //obj['attributes'] = att;
                    };//node.attributes.length>0
                };//node.attributes
                if(obj){
                    obj = $.extend( (txt!='' ? new String(txt) : {}),/* {text:txt},*/ obj || {}/*, att || {}*/);
                    //txt = (obj.text) ? (typeof(obj.text)=='object' ? obj.text : [obj.text || '']).concat([txt]) : txt;
                    txt = (obj.text) ? ([obj.text || '']).concat([txt]) : txt;
                    if(txt) obj.text = txt;
                    txt = '';
                };
                var out = obj || txt;
                //console.log([extended, simple, out]);
                if(extended){
                    if(txt) out = {};//new String(out);
                    txt = out.text || txt || '';
                    if(txt) out.text = txt;
                    if(!simple) out = myArr(out);
                };
                return out;
            };// parseXML
            // Core Function End
            // Utility functions
            var jsVar = function(s){ return String(s || '').replace(/-/g,"_"); };

            // NEW isNum function: 01/09/2010
            // Thanks to Emile Grau, GigaTecnologies S.L., www.gigatransfer.com, www.mygigamail.com
            function isNum(s){
                // based on utility function isNum from xml2json plugin (http://www.fyneworks.com/ - diego@fyneworks.com)
                // few bugs corrected from original function :
                // - syntax error : regexp.test(string) instead of string.test(reg)
                // - regexp modified to accept  comma as decimal mark (latin syntax : 25,24 )
                // - regexp modified to reject if no number before decimal mark  : ".7" is not accepted
                // - string is "trimmed", allowing to accept space at the beginning and end of string
                var regexp=/^((-)?([0-9]+)(([\.\,]{0,1})([0-9]+))?$)/
                return (typeof s == "number") || regexp.test(String((s && typeof s == "string") ? jQuery.trim(s) : ''));
            };
            // OLD isNum function: (for reference only)
            //var isNum = function(s){ return (typeof s == "number") || String((s && typeof s == "string") ? s : '').test(/^((-)?([0-9]*)((\.{0,1})([0-9]+))?$)/); };

            var myArr = function(o){

                // http://forum.jquery.com/topic/jquery-jquery-xml2json-problems-when-siblings-of-the-same-tagname-only-have-a-textnode-as-a-child
                //if(!o.length) o = [ o ]; o.length=o.length;
                if(!$.isArray(o)) o = [ o ]; o.length=o.length;

                // here is where you can attach additional functionality, such as searching and sorting...
                return o;
            };
            // Utility functions End
            //### PARSER LIBRARY END

            // Convert plain text to xml
            if(typeof xml=='string') xml = $.text2xml(xml);

            // Quick fail if not xml (or if this is a node)
            if(!xml.nodeType) return;
            if(xml.nodeType == 3 || xml.nodeType == 4) return xml.nodeValue;

            // Find xml root node
            var root = (xml.nodeType == 9) ? xml.documentElement : xml;

            // Convert xml to json
            var out = parseXML(root, true /* simple */);

            // Clean-up memory
            xml = null; root = null;

            // Send output
            return out;
        },

        // Convert text to XML DOM
        text2xml: function(str) {
            // NOTE: I'd like to use jQuery for this, but jQuery makes all tags uppercase
            //return $(xml)[0];

            /* prior to jquery 1.9 */
            /*
             var out;
             try{
             var xml = ((!$.support.opacity && !$.support.style))?new ActiveXObject("Microsoft.XMLDOM"):new DOMParser();
             xml.async = false;
             }catch(e){ throw new Error("XML Parser could not be instantiated") };
             try{
             if((!$.support.opacity && !$.support.style)) out = (xml.loadXML(str))?xml:false;
             else out = xml.parseFromString(str, "text/xml");
             }catch(e){ throw new Error("Error parsing XML string") };
             return out;
             */

            /* jquery 1.9+ */
            return $.parseXML(str);
        }

    }); // extend $

})(jQuery);